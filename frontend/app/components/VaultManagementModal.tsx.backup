'use client'

import { useState, useEffect } from 'react'
import { useSarcophagusContract } from '../hooks/useSarcophagusContract'
import { useNotification } from '../contexts/NotificationContext'
import { useLoading } from '../contexts/LoadingContext'
import React from 'react'
import { ethers } from 'ethers'
import { FaSyncAlt } from 'react-icons/fa'
import LegalAgreement from './LegalAgreement'

interface VaultData {
  id: string;
  owner: string;
  beneficiaries: { address: string; percentage: number }[];
  totalValue: string;
  lifeExpectancy: number;
  createdAt: Date;
  status: 'active' | 'pending' | 'distributed';
  obolRewards: string;
  obolLocked: string;
}

interface VaultManagementModalProps {
  vault: VaultData | null;
  isOpen: boolean;
  onClose: () => void;
  defaultTab?: 'deposit' | 'obol' | 'b3tr' | 'beneficiaries' | 'info' | 'nfts' | 'convert';
}

export default function VaultManagementModal({ vault, isOpen, onClose, defaultTab }: VaultManagementModalProps) {
  const { showNotification } = useNotification()
  const { isLoading } = useLoading()
  const [vetAmount, setVetAmount] = useState('')
  const [vthoAmount, setVthoAmount] = useState('')
  const [b3trAmount, setB3trAmount] = useState('')
  const [obolAmount, setObolAmount] = useState('')
  const [gloAmount, setGloAmount] = useState('')
  const [convertFromToken, setConvertFromToken] = useState('')
  const [convertToToken, setConvertToToken] = useState('')
  const [convertFromAmount, setConvertFromAmount] = useState('')
  const [convertMinToAmount, setConvertMinToAmount] = useState('')
  const [activeTab, setActiveTab] = useState<'deposit' | 'obol' | 'b3tr' | 'beneficiaries' | 'info' | 'nfts' | 'convert'>(defaultTab || 'deposit')

  // Legal agreement state
  const [showLegalAgreement, setShowLegalAgreement] = useState(false)
  const [pendingAction, setPendingAction] = useState<{
    type: 'deposit' | 'lock' | 'convert'
    action: () => Promise<void>
  } | null>(null)

  // NFT-related state
  const [nftSearchTerm, setNftSearchTerm] = useState('')
  const [selectedCollection, setSelectedCollection] = useState('')
  const [selectedStatus, setSelectedStatus] = useState('')
  const [nftValues, setNftValues] = useState<{[key: string]: string}>({})
  const [nftBeneficiaries, setNftBeneficiaries] = useState<{[key: string]: string}>({})

  const {
    depositTokens,
    addGLO,
    lockObolTokens,
    convertTokens,
    getConversionRate,
    supportedTokens,
    conversionLoading,
    refreshUserData,
    userSarcophagus,
    // NFT-related functions
    nftCollections,
    userNFTs,
    lockedNFTs,
    nftLoading,
    loadNFTCollections,
    loadUserNFTs,
    loadLockedNFTs,
    lockNFT,
    unlockNFT,
    updateNFTBeneficiary,
    loading
  } = useSarcophagusContract()

  const [conversionRate, setConversionRate] = useState<string>('')
  const [convertError, setConvertError] = useState<string | null>(null)
  const [convertSuccess, setConvertSuccess] = useState<string | null>(null)

  // Show token balances at the top
  const tokenBalances = userSarcophagus ? [
    { label: 'VET', value: userSarcophagus.vetAmount },
    { label: 'VTHO', value: userSarcophagus.vthoAmount },
    { label: 'B3TR', value: userSarcophagus.b3trAmount },
    { label: 'OBOL', value: userSarcophagus.obolAmount },
    { label: 'GLO', value: userSarcophagus.gloAmount },
  ] : [];

  // Update activeTab when defaultTab changes (modal opens)
  useEffect(() => {
    if (defaultTab) {
      setActiveTab(defaultTab)
    }
  }, [defaultTab])

  // Load NFT data when NFT tab is active
  useEffect(() => {
    if (activeTab === 'nfts') {
      loadNFTCollections()
      loadUserNFTs()
      loadLockedNFTs()
    }
  }, [activeTab, loadNFTCollections, loadUserNFTs, loadLockedNFTs])

  // Real-time conversion rate fetch
  useEffect(() => {
    const fetchRate = async () => {
      if (convertFromToken && convertToToken && convertFromAmount && getConversionRate) {
        try {
          const rate = await getConversionRate(convertFromToken, convertToToken, convertFromAmount)
          setConversionRate(rate.toString())
        } catch {
          setConversionRate('')
        }
      } else {
        setConversionRate('')
      }
    }
    fetchRate()
  }, [convertFromToken, convertToToken, convertFromAmount, getConversionRate])

  const handleDepositTokens = async () => {
    if (!vetAmount && !vthoAmount && !b3trAmount) {
      showNotification('Please enter at least one token amount', 'warning')
      return
    }

    try {
      const tx = await depositTokens(vthoAmount || '0', b3trAmount || '0')
      showNotification('Depositing tokens...', 'info')
      await tx.wait()
      showNotification('Tokens deposited successfully!', 'success')
      await refreshUserData()
      setVetAmount('')
      setVthoAmount('')
      setB3trAmount('')
    } catch (error) {
      console.error('Error depositing tokens:', error)
      showNotification('Failed to deposit tokens', 'error')
    }
  }

  const handleDepositGLO = async () => {
    if (!gloAmount) {
      showNotification('Please enter GLO amount', 'warning')
      return
    }
    try {
      const tx = await addGLO(gloAmount)
      showNotification('Depositing GLO...', 'info')
      await tx.wait()
      showNotification('GLO deposited successfully!', 'success')
      await refreshUserData()
      setGloAmount('')
    } catch (error) {
      console.error('Error depositing GLO:', error)
      showNotification('Failed to deposit GLO', 'error')
    }
  }

  const handleLockObolTokens = async () => {
    if (!obolAmount) {
      showNotification('Please enter OBOL amount', 'warning')
      return
    }

    try {
      const tx = await lockObolTokens(obolAmount)
      showNotification('Locking OBOL tokens...', 'info')
      await tx.wait()
      showNotification('OBOL tokens locked successfully!', 'success')
      await refreshUserData()
      setObolAmount('')
    } catch (error) {
      console.error('Error locking OBOL tokens:', error)
      showNotification('Failed to lock OBOL tokens', 'error')
    }
  }

  // Swap from/to tokens
  const handleSwapTokens = () => {
    setConvertFromToken(convertToToken)
    setConvertToToken(convertFromToken)
    setConvertFromAmount('')
    setConvertMinToAmount('')
    setConversionRate('')
    setConvertError(null)
    setConvertSuccess(null)
  }

  const handleConvertTokens = async () => {
    setConvertError(null)
    setConvertSuccess(null)
    if (!convertFromToken || !convertToToken || !convertFromAmount) {
      setConvertError('Please select tokens and enter an amount')
      showNotification('Please select tokens and enter an amount', 'warning')
      return
    }
    try {
      const tx = await convertTokens(convertFromToken, convertToToken, convertFromAmount)
      showNotification('Converting tokens...', 'info')
      await tx.wait()
      showNotification('Tokens converted successfully!', 'success')
      setConvertSuccess('Tokens converted successfully!')
      await refreshUserData()
      setConvertFromAmount('')
      setConvertMinToAmount('')
    } catch (error) {
      console.error('Error converting tokens:', error)
      setConvertError('Failed to convert tokens')
      showNotification('Failed to convert tokens', 'error')
    }
  }

  const handleBatchLockNFTs = async () => {
    const selectedNFTs = userNFTs?.filter(nft => {
      const beneficiary = nftBeneficiaries[`${nft.contractAddress}-${nft.tokenId}`]
      const value = nftValues[`${nft.contractAddress}-${nft.tokenId}`]
      return beneficiary && value && parseFloat(value) > 0 && !nft.isLocked
    }) || []

    if (selectedNFTs.length === 0) {
      showNotification('Please select NFTs to lock with beneficiaries and values', 'warning')
      return
    }

    try {
      for (const nft of selectedNFTs) {
        const beneficiary = nftBeneficiaries[`${nft.contractAddress}-${nft.tokenId}`]
        const value = nftValues[`${nft.contractAddress}-${nft.tokenId}`]
        await lockNFT(nft.contractAddress, nft.tokenId, ethers.parseEther(value), beneficiary)
      }
      showNotification(`Successfully locked ${selectedNFTs.length} NFTs!`, 'success')
    } catch (error) {
      console.error('Error in batch lock:', error)
      showNotification('Some NFTs failed to lock', 'error')
    }
  }

  if (!isOpen || !vault) return null

  return (
    <div className="fixed inset-0 bg-sarcophagus-950/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
      <div className="bg-sarcophagus-900 border border-sarcophagus-700 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="p-6 border-b border-sarcophagus-700">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-bold text-sarcophagus-100">Manage Vault #{vault.id}</h2>
            <button
              onClick={onClose}
              className="text-sarcophagus-400 hover:text-sarcophagus-200 transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Tabs */}
        <div className="flex border-b border-sarcophagus-700">
          <button
            onClick={() => setActiveTab('deposit')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'deposit'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            Deposit Tokens
          </button>
          <button
            onClick={() => setActiveTab('obol')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'obol'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            OBOL Rewards
          </button>
          <button
            onClick={() => setActiveTab('b3tr')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'b3tr'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            B3TR Rewards
          </button>
          <button
            onClick={() => setActiveTab('beneficiaries')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'beneficiaries'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            Beneficiaries
          </button>
          <button
            onClick={() => setActiveTab('info')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'info'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            Vault Info
          </button>
          <button
            onClick={() => setActiveTab('nfts')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'nfts'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            NFTs
          </button>
          <button
            onClick={() => setActiveTab('convert')}
            className={`px-6 py-3 text-sm font-medium transition-colors ${
              activeTab === 'convert'
                ? 'text-accent-gold border-b-2 border-accent-gold'
                : 'text-sarcophagus-400 hover:text-sarcophagus-200'
            }`}
          >
            Convert
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Token Balances */}
          {userSarcophagus && (
            <div className="flex flex-wrap gap-4 mb-4">
              {tokenBalances.map(tb => (
                <div key={tb.label} className="bg-sarcophagus-800 border border-sarcophagus-700 rounded-lg px-4 py-2 text-sarcophagus-100">
                  <span className="font-bold">{tb.label}:</span> {ethers.formatEther(tb.value || 0)}
                </div>
              ))}
            </div>
          )}

          {activeTab === 'deposit' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">Deposit Tokens</h3>
                <p className="text-sarcophagus-400 mb-4">
                  Deposit VET, VTHO, or B3TR tokens into your vault. Earn $B3TR rewards upon inheritance!
                </p>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                      VET Amount
                    </label>
                    <input
                      type="number"
                      value={vetAmount}
                      onChange={(e) => setVetAmount(e.target.value)}
                      placeholder="0.0"
                      className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                      VTHO Amount
                    </label>
                    <input
                      type="number"
                      value={vthoAmount}
                      onChange={(e) => setVthoAmount(e.target.value)}
                      placeholder="0.0"
                      className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                      B3TR Amount
                    </label>
                    <input
                      type="number"
                      value={b3trAmount}
                      onChange={(e) => setB3trAmount(e.target.value)}
                      placeholder="0.0"
                      className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                      GLO Amount
                    </label>
                    <input
                      type="number"
                      value={gloAmount}
                      onChange={(e) => setGloAmount(e.target.value)}
                      placeholder="0.0"
                      className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                    />
                  </div>
                </div>
                
                <div className="flex gap-4">
                  <button
                    onClick={handleDepositTokens}
                    disabled={isLoading.depositTokens}
                    className="w-full mt-6 bg-gradient-to-r from-accent-gold to-accent-bronze text-sarcophagus-950 py-3 rounded-lg font-semibold hover:opacity-90 transition-opacity disabled:opacity-50"
                  >
                    {isLoading.depositTokens ? 'Depositing...' : 'Deposit Tokens'}
                  </button>
                  <button
                    onClick={handleDepositGLO}
                    disabled={isLoading.depositGLO}
                    className="w-full mt-6 bg-gradient-to-r from-accent-gold to-accent-bronze text-sarcophagus-950 py-3 rounded-lg font-semibold hover:opacity-90 transition-opacity disabled:opacity-50"
                  >
                    {isLoading.depositGLO ? 'Depositing GLO...' : 'Deposit GLO'}
                  </button>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'obol' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">$OBOL Rewards & Locking</h3>
                
                {/* OBOL Stats */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-accent-gold">{vault.obolRewards}</div>
                    <div className="text-sarcophagus-400 text-sm">$OBOL Earned</div>
                  </div>
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-green-400">{vault.obolLocked}</div>
                    <div className="text-sarcophagus-400 text-sm">$OBOL Locked</div>
                  </div>
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-blue-400">10:1</div>
                    <div className="text-sarcophagus-400 text-sm">Reward Rate</div>
                  </div>
                </div>

                {/* Lock OBOL Tokens */}
                <div className="bg-sarcophagus-800/50 border border-sarcophagus-700 rounded-lg p-4">
                  <h4 className="text-md font-semibold text-accent-gold mb-3">Lock $OBOL Tokens</h4>
                  <p className="text-sarcophagus-400 text-sm mb-4">
                    Lock your earned $OBOL tokens in the vault. They will be distributed to beneficiaries upon death verification.
                  </p>
                  
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                        $OBOL Amount to Lock
                      </label>
                      <input
                        type="number"
                        value={obolAmount}
                        onChange={(e) => setObolAmount(e.target.value)}
                        placeholder="0.0"
                        className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                      />
                    </div>
                    
                    <button
                      onClick={handleLockObolTokens}
                      disabled={isLoading.lockObol}
                      className="w-full bg-gradient-to-r from-accent-gold to-accent-bronze text-sarcophagus-950 py-2 rounded-lg font-semibold hover:opacity-90 transition-opacity disabled:opacity-50"
                    >
                      {isLoading.lockObol ? 'Locking...' : 'Lock $OBOL Tokens'}
                    </button>
                  </div>
                </div>

                {/* Reward Info */}
                <div className="bg-sarcophagus-800/30 border border-sarcophagus-700 rounded-lg p-4">
                  <h4 className="text-md font-semibold text-accent-gold mb-2">Reward Information</h4>
                  <ul className="text-sarcophagus-400 text-sm space-y-1">
                    <li>• Earn OBOL rewards on <b>all tokens locked in your vault</b> (VET, VTHO, B3TR, OBOL), based on their VET-equivalent value.</li>
                    <li>• <b>Conversion rates:</b> 1 VET = 1 VET, 1 VTHO = 0.0001 VET, 1 B3TR = 0.001 VET, 1 OBOL = 0.01 VET.</li>
                    <li>• <b>Hard Cap:</b> Maximum 1,500 OBOL in unclaimed rewards. Claim regularly to continue earning!</li>
                    <li>• Rewards are automatically calculated and updated on every deposit or lock.</li>
                    <li>• Lock any combination of supported tokens to maximize your OBOL earnings.</li>
                    <li>• Total supply: 100,000,000 $OBOL</li>
                    <li>• 95% of supply distributed as rewards</li>
                  </ul>
                </div>

                {/* Grandfathering Info */}
                <div className="bg-sarcophagus-800/30 border border-sarcophagus-700 rounded-lg p-4">
                  <h4 className="text-md font-semibold text-accent-gold mb-2">OBOL Grandfathering</h4>
                  <p className="text-sarcophagus-400 text-sm mb-3">
                    When beneficiaries inherit, they can preserve the same $OBOL earning rate by creating a new vault and locking their inheritance within 90 days.
                  </p>
                  <ul className="text-sarcophagus-400 text-sm space-y-1">
                    <li>• Beneficiaries can create vaults anytime (no time limit)</li>
                    <li>• 90-day deadline is ONLY for preserving the original OBOL rate</li>
                    <li>• Lock inheritance within 90 days → Get deceased user's OBOL rate</li>
                    <li>• Lock inheritance after 90 days → Get standard new user OBOL rate</li>
                    <li>• No vault creation → No continuous OBOL earning</li>
                    <li>• This preserves generational wealth through OBOL earning</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'b3tr' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">$B3TR Rewards</h3>
                
                {/* B3TR Stats */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-green-400">Personalized</div>
                    <div className="text-sarcophagus-400 text-sm">Carbon Footprint/Year</div>
                  </div>
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-blue-400">100 B3TR</div>
                    <div className="text-sarcophagus-400 text-sm">For Reaching Life Expectancy + Per Year Past</div>
                  </div>
                </div>

                {/* Inheritance Bonus Info */}
                <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4 mb-6">
                  <h4 className="text-md font-semibold text-accent-gold mb-3">Carbon & Legacy Rewards</h4>
                  <p className="text-sarcophagus-400 text-sm mb-4">
                    When beneficiaries inherit, they receive $B3TR rewards based on carbon saved and legacy bonuses.
                  </p>
                  
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-sarcophagus-400 text-sm">Carbon Offset:</span>
                      <span className="text-green-400 font-semibold">Years saved × personalized CO2 footprint/year</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-sarcophagus-400 text-sm">Legacy Bonus:</span>
                      <span className="text-blue-400 font-semibold">100 B3TR for reaching life expectancy + 100 B3TR per year past it</span>
                    </div>
                  </div>
                </div>

                {/* Reward Info */}
                <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                  <h4 className="text-md font-semibold text-accent-gold mb-2">Carbon & Legacy Reward Information</h4>
                  <ul className="text-sarcophagus-400 text-sm space-y-1">
                    <li>• Carbon offset: Years of life saved × personalized CO2 footprint/year</li>
                    <li>• Legacy bonus: 100 B3TR for reaching your life expectancy + 100 B3TR for each year past it</li>
                    <li>• Rewards are paid immediately upon inheritance claim</li>
                    <li>• Sustainable rewards from Vebetter DAO</li>
                    <li>• No additional requirements or time limits</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'beneficiaries' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">Beneficiaries</h3>
                
                <div className="space-y-3">
                  {vault.beneficiaries.map((beneficiary, index) => (
                    <div key={index} className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="flex justify-between items-center">
                        <div>
                          <div className="text-sarcophagus-100 font-medium">
                            {beneficiary.address.slice(0, 6)}...{beneficiary.address.slice(-4)}
                          </div>
                          <div className="text-sarcophagus-400 text-sm">
                            Beneficiary #{index + 1}
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="text-accent-gold font-semibold">{beneficiary.percentage}%</div>
                          <div className="text-sarcophagus-400 text-sm">Share</div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="mt-4 p-4 bg-sarcophagus-800/30 border border-sarcophagus-700 rounded-lg">
                  <h4 className="text-md font-semibold text-accent-gold mb-2">Distribution Details</h4>
                  <p className="text-sarcophagus-400 text-sm">
                    Upon death verification, all locked tokens (VET, VTHO, B3TR, and $OBOL) will be distributed 
                    to beneficiaries according to their percentage shares, plus $B3TR carbon offset and legacy bonuses.
                  </p>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'info' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">Vault Information</h3>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-3">
                    <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="text-sarcophagus-400 text-sm">Total Value</div>
                      <div className="text-sarcophagus-100 font-semibold">{vault.totalValue}</div>
                    </div>
                    
                    <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="text-sarcophagus-400 text-sm">Life Expectancy</div>
                      <div className="text-sarcophagus-100 font-semibold">{vault.lifeExpectancy} years</div>
                    </div>
                    
                    <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="text-sarcophagus-400 text-sm">Created</div>
                      <div className="text-sarcophagus-100 font-semibold">
                        {vault.createdAt.toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                  
                  <div className="space-y-3">
                    <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="text-sarcophagus-400 text-sm">Status</div>
                      <div className={`font-semibold ${
                        vault.status === 'active' ? 'text-green-400' :
                        vault.status === 'pending' ? 'text-accent-gold' : 'text-blue-400'
                      }`}>
                        {vault.status.toUpperCase()}
                      </div>
                    </div>
                    
                    <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="text-sarcophagus-400 text-sm">$B3TR Carbon Offset</div>
                      <div className="text-green-400 font-semibold">Years saved × personalized CO2 footprint/year</div>
                    </div>
                    
                    <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                      <div className="text-sarcophagus-400 text-sm">$B3TR Legacy Bonus</div>
                      <div className="text-blue-400 font-semibold">100 B3TR for reaching life expectancy + 100 B3TR per year past it</div>
                    </div>
                  </div>
                </div>
                
                <div className="mt-6 p-4 bg-sarcophagus-800/30 border border-sarcophagus-700 rounded-lg">
                  <h4 className="text-md font-semibold text-accent-gold mb-2">Vault Security</h4>
                  <ul className="text-sarcophagus-400 text-sm space-y-1">
                    <li>• Smart contract secured on VeChain blockchain</li>
                    <li>• Death verification required for distribution</li>
                    <li>• Anti-farming measures prevent abuse</li>
                    <li>• Rate limiting on deposits</li>
                    <li>• Minimum lock periods enforced</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'nfts' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">Lock NFTs in Your Vault</h3>
                <p className="text-sarcophagus-400 mb-4">
                  Lock whitelisted NFTs in your vault to earn OBOL rewards. Assign each NFT to a beneficiary. Only reputable VeChain NFT collections are supported.
                </p>
                
                {/* Stats Overview */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-accent-gold">{userNFTs?.length || 0}</div>
                    <div className="text-sarcophagus-400 text-sm">Available NFTs</div>
                  </div>
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-green-400">{lockedNFTs?.length || 0}</div>
                    <div className="text-sarcophagus-400 text-sm">Locked NFTs</div>
                  </div>
                  <div className="bg-sarcophagus-800/80 border border-sarcophagus-700 rounded-lg p-4">
                    <div className="text-2xl font-bold text-blue-400">{nftCollections?.filter(c => c.isWhitelisted).length || 0}</div>
                    <div className="text-sarcophagus-400 text-sm">Whitelisted Collections</div>
                  </div>
                </div>

                {/* Whitelisted Collections */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-md font-semibold text-sarcophagus-200">Whitelisted Collections</h4>
                    <div className="text-xs text-sarcophagus-400">
                      {nftCollections?.filter(c => c.isWhitelisted).length || 0} collections
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                    {nftCollections?.filter(c => c.isWhitelisted).map((collection, index) => (
                      <div key={index} className="bg-sarcophagus-800/60 border border-sarcophagus-700 rounded-lg p-3">
                        <div className="flex items-center justify-between mb-2">
                          <div className="text-sarcophagus-100 font-medium text-sm truncate">{collection.name}</div>
                          <div className="bg-green-500/20 text-green-400 text-xs px-2 py-1 rounded-full">Whitelisted</div>
                        </div>
                        <div className="text-sarcophagus-400 text-xs mb-1">{collection.symbol}</div>
                        <div className="text-sarcophagus-300 text-xs">
                          Max Value: {ethers.formatEther(collection.maxValue)} VET
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Filter and Search */}
                <div className="mb-6">
                  <div className="flex flex-col sm:flex-row gap-3">
                    <div className="flex-1">
                      <input
                        type="text"
                        placeholder="Search NFTs by name or collection..."
                        value={nftSearchTerm}
                        onChange={(e) => setNftSearchTerm(e.target.value)}
                        className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                      />
                    </div>
                    <select 
                      value={selectedCollection}
                      onChange={(e) => setSelectedCollection(e.target.value)}
                      className="bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 focus:outline-none focus:border-accent-gold"
                    >
                      <option value="">All Collections</option>
                      {nftCollections?.map((collection, index) => (
                        <option key={index} value={collection.address}>{collection.name}</option>
                      ))}
                    </select>
                    <select 
                      value={selectedStatus}
                      onChange={(e) => setSelectedStatus(e.target.value)}
                      className="bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 focus:outline-none focus:border-accent-gold"
                    >
                      <option value="">All Status</option>
                      <option value="available">Available</option>
                      <option value="locked">Locked</option>
                    </select>
                  </div>
                </div>

                {/* User's NFTs */}
                <div className="mb-6">
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="text-md font-semibold text-sarcophagus-200">Your NFTs</h4>
                    <div className="flex gap-2">
                      <button
                        onClick={() => loadUserNFTs()}
                        disabled={nftLoading}
                        className="bg-sarcophagus-700 hover:bg-sarcophagus-600 text-sarcophagus-200 px-3 py-1 rounded text-sm transition-colors disabled:opacity-50"
                      >
                        {nftLoading ? 'Loading...' : 'Refresh'}
                      </button>
                      <button 
                        onClick={handleBatchLockNFTs}
                        disabled={loading}
                        className="bg-accent-gold hover:bg-yellow-400 text-sarcophagus-900 px-3 py-1 rounded text-sm font-medium transition-colors disabled:opacity-50"
                      >
                        {loading ? 'Locking...' : 'Lock Selected'}
                      </button>
                    </div>
                  </div>
                  
                  {nftLoading ? (
                    <div className="flex justify-center py-8">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-accent-gold"></div>
                    </div>
                  ) : userNFTs?.length === 0 ? (
                    <div className="text-center py-8 text-sarcophagus-400">
                      <div className="text-4xl mb-2">🎨</div>
                      <div>No NFTs found in your wallet</div>
                      <div className="text-sm">Make sure you have NFTs from whitelisted collections</div>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                      {userNFTs?.map((nft, index) => (
                        <div key={index} className={`bg-sarcophagus-800 rounded-lg p-4 border transition-all ${
                          nft.isLocked 
                            ? 'border-green-500/50 opacity-75' 
                            : 'border-sarcophagus-700 hover:border-accent-gold'
                        }`}>
                          {/* NFT Image */}
                          <div className="relative mb-3">
                            <img
                              src={nft.imageUrl || 'https://via.placeholder.com/200x200/6366f1/ffffff?text=NFT'}
                              alt={nft.name}
                              className="w-full h-32 object-cover rounded-lg"
                            />
                            {nft.isLocked && (
                              <div className="absolute top-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                                🔒 Locked
                              </div>
                            )}
                            <div className="absolute bottom-2 left-2 bg-sarcophagus-900/80 text-sarcophagus-100 text-xs px-2 py-1 rounded-full">
                              {nft.symbol}
                            </div>
                          </div>
                          
                          {/* NFT Info */}
                          <div className="mb-3">
                            <div className="text-sarcophagus-100 font-semibold text-sm mb-1 truncate">{nft.name}</div>
                            <div className="text-sarcophagus-400 text-xs mb-2">
                              ID: {nft.tokenId.toString()}
                            </div>
                            <div className="text-accent-gold text-sm font-medium">
                              ~{ethers.formatEther(nft.estimatedValue || BigInt(0))} VET
                            </div>
                          </div>
                          
                          {/* Status and Actions */}
                          {nft.isLocked ? (
                            <div className="space-y-2">
                              <div className="text-sarcophagus-400 text-xs">
                                Assigned to: {nft.assignedBeneficiary?.slice(0, 6)}...{nft.assignedBeneficiary?.slice(-4)}
                              </div>
                              <div className="flex gap-2">
                                <button
                                  onClick={() => unlockNFT(nft.contractAddress, nft.tokenId)}
                                  disabled={loading}
                                  className="flex-1 bg-red-600 hover:bg-red-500 text-white text-xs py-2 rounded transition-colors disabled:opacity-50"
                                >
                                  {loading ? 'Unlocking...' : 'Unlock'}
                                </button>
                                <button
                                  onClick={() => {/* TODO: Open beneficiary update modal */}}
                                  className="flex-1 bg-sarcophagus-700 hover:bg-sarcophagus-600 text-sarcophagus-200 text-xs py-2 rounded transition-colors"
                                >
                                  Update
                                </button>
                              </div>
                            </div>
                          ) : (
                            <div className="space-y-2">
                              <select 
                                value={nftBeneficiaries[`${nft.contractAddress}-${nft.tokenId}`] || ''}
                                onChange={(e) => setNftBeneficiaries(prev => ({
                                  ...prev,
                                  [`${nft.contractAddress}-${nft.tokenId}`]: e.target.value
                                }))}
                                className="w-full bg-sarcophagus-900 border border-sarcophagus-700 rounded px-2 py-1 text-sarcophagus-100 text-xs"
                              >
                                <option value="">Assign Beneficiary</option>
                                {vault?.beneficiaries.map((beneficiary, idx) => (
                                  <option key={idx} value={beneficiary.address}>
                                    {beneficiary.address.slice(0, 6)}...{beneficiary.address.slice(-4)} ({beneficiary.percentage}%)
                                  </option>
                                ))}
                              </select>
                              <input
                                type="number"
                                placeholder="VET Value"
                                value={nftValues[`${nft.contractAddress}-${nft.tokenId}`] || ''}
                                onChange={(e) => setNftValues(prev => ({
                                  ...prev,
                                  [`${nft.contractAddress}-${nft.tokenId}`]: e.target.value
                                }))}
                                className="w-full bg-sarcophagus-900 border border-sarcophagus-700 rounded px-2 py-1 text-sarcophagus-100 text-xs placeholder-sarcophagus-500"
                              />
                              <button
                                onClick={() => {
                                  const beneficiary = nftBeneficiaries[`${nft.contractAddress}-${nft.tokenId}`]
                                  const value = nftValues[`${nft.contractAddress}-${nft.tokenId}`]
                                  if (!beneficiary) {
                                    showNotification('Please select a beneficiary', 'warning')
                                    return
                                  }
                                  if (!value || parseFloat(value) <= 0) {
                                    showNotification('Please enter a valid VET value', 'warning')
                                    return
                                  }
                                  lockNFT(nft.contractAddress, nft.tokenId, ethers.parseEther(value), beneficiary)
                                }}
                                disabled={loading}
                                className="w-full bg-accent-gold hover:bg-yellow-400 text-sarcophagus-900 text-xs py-2 rounded font-medium transition-colors disabled:opacity-50"
                              >
                                {loading ? 'Locking...' : 'Lock NFT'}
                              </button>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Locked NFTs */}
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <h4 className="text-md font-semibold text-sarcophagus-200">Locked NFTs</h4>
                    <button
                      onClick={() => loadLockedNFTs()}
                      disabled={nftLoading}
                      className="bg-sarcophagus-700 hover:bg-sarcophagus-600 text-sarcophagus-200 px-3 py-1 rounded text-sm transition-colors disabled:opacity-50"
                    >
                      {nftLoading ? 'Loading...' : 'Refresh'}
                    </button>
                  </div>
                  
                  {lockedNFTs?.length === 0 ? (
                    <div className="text-center py-8 text-sarcophagus-400">
                      <div className="text-4xl mb-2">🔒</div>
                      <div>No NFTs are currently locked</div>
                      <div className="text-sm">Lock NFTs above to start earning OBOL rewards</div>
                    </div>
                  ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                      {lockedNFTs?.map((nft, index) => (
                        <div key={index} className="bg-sarcophagus-800/60 border border-green-500/50 rounded-lg p-4 opacity-75">
                          {/* NFT Image */}
                          <div className="relative mb-3">
                            <img
                              src={nft.imageUrl || 'https://via.placeholder.com/200x200/6366f1/ffffff?text=NFT'}
                              alt={nft.name}
                              className="w-full h-32 object-cover rounded-lg"
                            />
                            <div className="absolute top-2 right-2 bg-green-500 text-white text-xs px-2 py-1 rounded-full">
                              🔒 Locked
                            </div>
                            <div className="absolute bottom-2 left-2 bg-sarcophagus-900/80 text-sarcophagus-100 text-xs px-2 py-1 rounded-full">
                              {nft.symbol}
                            </div>
                          </div>
                          
                          {/* NFT Info */}
                          <div className="mb-3">
                            <div className="text-sarcophagus-100 font-semibold text-sm mb-1 truncate">{nft.name}</div>
                            <div className="text-sarcophagus-400 text-xs mb-2">
                              ID: {nft.tokenId.toString()}
                            </div>
                            <div className="text-accent-gold text-sm font-medium">
                              ~{ethers.formatEther(nft.estimatedValue)} VET
                            </div>
                            <div className="text-green-400 text-xs mt-1">
                              Locked {new Date(Number(nft.lockedAt) * 1000).toLocaleDateString()}
                            </div>
                          </div>
                          
                          {/* Beneficiary Info */}
                          <div className="text-sarcophagus-400 text-xs">
                            Assigned to: {nft.assignedBeneficiary.slice(0, 6)}...{nft.assignedBeneficiary.slice(-4)}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>

                {/* Info Panel */}
                <div className="mt-6 p-4 bg-sarcophagus-800/30 border border-sarcophagus-700 rounded-lg">
                  <h4 className="text-md font-semibold text-accent-gold mb-2">NFT Locking Information</h4>
                  <ul className="text-sarcophagus-400 text-sm space-y-1">
                    <li>• Only whitelisted NFT collections are supported</li>
                    <li>• Each NFT must be assigned to a specific beneficiary</li>
                    <li>• NFTs earn OBOL rewards based on their VET-equivalent value</li>
                    <li>• Maximum value per NFT is capped by collection</li>
                    <li>• Locked NFTs are transferred to beneficiaries upon inheritance</li>
                    <li>• You can unlock NFTs at any time before inheritance</li>
                  </ul>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'convert' && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-sarcophagus-100 mb-4">Convert Tokens</h3>
                <p className="text-sarcophagus-400 mb-4">
                  Convert tokens between different types in your vault.
                </p>
                <div className="space-y-4">
                  <div className="flex gap-2 items-end">
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                        From Token
                      </label>
                      <select
                        value={convertFromToken}
                        onChange={(e) => setConvertFromToken(e.target.value)}
                        className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 focus:outline-none focus:border-accent-gold"
                      >
                        <option value="">Select token</option>
                        {supportedTokens.map(token => (
                          <option key={token.address} value={token.address}>
                            {token.symbol} - {token.name}
                          </option>
                        ))}
                      </select>
                      {convertFromToken && (
                        <div className="text-xs text-sarcophagus-400 mt-1">
                          Balance: {ethers.formatEther(supportedTokens.find(t => t.address === convertFromToken)?.balance || 0)} | Price: {supportedTokens.find(t => t.address === convertFromToken)?.price ? ethers.formatEther(supportedTokens.find(t => t.address === convertFromToken)?.price || 0) : 'N/A'} VET
                        </div>
                      )}
                    </div>
                    <button
                      type="button"
                      onClick={handleSwapTokens}
                      className="bg-sarcophagus-700 hover:bg-sarcophagus-600 text-accent-gold rounded-full p-2 mb-6 mt-6 flex items-center justify-center"
                      title="Swap tokens"
                    >
                      <FaSyncAlt />
                    </button>
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                        To Token
                      </label>
                      <select
                        value={convertToToken}
                        onChange={(e) => setConvertToToken(e.target.value)}
                        className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 focus:outline-none focus:border-accent-gold"
                      >
                        <option value="">Select token</option>
                        {supportedTokens.map(token => (
                          <option key={token.address} value={token.address}>
                            {token.symbol} - {token.name}
                          </option>
                        ))}
                      </select>
                      {convertToToken && (
                        <div className="text-xs text-sarcophagus-400 mt-1">
                          Price: {supportedTokens.find(t => t.address === convertToToken)?.price ? ethers.formatEther(supportedTokens.find(t => t.address === convertToToken)?.price || 0) : 'N/A'} VET
                        </div>
                      )}
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                      Amount to Convert
                    </label>
                    <input
                      type="number"
                      value={convertFromAmount}
                      onChange={(e) => setConvertFromAmount(e.target.value)}
                      className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-sarcophagus-300 mb-2">
                      Minimum To Amount (optional)
                    </label>
                    <input
                      type="number"
                      value={convertMinToAmount}
                      onChange={(e) => setConvertMinToAmount(e.target.value)}
                      className="w-full bg-sarcophagus-800 border border-sarcophagus-600 rounded-lg px-4 py-2 text-sarcophagus-100 placeholder-sarcophagus-500 focus:outline-none focus:border-accent-gold"
                    />
                  </div>
                </div>
                {/* Conversion summary card */}
                {(convertFromToken && convertToToken && convertFromAmount) && (
                  <div className="my-4 p-4 bg-sarcophagus-800 border border-sarcophagus-700 rounded-lg flex flex-col gap-2">
                    <div className="flex items-center gap-2">
                      <span className="font-semibold text-sarcophagus-200">Summary:</span>
                      <span>{convertFromAmount} {supportedTokens.find(t => t.address === convertFromToken)?.symbol} → {conversionLoading ? '...' : conversionRate} {supportedTokens.find(t => t.address === convertToToken)?.symbol}</span>
                    </div>
                    {conversionLoading ? (
                      <div className="text-xs text-sarcophagus-400">Fetching rate...</div>
                    ) : conversionRate ? (
                      <div className="text-xs text-green-400">Estimated: {convertFromAmount} {supportedTokens.find(t => t.address === convertFromToken)?.symbol} ≈ {conversionRate} {supportedTokens.find(t => t.address === convertToToken)?.symbol}</div>
                    ) : (
                      <div className="text-xs text-red-400">Unable to fetch conversion rate.</div>
                    )}
                  </div>
                )}
                {convertError && <div className="text-red-500 text-sm mb-2">{convertError}</div>}
                {convertSuccess && <div className="text-green-500 text-sm mb-2">{convertSuccess}</div>}
                <button
                  onClick={handleConvertTokens}
                  disabled={conversionLoading || !convertFromToken || !convertToToken || !convertFromAmount}
                  className="w-full mt-6 bg-gradient-to-r from-accent-gold to-accent-bronze text-sarcophagus-950 py-3 rounded-lg font-semibold hover:opacity-90 transition-opacity disabled:opacity-50"
                >
                  {conversionLoading ? 'Converting...' : 'Convert Tokens'}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
} 