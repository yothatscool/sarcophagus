"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/thor-devkit";
exports.ids = ["vendor-chunks/thor-devkit"];
exports.modules = {

/***/ "(ssr)/./node_modules/thor-devkit/esm/abi.js":
/*!*********************************************!*\
  !*** ./node_modules/thor-devkit/esm/abi.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abi: () => (/* binding */ abi)\n/* harmony export */ });\n/* harmony import */ var _vechain_ethers_utils_abi_coder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vechain/ethers/utils/abi-coder */ \"(ssr)/./node_modules/@vechain/ethers/utils/abi-coder.js\");\n/* harmony import */ var _vechain_ethers_utils_abi_coder__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vechain_ethers_utils_abi_coder__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _keccak__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keccak */ \"(ssr)/./node_modules/thor-devkit/esm/keccak.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nclass Coder extends _vechain_ethers_utils_abi_coder__WEBPACK_IMPORTED_MODULE_0__.AbiCoder {\n    constructor() {\n        super((type, value) => {\n            if ((type.match(/^u?int/) && !Array.isArray(value) && typeof value !== 'object') ||\n                value._ethersType === 'BigNumber') {\n                return value.toString();\n            }\n            return value;\n        });\n    }\n    encode(types, values) {\n        try {\n            return super.encode(types, values);\n        }\n        catch (err) {\n            if (err.reason) {\n                throw new Error(err.reason);\n            }\n            throw err;\n        }\n    }\n    decode(types, data) {\n        try {\n            return super.decode(types, data);\n        }\n        catch (err) {\n            if (err.reason) {\n                throw new Error(err.reason);\n            }\n            throw err;\n        }\n    }\n}\nconst coder = new Coder();\nfunction formatSignature(fragment) {\n    try {\n        return (0,_vechain_ethers_utils_abi_coder__WEBPACK_IMPORTED_MODULE_0__.formatSignature)(fragment)\n            .replace(/\\(tuple\\(/g, '((')\n            .replace(/,tuple\\(/g, ',(');\n    }\n    catch (err) {\n        if (err.reason) {\n            throw new Error(err.reason);\n        }\n        throw err;\n    }\n}\n/** encode/decode parameters of contract function call, event log, according to ABI JSON */\nvar abi;\n(function (abi) {\n    /**\n     * encode single parameter\n     * @param type type of the parameter\n     * @param value value of the parameter\n     * @returns encoded value in hex string\n     */\n    function encodeParameter(type, value) {\n        return coder.encode([type], [value]);\n    }\n    abi.encodeParameter = encodeParameter;\n    /**\n     * decode single parameter\n     * @param type type of the parameter\n     * @param data encoded parameter in hex string\n     * @returns decoded value\n     */\n    function decodeParameter(type, data) {\n        return coder.decode([type], data)[0];\n    }\n    abi.decodeParameter = decodeParameter;\n    /**\n     * encode a group of parameters\n     * @param types type array\n     * @param values value array\n     * @returns encoded values in hex string\n     */\n    function encodeParameters(types, values) {\n        return coder.encode(types, values);\n    }\n    abi.encodeParameters = encodeParameters;\n    /**\n     * decode a group of parameters\n     * @param types type array\n     * @param data encoded values in hex string\n     * @returns decoded object\n     */\n    function decodeParameters(types, data) {\n        const result = coder.decode(types, data);\n        const decoded = {};\n        types.forEach((t, i) => {\n            decoded[i] = result[i];\n            if (t.name) {\n                decoded[t.name] = result[i];\n            }\n        });\n        return decoded;\n    }\n    abi.decodeParameters = decodeParameters;\n    /** for contract function */\n    class Function {\n        /**\n         * create a function object\n         * @param definition abi definition of the function\n         */\n        constructor(definition) {\n            this.definition = definition;\n            this.canonicalName = formatSignature(definition);\n            this.signature = '0x' + (0,_keccak__WEBPACK_IMPORTED_MODULE_2__.keccak256)(this.canonicalName).slice(0, 4).toString('hex');\n        }\n        /**\n         * encode input parameters into call data\n         * @param args arguments for the function\n         */\n        encode(...args) {\n            return this.signature + encodeParameters(this.definition.inputs, args).slice(2);\n        }\n        /**\n         * decode output data\n         * @param outputData output data to decode\n         */\n        decode(outputData) {\n            return decodeParameters(this.definition.outputs, outputData);\n        }\n    }\n    abi.Function = Function;\n    /** for contract event */\n    class Event {\n        /** for contract event */\n        constructor(definition) {\n            this.definition = definition;\n            this.canonicalName = formatSignature(definition);\n            this.signature = '0x' + (0,_keccak__WEBPACK_IMPORTED_MODULE_2__.keccak256)(this.canonicalName).toString('hex');\n        }\n        /**\n         * encode an object of indexed keys into topics.\n         * @param indexed an object contains indexed keys\n         */\n        encode(indexed) {\n            const topics = [];\n            if (!this.definition.anonymous) {\n                topics.push(this.signature);\n            }\n            for (const input of this.definition.inputs) {\n                if (!input.indexed) {\n                    continue;\n                }\n                const value = indexed[input.name];\n                if (value === undefined || value === null) {\n                    topics.push(null);\n                }\n                else {\n                    let topic;\n                    // https://docs.soliditylang.org/en/v0.8.11/abi-spec.html#encoding-of-indexed-event-parameters\n                    if (isValueType(input.type)) {\n                        topic = encodeParameter(input.type, value);\n                    }\n                    else {\n                        if (input.type === 'string') {\n                            topic = '0x' + (0,_keccak__WEBPACK_IMPORTED_MODULE_2__.keccak256)(value).toString('hex');\n                            // tslint:disable-next-line:max-line-length\n                        }\n                        else if (typeof value === 'string' && /^0x[0-9a-f]+$/i.test(value) && value.length % 2 === 0) {\n                            // value is encoded\n                            topic = '0x' + (0,_keccak__WEBPACK_IMPORTED_MODULE_2__.keccak256)(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(value.slice(2), 'hex')).toString('hex');\n                        }\n                        else {\n                            throw new Error(`event.encode: invalid ${input.type} value`);\n                        }\n                    }\n                    topics.push(topic);\n                }\n            }\n            return topics;\n        }\n        /**\n         * decode event log\n         * @param data data in event output\n         * @param topics topics in event\n         */\n        decode(data, topics) {\n            if (!this.definition.anonymous) {\n                topics = topics.slice(1);\n            }\n            if (this.definition.inputs.filter(t => t.indexed).length !== topics.length) {\n                throw new Error('invalid topics count');\n            }\n            const decodedNonIndexed = coder.decode(this.definition.inputs.filter(t => !t.indexed), data);\n            const decoded = {};\n            this.definition.inputs.forEach((t, i) => {\n                if (t.indexed) {\n                    const topic = topics.shift();\n                    decoded[i] = isValueType(t.type) ? decodeParameter(t.type, topic) : topic;\n                }\n                else {\n                    decoded[i] = decodedNonIndexed.shift();\n                }\n                if (t.name) {\n                    decoded[t.name] = decoded[i];\n                }\n            });\n            return decoded;\n        }\n    }\n    abi.Event = Event;\n    function isValueType(type) {\n        return (type === 'address' ||\n            type === 'bool' ||\n            /^(u?int)(\\d*)$/.test(type) ||\n            /^bytes(\\d+)$/.test(type));\n    }\n})(abi || (abi = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FiaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLGVBQWUsSUFBSSxnQkFBZ0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQy9GLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUUvQixNQUFNLEtBQU0sU0FBUSxRQUFRO0lBQ3hCO1FBQ0ksS0FBSyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUM7Z0JBQzVFLEtBQUssQ0FBQyxXQUFXLEtBQUssV0FBVyxFQUFFO2dCQUNuQyxPQUFPLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQTthQUMxQjtZQUNELE9BQU8sS0FBSyxDQUFBO1FBQ2hCLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUE2QyxFQUFFLE1BQWE7UUFDdEUsSUFBSTtZQUNBLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUE7U0FDckM7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNWLElBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDWixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUM5QjtZQUNELE1BQU0sR0FBRyxDQUFBO1NBQ1o7SUFDTCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQTZDLEVBQUUsSUFBWTtRQUNyRSxJQUFJO1lBQ0EsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENB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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/abi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/address.js":
/*!*************************************************!*\
  !*** ./node_modules/thor-devkit/esm/address.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   address: () => (/* binding */ address)\n/* harmony export */ });\n/* harmony import */ var _keccak__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keccak */ \"(ssr)/./node_modules/thor-devkit/esm/keccak.js\");\n\n/** address related utilities */\nvar address;\n(function (address) {\n    /**\n     * derive Address from public key, note that the public key is uncompressed\n     * @param pub the public key\n     */\n    function fromPublicKey(pub) {\n        return '0x' + (0,_keccak__WEBPACK_IMPORTED_MODULE_0__.keccak256)(pub.slice(1)).slice(12).toString('hex');\n    }\n    address.fromPublicKey = fromPublicKey;\n    /**\n     * to check if a value presents an address\n     * @param v the value to be checked\n     */\n    function test(v) {\n        return typeof v === 'string' && /^0x[0-9a-f]{40}$/i.test(v);\n    }\n    address.test = test;\n    /**\n     * encode the address to checksumed address that is compatible with eip-55\n     * @param address input address\n     */\n    function toChecksumed(addr) {\n        if (!test(addr)) {\n            throw new Error('invalid address');\n        }\n        addr = addr.slice(2).toLowerCase();\n        const hash = (0,_keccak__WEBPACK_IMPORTED_MODULE_0__.keccak256)(addr);\n        let checksumed = '0x';\n        for (let i = 0; i < addr.length; i++) {\n            // tslint:disable-next-line:no-bitwise\n            let byte = hash[i >> 1];\n            if (i % 2 === 0) {\n                // tslint:disable-next-line:no-bitwise\n                byte >>= 4;\n            }\n            if (byte % 16 >= 8) {\n                checksumed += addr[i].toUpperCase();\n            }\n            else {\n                checksumed += addr[i];\n            }\n        }\n        return checksumed;\n    }\n    address.toChecksumed = toChecksumed;\n})(address || (address = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hZGRyZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFFcEMsZ0NBQWdDO0FBQ2hDLE1BQU0sS0FBVyxPQUFPLENBNkN2QjtBQTdDRCxXQUFpQixPQUFPO0lBQ3BCOzs7T0FHRztJQUNILFNBQWdCLGFBQWEsQ0FBQyxHQUFXO1FBQ3JDLE9BQU8sSUFBSSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNuRSxDQUFDO0lBRmUscUJBQWEsZ0JBRTVCLENBQUE7SUFFRDs7O09BR0c7SUFDSCxTQUFnQixJQUFJLENBQUMsQ0FBTTtRQUN2QixPQUFPLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDL0QsQ0FBQztJQUZlLFlBQUksT0FFbkIsQ0FBQTtJQUVEOzs7T0FHRztJQUNILFNBQWdCLFlBQVksQ0FBQyxJQUFZO1FBQ3JDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDYixNQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUE7U0FDckM7UUFDRCxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtRQUNsQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7UUFFNUIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFBO1FBQ3JCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLHNDQUFzQztZQUN0QyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1lBQ3ZCLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ2Isc0NBQXNDO2dCQUN0QyxJQUFJLEtBQUssQ0FBQyxDQUFBO2FBQ2I7WUFFRCxJQUFJLElBQUksR0FBRyxFQUFFLElBQUksQ0FBQyxFQUFFO2dCQUNoQixVQUFVLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFBO2FBQ3RDO2lCQUFNO2dCQUNILFVBQVUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDeEI7U0FDSjtRQUNELE9BQU8sVUFBVSxDQUFBO0lBQ3JCLENBQUM7SUF2QmUsb0JBQVksZUF1QjNCLENBQUE7QUFDTCxDQUFDLEVBN0NnQixPQUFPLEtBQVAsT0FBTyxRQTZDdkIifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhvci1kZXZraXQvZXNtL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7QUFDckM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixrREFBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxHQUFHO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0RBQVM7QUFDOUI7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEI7QUFDM0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVyZWF2ZW1lbnQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvdGhvci1kZXZraXQvZXNtL2FkZHJlc3MuanM/ZWE5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWsyNTYgfSBmcm9tICcuL2tlY2Nhayc7XG4vKiogYWRkcmVzcyByZWxhdGVkIHV0aWxpdGllcyAqL1xuZXhwb3J0IHZhciBhZGRyZXNzO1xuKGZ1bmN0aW9uIChhZGRyZXNzKSB7XG4gICAgLyoqXG4gICAgICogZGVyaXZlIEFkZHJlc3MgZnJvbSBwdWJsaWMga2V5LCBub3RlIHRoYXQgdGhlIHB1YmxpYyBrZXkgaXMgdW5jb21wcmVzc2VkXG4gICAgICogQHBhcmFtIHB1YiB0aGUgcHVibGljIGtleVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QdWJsaWNLZXkocHViKSB7XG4gICAgICAgIHJldHVybiAnMHgnICsga2VjY2FrMjU2KHB1Yi5zbGljZSgxKSkuc2xpY2UoMTIpLnRvU3RyaW5nKCdoZXgnKTtcbiAgICB9XG4gICAgYWRkcmVzcy5mcm9tUHVibGljS2V5ID0gZnJvbVB1YmxpY0tleTtcbiAgICAvKipcbiAgICAgKiB0byBjaGVjayBpZiBhIHZhbHVlIHByZXNlbnRzIGFuIGFkZHJlc3NcbiAgICAgKiBAcGFyYW0gdiB0aGUgdmFsdWUgdG8gYmUgY2hlY2tlZFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRlc3Qodikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnICYmIC9eMHhbMC05YS1mXXs0MH0kL2kudGVzdCh2KTtcbiAgICB9XG4gICAgYWRkcmVzcy50ZXN0ID0gdGVzdDtcbiAgICAvKipcbiAgICAgKiBlbmNvZGUgdGhlIGFkZHJlc3MgdG8gY2hlY2tzdW1lZCBhZGRyZXNzIHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIGVpcC01NVxuICAgICAqIEBwYXJhbSBhZGRyZXNzIGlucHV0IGFkZHJlc3NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0NoZWNrc3VtZWQoYWRkcikge1xuICAgICAgICBpZiAoIXRlc3QoYWRkcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBhZGRyZXNzJyk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkciA9IGFkZHIuc2xpY2UoMikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgaGFzaCA9IGtlY2NhazI1NihhZGRyKTtcbiAgICAgICAgbGV0IGNoZWNrc3VtZWQgPSAnMHgnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFkZHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgICAgICAgICBsZXQgYnl0ZSA9IGhhc2hbaSA+PiAxXTtcbiAgICAgICAgICAgIGlmIChpICUgMiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1iaXR3aXNlXG4gICAgICAgICAgICAgICAgYnl0ZSA+Pj0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChieXRlICUgMTYgPj0gOCkge1xuICAgICAgICAgICAgICAgIGNoZWNrc3VtZWQgKz0gYWRkcltpXS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hlY2tzdW1lZCArPSBhZGRyW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVja3N1bWVkO1xuICAgIH1cbiAgICBhZGRyZXNzLnRvQ2hlY2tzdW1lZCA9IHRvQ2hlY2tzdW1lZDtcbn0pKGFkZHJlc3MgfHwgKGFkZHJlc3MgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWVdSa2NtVnpjeTVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5aFpHUnlaWE56TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTlCUVU4c1JVRkJSU3hUUVVGVExFVkJRVVVzVFVGQlRTeFZRVUZWTEVOQlFVRTdRVUZGY0VNc1owTkJRV2RETzBGQlEyaERMRTFCUVUwc1MwRkJWeXhQUVVGUExFTkJOa04yUWp0QlFUZERSQ3hYUVVGcFFpeFBRVUZQTzBsQlEzQkNPenM3VDBGSFJ6dEpRVU5JTEZOQlFXZENMR0ZCUVdFc1EwRkJReXhIUVVGWE8xRkJRM0pETEU5QlFVOHNTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVOdVJTeERRVUZETzBsQlJtVXNjVUpCUVdFc1owSkJSVFZDTEVOQlFVRTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeFRRVUZuUWl4SlFVRkpMRU5CUVVNc1EwRkJUVHRSUVVOMlFpeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRkZCUVZFc1NVRkJTU3h0UWtGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGREwwUXNRMEZCUXp0SlFVWmxMRmxCUVVrc1QwRkZia0lzUTBGQlFUdEpRVVZFT3pzN1QwRkhSenRKUVVOSUxGTkJRV2RDTEZsQlFWa3NRMEZCUXl4SlFVRlpPMUZCUTNKRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVN1dVRkRZaXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVUU3VTBGRGNrTTdVVUZEUkN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRVHRSUVVOc1F5eE5RVUZOTEVsQlFVa3NSMEZCUnl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3VVVGRk5VSXNTVUZCU1N4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGQk8xRkJRM0pDTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRMnhETEhORFFVRnpRenRaUVVOMFF5eEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEzWkNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdaMEpCUTJJc2MwTkJRWE5ETzJkQ1FVTjBReXhKUVVGSkxFdEJRVXNzUTBGQlF5eERRVUZCTzJGQlEySTdXVUZGUkN4SlFVRkpMRWxCUVVrc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTm9RaXhWUVVGVkxFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGQk8yRkJRM1JETzJsQ1FVRk5PMmRDUVVOSUxGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1lVRkRlRUk3VTBGRFNqdFJRVU5FTEU5QlFVOHNWVUZCVlN4RFFVRkJPMGxCUTNKQ0xFTkJRVU03U1VGMlFtVXNiMEpCUVZrc1pVRjFRak5DTEVOQlFVRTdRVUZEVEN4RFFVRkRMRVZCTjBOblFpeFBRVUZQTEV0QlFWQXNUMEZCVHl4UlFUWkRka0lpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/blake2b.js":
/*!*************************************************!*\
  !*** ./node_modules/thor-devkit/esm/blake2b.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blake2b256: () => (/* binding */ blake2b256)\n/* harmony export */ });\n/* harmony import */ var blakejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! blakejs */ \"(ssr)/./node_modules/blakejs/index.js\");\n/* harmony import */ var blakejs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(blakejs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * computes blake2b 256bit hash of given data\n * @param data one or more Buffer | string\n */\nfunction blake2b256(...data) {\n    const ctx = blakejs__WEBPACK_IMPORTED_MODULE_0___default().blake2bInit(32);\n    data.forEach(d => {\n        if (buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.isBuffer(d)) {\n            blakejs__WEBPACK_IMPORTED_MODULE_0___default().blake2bUpdate(ctx, d);\n        }\n        else {\n            blakejs__WEBPACK_IMPORTED_MODULE_0___default().blake2bUpdate(ctx, buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(d, 'utf8'));\n        }\n    });\n    return buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(blakejs__WEBPACK_IMPORTED_MODULE_0___default().blake2bFinal(ctx));\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxha2UyYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ibGFrZTJiLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLFNBQVMsQ0FBQTtBQUMzQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBRS9COzs7R0FHRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQUMsR0FBRyxJQUE0QjtJQUN0RCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDYixJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDcEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDOUI7YUFBTTtZQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUE7U0FDbkQ7SUFDTCxDQUFDLENBQUMsQ0FBQTtJQUNGLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDL0MsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhvci1kZXZraXQvZXNtL2JsYWtlMmIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEI7QUFDSTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsZ0JBQWdCLDBEQUFpQjtBQUNqQztBQUNBLFlBQVksMENBQU07QUFDbEIsWUFBWSw0REFBbUI7QUFDL0I7QUFDQTtBQUNBLFlBQVksNERBQW1CLE1BQU0sMENBQU07QUFDM0M7QUFDQSxLQUFLO0FBQ0wsV0FBVywwQ0FBTSxNQUFNLDJEQUFrQjtBQUN6QztBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmVhdmVtZW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Rob3ItZGV2a2l0L2VzbS9ibGFrZTJiLmpzPzVlNTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJsYWtlIGZyb20gJ2JsYWtlanMnO1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyJztcbi8qKlxuICogY29tcHV0ZXMgYmxha2UyYiAyNTZiaXQgaGFzaCBvZiBnaXZlbiBkYXRhXG4gKiBAcGFyYW0gZGF0YSBvbmUgb3IgbW9yZSBCdWZmZXIgfCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJsYWtlMmIyNTYoLi4uZGF0YSkge1xuICAgIGNvbnN0IGN0eCA9IGJsYWtlLmJsYWtlMmJJbml0KDMyKTtcbiAgICBkYXRhLmZvckVhY2goZCA9PiB7XG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIoZCkpIHtcbiAgICAgICAgICAgIGJsYWtlLmJsYWtlMmJVcGRhdGUoY3R4LCBkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGJsYWtlLmJsYWtlMmJVcGRhdGUoY3R4LCBCdWZmZXIuZnJvbShkLCAndXRmOCcpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBCdWZmZXIuZnJvbShibGFrZS5ibGFrZTJiRmluYWwoY3R4KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZbXhoYTJVeVlpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlpYkdGclpUSmlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVThzUzBGQlN5eE5RVUZOTEZOQlFWTXNRMEZCUVR0QlFVTXpRaXhQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNVVUZCVVN4RFFVRkJPMEZCUlM5Q096czdSMEZIUnp0QlFVTklMRTFCUVUwc1ZVRkJWU3hWUVVGVkxFTkJRVU1zUjBGQlJ5eEpRVUUwUWp0SlFVTjBSQ3hOUVVGTkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGQk8wbEJRMnBETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3VVVGRFlpeEpRVUZKTEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3V1VGRGNFSXNTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdVMEZET1VJN1lVRkJUVHRaUVVOSUxFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RlFVRkZMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVFN1UwRkRia1E3U1VGRFRDeERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTkdMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGREwwTXNRMEZCUXlKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/blake2b.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/certificate.js":
/*!*****************************************************!*\
  !*** ./node_modules/thor-devkit/esm/certificate.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Certificate: () => (/* binding */ Certificate)\n/* harmony export */ });\n/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/thor-devkit/esm/address.js\");\n/* harmony import */ var _blake2b__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blake2b */ \"(ssr)/./node_modules/thor-devkit/esm/blake2b.js\");\n/* harmony import */ var _secp256k1__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./secp256k1 */ \"(ssr)/./node_modules/thor-devkit/esm/secp256k1.js\");\n/* harmony import */ var fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-json-stable-stringify */ \"(ssr)/./node_modules/fast-json-stable-stringify/index.js\");\n/* harmony import */ var fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n\nvar Certificate;\n(function (Certificate) {\n    function safeToLowerCase(str) {\n        return typeof str === 'string' ? str.toLowerCase() : str;\n    }\n    /**\n     * deterministically encode cert into JSON\n     * @param cert cert object\n     */\n    function encode(cert) {\n        return fast_json_stable_stringify__WEBPACK_IMPORTED_MODULE_0___default()(Object.assign(Object.assign({}, cert), { signer: safeToLowerCase(cert.signer), signature: cert.signature ? safeToLowerCase(cert.signature) : cert.signature }));\n    }\n    Certificate.encode = encode;\n    /**\n     * verify the cert\n     * @param cert cert object with signature\n     */\n    function verify(cert) {\n        if (!cert.signature) {\n            throw new Error('signature missing');\n        }\n        const signature = cert.signature;\n        if (!/^0x[0-9a-f]+$/i.test(signature) || signature.length % 2 !== 0) {\n            throw new Error('invalid signature');\n        }\n        const encoded = encode(Object.assign(Object.assign({}, cert), { signature: undefined }));\n        const signingHash = (0,_blake2b__WEBPACK_IMPORTED_MODULE_2__.blake2b256)(encoded);\n        const pubKey = _secp256k1__WEBPACK_IMPORTED_MODULE_3__.secp256k1.recover(signingHash, buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(signature.slice(2), 'hex'));\n        if (_address__WEBPACK_IMPORTED_MODULE_4__.address.fromPublicKey(pubKey) !== safeToLowerCase(cert.signer)) {\n            throw new Error('signature does not match with signer');\n        }\n    }\n    Certificate.verify = verify;\n})(Certificate || (Certificate = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VydGlmaWNhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY2VydGlmaWNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQTtBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ3RDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDdkMsT0FBTyx1QkFBdUIsTUFBTSw0QkFBNEIsQ0FBQTtBQUNoRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBbUIvQixNQUFNLEtBQVcsV0FBVyxDQXNDM0I7QUF0Q0QsV0FBaUIsV0FBVztJQUN4QixTQUFTLGVBQWUsQ0FBQyxHQUFXO1FBQ2hDLE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQTtJQUM1RCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0gsU0FBZ0IsTUFBTSxDQUFDLElBQWlCO1FBQ3BDLE9BQU8sdUJBQXVCLGlDQUN2QixJQUFJLEtBQ1AsTUFBTSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ3BDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUNwRSxDQUFBO0lBQ2hCLENBQUM7SUFOZSxrQkFBTSxTQU1yQixDQUFBO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsTUFBTSxDQUFDLElBQWlCO1FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtTQUN2QztRQUNELE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDaEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDakUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQ3ZDO1FBRUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxpQ0FBTSxJQUFJLEtBQUUsU0FBUyxFQUFFLFNBQVMsSUFBRyxDQUFBO1FBQ3pELE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUV2QyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtRQUVyRixJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEtBQUssZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNoRSxNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUE7U0FDMUQ7SUFDTCxDQUFDO0lBakJlLGtCQUFNLFNBaUJyQixDQUFBO0FBQ0wsQ0FBQyxFQXRDZ0IsV0FBVyxLQUFYLFdBQVcsUUFzQzNCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhvci1kZXZraXQvZXNtL2NlcnRpZmljYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ0c7QUFDQztBQUN5QjtBQUNqQztBQUN6QjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUVBQXVCLCtCQUErQixXQUFXLG9IQUFvSDtBQUNwTTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELFdBQVcsc0JBQXNCO0FBQzlGLDRCQUE0QixvREFBVTtBQUN0Qyx1QkFBdUIsaURBQVMsc0JBQXNCLDBDQUFNO0FBQzVELFlBQVksNkNBQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQywyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy90aG9yLWRldmtpdC9lc20vY2VydGlmaWNhdGUuanM/Yzk0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRyZXNzIH0gZnJvbSAnLi9hZGRyZXNzJztcbmltcG9ydCB7IGJsYWtlMmIyNTYgfSBmcm9tICcuL2JsYWtlMmInO1xuaW1wb3J0IHsgc2VjcDI1NmsxIH0gZnJvbSAnLi9zZWNwMjU2azEnO1xuaW1wb3J0IGZhc3RKc29uU3RhYmxlU3RyaW5naWZ5IGZyb20gJ2Zhc3QtanNvbi1zdGFibGUtc3RyaW5naWZ5JztcbmltcG9ydCB7IEJ1ZmZlciB9IGZyb20gJ2J1ZmZlcic7XG5leHBvcnQgdmFyIENlcnRpZmljYXRlO1xuKGZ1bmN0aW9uIChDZXJ0aWZpY2F0ZSkge1xuICAgIGZ1bmN0aW9uIHNhZmVUb0xvd2VyQ2FzZShzdHIpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyLnRvTG93ZXJDYXNlKCkgOiBzdHI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGRldGVybWluaXN0aWNhbGx5IGVuY29kZSBjZXJ0IGludG8gSlNPTlxuICAgICAqIEBwYXJhbSBjZXJ0IGNlcnQgb2JqZWN0XG4gICAgICovXG4gICAgZnVuY3Rpb24gZW5jb2RlKGNlcnQpIHtcbiAgICAgICAgcmV0dXJuIGZhc3RKc29uU3RhYmxlU3RyaW5naWZ5KE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY2VydCksIHsgc2lnbmVyOiBzYWZlVG9Mb3dlckNhc2UoY2VydC5zaWduZXIpLCBzaWduYXR1cmU6IGNlcnQuc2lnbmF0dXJlID8gc2FmZVRvTG93ZXJDYXNlKGNlcnQuc2lnbmF0dXJlKSA6IGNlcnQuc2lnbmF0dXJlIH0pKTtcbiAgICB9XG4gICAgQ2VydGlmaWNhdGUuZW5jb2RlID0gZW5jb2RlO1xuICAgIC8qKlxuICAgICAqIHZlcmlmeSB0aGUgY2VydFxuICAgICAqIEBwYXJhbSBjZXJ0IGNlcnQgb2JqZWN0IHdpdGggc2lnbmF0dXJlXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmVyaWZ5KGNlcnQpIHtcbiAgICAgICAgaWYgKCFjZXJ0LnNpZ25hdHVyZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzaWduYXR1cmUgbWlzc2luZycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGNlcnQuc2lnbmF0dXJlO1xuICAgICAgICBpZiAoIS9eMHhbMC05YS1mXSskL2kudGVzdChzaWduYXR1cmUpIHx8IHNpZ25hdHVyZS5sZW5ndGggJSAyICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnbmF0dXJlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5jb2RlZCA9IGVuY29kZShPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGNlcnQpLCB7IHNpZ25hdHVyZTogdW5kZWZpbmVkIH0pKTtcbiAgICAgICAgY29uc3Qgc2lnbmluZ0hhc2ggPSBibGFrZTJiMjU2KGVuY29kZWQpO1xuICAgICAgICBjb25zdCBwdWJLZXkgPSBzZWNwMjU2azEucmVjb3ZlcihzaWduaW5nSGFzaCwgQnVmZmVyLmZyb20oc2lnbmF0dXJlLnNsaWNlKDIpLCAnaGV4JykpO1xuICAgICAgICBpZiAoYWRkcmVzcy5mcm9tUHVibGljS2V5KHB1YktleSkgIT09IHNhZmVUb0xvd2VyQ2FzZShjZXJ0LnNpZ25lcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIHdpdGggc2lnbmVyJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgQ2VydGlmaWNhdGUudmVyaWZ5ID0gdmVyaWZ5O1xufSkoQ2VydGlmaWNhdGUgfHwgKENlcnRpZmljYXRlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyVnlkR2xtYVdOaGRHVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12WTJWeWRHbG1hV05oZEdVdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4TlFVRk5MRmRCUVZjc1EwRkJRVHRCUVVOdVF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRTFCUVUwc1YwRkJWeXhEUVVGQk8wRkJRM1JETEU5QlFVOHNSVUZCUlN4VFFVRlRMRVZCUVVVc1RVRkJUU3hoUVVGaExFTkJRVUU3UVVGRGRrTXNUMEZCVHl4MVFrRkJkVUlzVFVGQlRTdzBRa0ZCTkVJc1EwRkJRVHRCUVVOb1JTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRTFCUVUwc1VVRkJVU3hEUVVGQk8wRkJiVUl2UWl4TlFVRk5MRXRCUVZjc1YwRkJWeXhEUVhORE0wSTdRVUYwUTBRc1YwRkJhVUlzVjBGQlZ6dEpRVU40UWl4VFFVRlRMR1ZCUVdVc1EwRkJReXhIUVVGWE8xRkJRMmhETEU5QlFVOHNUMEZCVHl4SFFVRkhMRXRCUVVzc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlFUdEpRVU0xUkN4RFFVRkRPMGxCUTBRN096dFBRVWRITzBsQlEwZ3NVMEZCWjBJc1RVRkJUU3hEUVVGRExFbEJRV2xDTzFGQlEzQkRMRTlCUVU4c2RVSkJRWFZDTEdsRFFVTjJRaXhKUVVGSkxFdEJRMUFzVFVGQlRTeEZRVUZGTEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRM0JETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVTndSU3hEUVVGQk8wbEJRMmhDTEVOQlFVTTdTVUZPWlN4clFrRkJUU3hUUVUxeVFpeERRVUZCTzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzVTBGQlowSXNUVUZCVFN4RFFVRkRMRWxCUVdsQ08xRkJRM0JETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8xbEJRMnBDTEUxQlFVMHNTVUZCU1N4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUVR0VFFVTjJRenRSUVVORUxFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVFN1VVRkRhRU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4VFFVRlRMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdXVUZEYWtVc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGQk8xTkJRM1pETzFGQlJVUXNUVUZCVFN4UFFVRlBMRWRCUVVjc1RVRkJUU3hwUTBGQlRTeEpRVUZKTEV0QlFVVXNVMEZCVXl4RlFVRkZMRk5CUVZNc1NVRkJSeXhEUVVGQk8xRkJRM3BFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdFJRVVYyUXl4TlFVRk5MRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVVZ5Uml4SlFVRkpMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zVFVGQlRTeERRVUZETEV0QlFVc3NaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdFpRVU5vUlN4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExITkRRVUZ6UXl4RFFVRkRMRU5CUVVFN1UwRkRNVVE3U1VGRFRDeERRVUZETzBsQmFrSmxMR3RDUVVGTkxGTkJhVUp5UWl4RFFVRkJPMEZCUTB3c1EwRkJReXhGUVhSRFowSXNWMEZCVnl4TFFVRllMRmRCUVZjc1VVRnpRek5DSW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/certificate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/keccak.js":
/*!************************************************!*\
  !*** ./node_modules/thor-devkit/esm/keccak.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keccak256: () => (/* binding */ keccak256)\n/* harmony export */ });\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha3 */ \"(ssr)/./node_modules/js-sha3/src/sha3.js\");\n/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * computes keccak256 hash of given data\n * @param data one or more Buffer | string\n */\nfunction keccak256(...data) {\n    const h = js_sha3__WEBPACK_IMPORTED_MODULE_0__.keccak_256.create();\n    data.forEach(d => {\n        if (buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.isBuffer(d)) {\n            h.update(d);\n        }\n        else {\n            h.update(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(d, 'utf8'));\n        }\n    });\n    return buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(h.digest());\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2VjY2FrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2tlY2Nhay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDL0I7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFHLElBQTRCO0lBQ3JELE1BQU0sQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2IsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3BCLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDZDthQUFNO1lBQ0gsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFBO1NBQ25DO0lBQ0wsQ0FBQyxDQUFDLENBQUE7SUFDRixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUE7QUFDbEMsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhvci1kZXZraXQvZXNtL2tlY2Nhay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFxQztBQUNMO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxjQUFjLCtDQUFVO0FBQ3hCO0FBQ0EsWUFBWSwwQ0FBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsMENBQU07QUFDM0I7QUFDQSxLQUFLO0FBQ0wsV0FBVywwQ0FBTTtBQUNqQjtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmVhdmVtZW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Rob3ItZGV2a2l0L2VzbS9rZWNjYWsuanM/YTJkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBrZWNjYWtfMjU2IH0gZnJvbSAnanMtc2hhMyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInO1xuLyoqXG4gKiBjb21wdXRlcyBrZWNjYWsyNTYgaGFzaCBvZiBnaXZlbiBkYXRhXG4gKiBAcGFyYW0gZGF0YSBvbmUgb3IgbW9yZSBCdWZmZXIgfCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGtlY2NhazI1NiguLi5kYXRhKSB7XG4gICAgY29uc3QgaCA9IGtlY2Nha18yNTYuY3JlYXRlKCk7XG4gICAgZGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGQpKSB7XG4gICAgICAgICAgICBoLnVwZGF0ZShkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGgudXBkYXRlKEJ1ZmZlci5mcm9tKGQsICd1dGY4JykpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGguZGlnZXN0KCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYTJWalkyRnJMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDJ0bFkyTmhheTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMRTFCUVUwc1UwRkJVeXhEUVVGQk8wRkJRM0JETEU5QlFVOHNSVUZCUlN4TlFVRk5MRVZCUVVVc1RVRkJUU3hSUVVGUkxFTkJRVUU3UVVGREwwSTdPenRIUVVkSE8wRkJRMGdzVFVGQlRTeFZRVUZWTEZOQlFWTXNRMEZCUXl4SFFVRkhMRWxCUVRSQ08wbEJRM0pFTEUxQlFVMHNRMEZCUXl4SFFVRkhMRlZCUVZVc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlFUdEpRVU0zUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzFGQlEySXNTVUZCU1N4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzFsQlEzQkNMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdVMEZEWkR0aFFVRk5PMWxCUTBnc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZCTzFOQlEyNURPMGxCUTB3c1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRFJpeFBRVUZQTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZEYkVNc1EwRkJReUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/keccak.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/rlp.js":
/*!*********************************************!*\
  !*** ./node_modules/thor-devkit/esm/rlp.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RLP: () => (/* binding */ RLP)\n/* harmony export */ });\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var rlp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rlp */ \"(ssr)/./node_modules/rlp/dist/index.js\");\n/* harmony import */ var rlp__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rlp__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nclass RLP {\n    constructor(profile) {\n        this.profile = profile;\n    }\n    /**\n     * encode data according to profile\n     * @param data the structured data to be encoded\n     */\n    encode(data) {\n        const packed = pack(data, this.profile, '');\n        return rlp__WEBPACK_IMPORTED_MODULE_1__.encode(packed);\n    }\n    /**\n     * decode buffer according to profile\n     * @param buf rlp encoded data\n     */\n    decode(buf) {\n        const packed = rlp__WEBPACK_IMPORTED_MODULE_1__.decode(buf);\n        return unpack(packed, this.profile, '');\n    }\n}\n(function (RLP) {\n    /** base class of scalar kind */\n    class ScalarKind {\n    }\n    RLP.ScalarKind = ScalarKind;\n    /** a buffer kind to keep buffer type */\n    class BufferKind extends ScalarKind {\n        data(data, ctx) {\n            assert(buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(data), ctx, 'expected buffer');\n            return { encode() { return data; } };\n        }\n        buffer(buf, ctx) {\n            return { decode() { return buf; } };\n        }\n    }\n    RLP.BufferKind = BufferKind;\n    /** a scalar kind to presents number */\n    class NumericKind extends ScalarKind {\n        /**\n         * create a numeric kind\n         * @param maxBytes up limit of data in bytes\n         */\n        constructor(maxBytes) {\n            super();\n            this.maxBytes = maxBytes;\n        }\n        data(data, ctx) {\n            assert(typeof data === 'string' || typeof data === 'number', ctx, 'expected string or number');\n            if (typeof data === 'string') {\n                const isHex = isHexString(data);\n                const isDec = isDecString(data);\n                assert(isHex || isDec, ctx, 'expected non-negative integer in hex or dec string');\n                if (isHex) {\n                    assert(data.length > 2, ctx, 'expected valid hex string');\n                }\n            }\n            else {\n                assert(Number.isSafeInteger(data) && data >= 0, ctx, 'expected non-negative safe integer');\n            }\n            const bn = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(data);\n            if (bn.isZero()) {\n                return {\n                    encode() {\n                        return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n                    }\n                };\n            }\n            let hex = bn.toString(16);\n            if (hex.length % 2 !== 0) {\n                hex = '0' + hex;\n            }\n            assert(this.maxBytes ? hex.length <= this.maxBytes * 2 : true, ctx, `expected number in ${this.maxBytes} bytes`);\n            return {\n                encode() {\n                    return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(hex, 'hex');\n                }\n            };\n        }\n        buffer(buf, ctx) {\n            assert(this.maxBytes ? buf.length <= this.maxBytes : true, ctx, `expected less than ${this.maxBytes} bytes`);\n            assert(buf.length === 0 || buf[0] !== 0, ctx, `expected canonical integer (no leading zero bytes)`);\n            return {\n                decode() {\n                    if (buf.length === 0) {\n                        return 0;\n                    }\n                    const bn = new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(buf.toString('hex'), 16);\n                    const num = bn.toNumber();\n                    return Number.isSafeInteger(num) ? num : '0x' + bn.toString(16);\n                }\n            };\n        }\n    }\n    RLP.NumericKind = NumericKind;\n    /** a scalar kind to present blob */\n    class BlobKind extends ScalarKind {\n        data(data, ctx) {\n            assert(isHexString(data), ctx, 'expected hex string');\n            assert(data.length % 2 === 0, ctx, 'expected even length hex');\n            return {\n                encode() {\n                    return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(data.slice(2), 'hex');\n                }\n            };\n        }\n        buffer(buf, ctx) {\n            return {\n                decode() {\n                    return '0x' + buf.toString('hex');\n                }\n            };\n        }\n    }\n    RLP.BlobKind = BlobKind;\n    /** fixed length blob */\n    class FixedBlobKind extends BlobKind {\n        constructor(bytes) {\n            super();\n            this.bytes = bytes;\n        }\n        data(data, ctx) {\n            const encoder = super.data(data, ctx);\n            assert(data.length === this.bytes * 2 + 2, ctx, `expected hex string presents ${this.bytes} bytes`);\n            return encoder;\n        }\n        buffer(buf, ctx) {\n            const decoder = super.buffer(buf, ctx);\n            assert(buf.length === this.bytes, ctx, `expected ${this.bytes} bytes`);\n            return decoder;\n        }\n    }\n    RLP.FixedBlobKind = FixedBlobKind;\n    /** fixed length blob allowing null */\n    class NullableFixedBlobKind extends FixedBlobKind {\n        data(data, ctx) {\n            if (!data) {\n                return {\n                    encode() {\n                        return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n                    }\n                };\n            }\n            return super.data(data, ctx);\n        }\n        buffer(buf, ctx) {\n            if (buf.length === 0) {\n                return { decode() { return null; } };\n            }\n            return super.buffer(buf, ctx);\n        }\n    }\n    RLP.NullableFixedBlobKind = NullableFixedBlobKind;\n    /** fixed length blob kind that will remove leading zero on encoding and pad zero on decoding */\n    class CompactFixedBlobKind extends FixedBlobKind {\n        data(data, ctx) {\n            const buf = super.data(data, ctx).encode();\n            return {\n                encode() {\n                    const nzIndex = buf.findIndex(v => v !== 0);\n                    if (nzIndex >= 0) {\n                        return buf.slice(nzIndex);\n                    }\n                    return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(0);\n                }\n            };\n        }\n        buffer(buf, ctx) {\n            assert(buf.length <= this.bytes, ctx, `expected less than ${this.bytes} bytes`);\n            assert(buf.length === 0 || buf[0] !== 0, ctx, `expected no leading zero bytes`);\n            const bytes = this.bytes;\n            return {\n                decode() {\n                    const zeros = '0'.repeat((bytes - buf.length) * 2);\n                    return '0x' + zeros + buf.toString('hex');\n                }\n            };\n        }\n    }\n    RLP.CompactFixedBlobKind = CompactFixedBlobKind;\n})(RLP || (RLP = {}));\nfunction pack(obj, profile, ctx) {\n    ctx = ctx ? ctx + '.' + profile.name : profile.name;\n    const kind = profile.kind;\n    if (kind instanceof RLP.ScalarKind) {\n        return kind.data(obj, ctx).encode();\n    }\n    if (Array.isArray(kind)) {\n        return kind.map(k => pack(obj[k.name], k, ctx));\n    }\n    assert(Array.isArray(obj), ctx, 'expected array');\n    const item = kind.item;\n    return obj.map((part, i) => pack(part, { name: '#' + i, kind: item }, ctx));\n}\nfunction unpack(packed, profile, ctx) {\n    ctx = ctx ? ctx + '.' + profile.name : profile.name;\n    const kind = profile.kind;\n    if (kind instanceof RLP.ScalarKind) {\n        assert(buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(packed), ctx, 'expected Buffer');\n        return kind.buffer(packed, ctx).decode();\n    }\n    if (Array.isArray(kind)) {\n        assert(Array.isArray(packed), ctx, 'expected array');\n        const parts = packed;\n        assert(parts.length === kind.length, ctx, `expected ${kind.length} items, but got ${parts.length}`);\n        return kind.reduce((o, p, i) => {\n            o[p.name] = unpack(parts[i], p, ctx);\n            return o;\n        }, {});\n    }\n    assert(Array.isArray(packed), ctx, 'expected array');\n    const item = kind.item;\n    return packed.map((part, i) => unpack(part, { name: '#' + i, kind: item }, ctx));\n}\nfunction assert(cond, ctx, msg) {\n    if (!cond) {\n        throw new RLPError(`${ctx}: ${msg}`);\n    }\n}\nfunction isHexString(str) {\n    return /^0x[0-9a-f]*$/i.test(str);\n}\nfunction isDecString(str) {\n    return /^\\d+$/.test(str);\n}\nclass RLPError extends Error {\n    constructor(msg) {\n        super(msg);\n        this.name = RLPError.name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/rlp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/secp256k1.js":
/*!***************************************************!*\
  !*** ./node_modules/thor-devkit/esm/secp256k1.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   secp256k1: () => (/* binding */ secp256k1)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nconst curve = new elliptic__WEBPACK_IMPORTED_MODULE_1__.ec('secp256k1');\nconst N = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 'hex');\nconst ZERO = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.alloc(32, 0);\nfunction isValidPrivateKey(key) {\n    return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(key) &&\n        key.length === 32 &&\n        !key.equals(ZERO) &&\n        key.compare(N) < 0;\n}\nfunction isValidMessageHash(hash) {\n    return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(hash) && hash.length === 32;\n}\n/** secp256k1 methods set */\nvar secp256k1;\n(function (secp256k1) {\n    /**\n     * generate private key\n     * @param rng the optional random number generator, which exactly generates 32 random bytes\n     */\n    function generatePrivateKey(rng) {\n        rng = rng !== null && rng !== void 0 ? rng : (() => (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(32));\n        for (;;) {\n            const privKey = rng();\n            if (isValidPrivateKey(privKey)) {\n                return privKey;\n            }\n        }\n    }\n    secp256k1.generatePrivateKey = generatePrivateKey;\n    /**\n     * derive public key(uncompressed) from private key\n     * @param privKey the private key\n     */\n    function derivePublicKey(privKey) {\n        if (!isValidPrivateKey(privKey)) {\n            throw new Error('invalid private key');\n        }\n        const keyPair = curve.keyFromPrivate(privKey);\n        return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(keyPair.getPublic().encode('array', false));\n    }\n    secp256k1.derivePublicKey = derivePublicKey;\n    /**\n     * sign a message using elliptic curve algorithm on the curve secp256k1\n     * @param msgHash hash of message\n     * @param privKey serialized private key\n     */\n    function sign(msgHash, privKey) {\n        if (!isValidMessageHash(msgHash)) {\n            throw new Error('invalid message hash');\n        }\n        if (!isValidPrivateKey(privKey)) {\n            throw new Error('invalid private key');\n        }\n        const keyPair = curve.keyFromPrivate(privKey);\n        const sig = keyPair.sign(msgHash, { canonical: true });\n        const r = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(sig.r.toArray('be', 32));\n        const s = buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(sig.s.toArray('be', 32));\n        return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.concat([r, s, buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from([sig.recoveryParam])]);\n    }\n    secp256k1.sign = sign;\n    /**\n     * recovery signature to public key\n     * @param msgHash hash of message\n     * @param sig signature\n     */\n    function recover(msgHash, sig) {\n        if (!isValidMessageHash(msgHash)) {\n            throw new Error('invalid message hash');\n        }\n        if (!buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.isBuffer(sig) || sig.length !== 65) {\n            throw new Error('invalid signature');\n        }\n        const recovery = sig[64];\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('invalid signature recovery');\n        }\n        const r = sig.slice(0, 32);\n        const s = sig.slice(32, 64);\n        return buffer__WEBPACK_IMPORTED_MODULE_2__.Buffer.from(curve.recoverPubKey(msgHash, { r, s }, recovery).encode('array', false));\n    }\n    secp256k1.recover = recover;\n})(secp256k1 || (secp256k1 = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcDI1NmsxLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlY3AyNTZrMS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFFL0IsTUFBTSxLQUFLLEdBQUcsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7QUFFakMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrRUFBa0UsRUFBRSxLQUFLLENBQUMsQ0FBQTtBQUNoRyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUVoQyxTQUFTLGlCQUFpQixDQUFDLEdBQVc7SUFDbEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUN2QixHQUFHLENBQUMsTUFBTSxLQUFLLEVBQUU7UUFDakIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNqQixHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtBQUMxQixDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxJQUFZO0lBQ3BDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEVBQUUsQ0FBQTtBQUN0RCxDQUFDO0FBRUQsNEJBQTRCO0FBQzVCLE1BQU0sS0FBVyxTQUFTLENBNEV6QjtBQTVFRCxXQUFpQixTQUFTO0lBQ3RCOzs7T0FHRztJQUNILFNBQWdCLGtCQUFrQixDQUFDLEdBQWtCO1FBQ2pELEdBQUcsR0FBRyxHQUFHLGFBQUgsR0FBRyxjQUFILEdBQUcsR0FBSSxDQUFDLEdBQUcsRUFB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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdGhvci1kZXZraXQvZXNtL3NlY3AyNTZrMS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXFDO0FBQ0Q7QUFDSjtBQUNoQyxrQkFBa0Isd0NBQUU7QUFDcEIsVUFBVSwwQ0FBTTtBQUNoQixhQUFhLDBDQUFNO0FBQ25CO0FBQ0EsV0FBVywwQ0FBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywwQ0FBTTtBQUNqQjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsbURBQVc7QUFDdkUsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSwwQ0FBTTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsaUJBQWlCO0FBQzdELGtCQUFrQiwwQ0FBTTtBQUN4QixrQkFBa0IsMENBQU07QUFDeEIsZUFBZSwwQ0FBTSxlQUFlLDBDQUFNO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDBDQUFNO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBDQUFNLHFDQUFxQyxNQUFNO0FBQ2hFO0FBQ0E7QUFDQSxDQUFDLDhCQUE4QjtBQUMvQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy90aG9yLWRldmtpdC9lc20vc2VjcDI1NmsxLmpzP2QyYmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmFuZG9tQnl0ZXMgfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgZWMgYXMgRUMgfSBmcm9tICdlbGxpcHRpYyc7XG5pbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXInO1xuY29uc3QgY3VydmUgPSBuZXcgRUMoJ3NlY3AyNTZrMScpO1xuY29uc3QgTiA9IEJ1ZmZlci5mcm9tKCdmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZWJhYWVkY2U2YWY0OGEwM2JiZmQyNWU4Y2QwMzY0MTQxJywgJ2hleCcpO1xuY29uc3QgWkVSTyA9IEJ1ZmZlci5hbGxvYygzMiwgMCk7XG5mdW5jdGlvbiBpc1ZhbGlkUHJpdmF0ZUtleShrZXkpIHtcbiAgICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGtleSkgJiZcbiAgICAgICAga2V5Lmxlbmd0aCA9PT0gMzIgJiZcbiAgICAgICAgIWtleS5lcXVhbHMoWkVSTykgJiZcbiAgICAgICAga2V5LmNvbXBhcmUoTikgPCAwO1xufVxuZnVuY3Rpb24gaXNWYWxpZE1lc3NhZ2VIYXNoKGhhc2gpIHtcbiAgICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGhhc2gpICYmIGhhc2gubGVuZ3RoID09PSAzMjtcbn1cbi8qKiBzZWNwMjU2azEgbWV0aG9kcyBzZXQgKi9cbmV4cG9ydCB2YXIgc2VjcDI1NmsxO1xuKGZ1bmN0aW9uIChzZWNwMjU2azEpIHtcbiAgICAvKipcbiAgICAgKiBnZW5lcmF0ZSBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSBybmcgdGhlIG9wdGlvbmFsIHJhbmRvbSBudW1iZXIgZ2VuZXJhdG9yLCB3aGljaCBleGFjdGx5IGdlbmVyYXRlcyAzMiByYW5kb20gYnl0ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZVByaXZhdGVLZXkocm5nKSB7XG4gICAgICAgIHJuZyA9IHJuZyAhPT0gbnVsbCAmJiBybmcgIT09IHZvaWQgMCA/IHJuZyA6ICgoKSA9PiByYW5kb21CeXRlcygzMikpO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBjb25zdCBwcml2S2V5ID0gcm5nKCk7XG4gICAgICAgICAgICBpZiAoaXNWYWxpZFByaXZhdGVLZXkocHJpdktleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJpdktleTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWNwMjU2azEuZ2VuZXJhdGVQcml2YXRlS2V5ID0gZ2VuZXJhdGVQcml2YXRlS2V5O1xuICAgIC8qKlxuICAgICAqIGRlcml2ZSBwdWJsaWMga2V5KHVuY29tcHJlc3NlZCkgZnJvbSBwcml2YXRlIGtleVxuICAgICAqIEBwYXJhbSBwcml2S2V5IHRoZSBwcml2YXRlIGtleVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGRlcml2ZVB1YmxpY0tleShwcml2S2V5KSB7XG4gICAgICAgIGlmICghaXNWYWxpZFByaXZhdGVLZXkocHJpdktleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwcml2YXRlIGtleScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleVBhaXIgPSBjdXJ2ZS5rZXlGcm9tUHJpdmF0ZShwcml2S2V5KTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGtleVBhaXIuZ2V0UHVibGljKCkuZW5jb2RlKCdhcnJheScsIGZhbHNlKSk7XG4gICAgfVxuICAgIHNlY3AyNTZrMS5kZXJpdmVQdWJsaWNLZXkgPSBkZXJpdmVQdWJsaWNLZXk7XG4gICAgLyoqXG4gICAgICogc2lnbiBhIG1lc3NhZ2UgdXNpbmcgZWxsaXB0aWMgY3VydmUgYWxnb3JpdGhtIG9uIHRoZSBjdXJ2ZSBzZWNwMjU2azFcbiAgICAgKiBAcGFyYW0gbXNnSGFzaCBoYXNoIG9mIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gcHJpdktleSBzZXJpYWxpemVkIHByaXZhdGUga2V5XG4gICAgICovXG4gICAgZnVuY3Rpb24gc2lnbihtc2dIYXNoLCBwcml2S2V5KSB7XG4gICAgICAgIGlmICghaXNWYWxpZE1lc3NhZ2VIYXNoKG1zZ0hhc2gpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbWVzc2FnZSBoYXNoJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1ZhbGlkUHJpdmF0ZUtleShwcml2S2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHByaXZhdGUga2V5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qga2V5UGFpciA9IGN1cnZlLmtleUZyb21Qcml2YXRlKHByaXZLZXkpO1xuICAgICAgICBjb25zdCBzaWcgPSBrZXlQYWlyLnNpZ24obXNnSGFzaCwgeyBjYW5vbmljYWw6IHRydWUgfSk7XG4gICAgICAgIGNvbnN0IHIgPSBCdWZmZXIuZnJvbShzaWcuci50b0FycmF5KCdiZScsIDMyKSk7XG4gICAgICAgIGNvbnN0IHMgPSBCdWZmZXIuZnJvbShzaWcucy50b0FycmF5KCdiZScsIDMyKSk7XG4gICAgICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtyLCBzLCBCdWZmZXIuZnJvbShbc2lnLnJlY292ZXJ5UGFyYW1dKV0pO1xuICAgIH1cbiAgICBzZWNwMjU2azEuc2lnbiA9IHNpZ247XG4gICAgLyoqXG4gICAgICogcmVjb3Zlcnkgc2lnbmF0dXJlIHRvIHB1YmxpYyBrZXlcbiAgICAgKiBAcGFyYW0gbXNnSGFzaCBoYXNoIG9mIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gc2lnIHNpZ25hdHVyZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlY292ZXIobXNnSGFzaCwgc2lnKSB7XG4gICAgICAgIGlmICghaXNWYWxpZE1lc3NhZ2VIYXNoKG1zZ0hhc2gpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgbWVzc2FnZSBoYXNoJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoc2lnKSB8fCBzaWcubGVuZ3RoICE9PSA2NSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNpZ25hdHVyZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlY292ZXJ5ID0gc2lnWzY0XTtcbiAgICAgICAgaWYgKHJlY292ZXJ5ICE9PSAwICYmIHJlY292ZXJ5ICE9PSAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc2lnbmF0dXJlIHJlY292ZXJ5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgciA9IHNpZy5zbGljZSgwLCAzMik7XG4gICAgICAgIGNvbnN0IHMgPSBzaWcuc2xpY2UoMzIsIDY0KTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGN1cnZlLnJlY292ZXJQdWJLZXkobXNnSGFzaCwgeyByLCBzIH0sIHJlY292ZXJ5KS5lbmNvZGUoJ2FycmF5JywgZmFsc2UpKTtcbiAgICB9XG4gICAgc2VjcDI1NmsxLnJlY292ZXIgPSByZWNvdmVyO1xufSkoc2VjcDI1NmsxIHx8IChzZWNwMjU2azEgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYzJWamNESTFObXN4TG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWlJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwzTmxZM0F5TlRack1TNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4UFFVRlBMRVZCUVVVc1YwRkJWeXhGUVVGRkxFMUJRVTBzVVVGQlVTeERRVUZCTzBGQlEzQkRMRTlCUVU4c1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeEZRVUZGTEUxQlFVMHNWVUZCVlN4RFFVRkJPMEZCUTI1RExFOUJRVThzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4UlFVRlJMRU5CUVVFN1FVRkZMMElzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RlFVRkZMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVUU3UVVGRmFrTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eHJSVUZCYTBVc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdEJRVU5vUnl4TlFVRk5MRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVWb1F5eFRRVUZUTEdsQ1FVRnBRaXhEUVVGRExFZEJRVmM3U1VGRGJFTXNUMEZCVHl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF6dFJRVU4yUWl4SFFVRkhMRU5CUVVNc1RVRkJUU3hMUVVGTExFVkJRVVU3VVVGRGFrSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF6dFJRVU5xUWl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0QlFVTXhRaXhEUVVGRE8wRkJSVVFzVTBGQlV5eHJRa0ZCYTBJc1EwRkJReXhKUVVGWk8wbEJRM0JETEU5QlFVOHNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4TFFVRkxMRVZCUVVVc1EwRkJRVHRCUVVOMFJDeERRVUZETzBGQlJVUXNORUpCUVRSQ08wRkJRelZDTEUxQlFVMHNTMEZCVnl4VFFVRlRMRU5CTkVWNlFqdEJRVFZGUkN4WFFVRnBRaXhUUVVGVE8wbEJRM1JDT3pzN1QwRkhSenRKUVVOSUxGTkJRV2RDTEd0Q1FVRnJRaXhEUVVGRExFZEJRV3RDTzFGQlEycEVMRWRCUVVjc1IwRkJSeXhIUVVGSExHRkJRVWdzUjBGQlJ5eGpRVUZJTEVkQlFVY3NSMEZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTNCRExGTkJRVlU3V1VGRFRpeE5RVUZOTEU5QlFVOHNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJRVHRaUVVOeVFpeEpRVUZKTEdsQ1FVRnBRaXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzJkQ1FVTTFRaXhQUVVGUExFOUJRVThzUTBGQlFUdGhRVU5xUWp0VFFVTktPMGxCUTB3c1EwRkJRenRKUVZKbExEUkNRVUZyUWl4eFFrRlJha01zUTBGQlFUdEpRVVZFT3pzN1QwRkhSenRKUVVOSUxGTkJRV2RDTEdWQlFXVXNRMEZCUXl4UFFVRmxPMUZCUXpORExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdFpRVU0zUWl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVFN1UwRkRla003VVVGRFJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzFGQlF6ZERMRTlCUVU4c1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFWRXNRMEZCUXl4RFFVRkJPMGxCUTNwRkxFTkJRVU03U1VGT1pTeDVRa0ZCWlN4clFrRk5PVUlzUTBGQlFUdEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeFRRVUZuUWl4SlFVRkpMRU5CUVVNc1QwRkJaU3hGUVVGRkxFOUJRV1U3VVVGRGFrUXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMWxCUXpsQ0xFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUTBGQlFUdFRRVU14UXp0UlFVVkVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRaUVVNM1FpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVOQlFVRTdVMEZEZWtNN1VVRkZSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8xRkJRemRETEUxQlFVMHNSMEZCUnl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVXNVMEZCVXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVUU3VVVGRmRFUXNUVUZCVFN4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVTTVReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJSVGxETEU5QlFVOHNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOdVJTeERRVUZETzBsQmFFSmxMR05CUVVrc1QwRm5RbTVDTEVOQlFVRTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NVMEZCWjBJc1QwRkJUeXhEUVVGRExFOUJRV1VzUlVGQlJTeEhRVUZYTzFGQlEyaEVMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHRaUVVNNVFpeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVRTdVMEZETVVNN1VVRkRSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zVFVGQlRTeExRVUZMTEVWQlFVVXNSVUZCUlR0WlFVTTFReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3VTBGRGRrTTdVVUZEUkN4TlFVRk5MRkZCUVZFc1IwRkJSeXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVRTdVVUZEZUVJc1NVRkJTU3hSUVVGUkxFdEJRVXNzUTBGQlF5eEpRVUZKTEZGQlFWRXNTMEZCU3l4RFFVRkRMRVZCUVVVN1dVRkRiRU1zVFVGQlRTeEpRVUZKTEV0QlFVc3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eERRVUZCTzFOQlEyaEVPMUZCUlVRc1RVRkJUU3hEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVUU3VVVGRE1VSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVFN1VVRkZNMElzVDBGQlR5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhoUVVGaExFTkJRMnhETEU5QlFVOHNSVUZEVUN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGRFVpeFJRVUZSTEVOQlExZ3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZETjBJc1EwRkJRenRKUVhCQ1pTeHBRa0ZCVHl4VlFXOUNkRUlzUTBGQlFUdEJRVU5NTEVOQlFVTXNSVUUxUldkQ0xGTkJRVk1zUzBGQlZDeFRRVUZUTEZGQk5FVjZRaUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/secp256k1.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/thor-devkit/esm/transaction.js":
/*!*****************************************************!*\
  !*** ./node_modules/thor-devkit/esm/transaction.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Transaction: () => (/* binding */ Transaction)\n/* harmony export */ });\n/* harmony import */ var _address__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/thor-devkit/esm/address.js\");\n/* harmony import */ var _blake2b__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./blake2b */ \"(ssr)/./node_modules/thor-devkit/esm/blake2b.js\");\n/* harmony import */ var _rlp__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rlp */ \"(ssr)/./node_modules/thor-devkit/esm/rlp.js\");\n/* harmony import */ var _secp256k1__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./secp256k1 */ \"(ssr)/./node_modules/thor-devkit/esm/secp256k1.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(buffer__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n\n\n/** Transaction class defines VeChainThor's multi-clause transaction */\nclass Transaction {\n    /**\n     * construct a transaction object with given body\n     * @param body body of tx\n     */\n    constructor(body) {\n        this.body = Object.assign({}, body);\n    }\n    /** decode from Buffer to transaction\n     * @param raw encoded buffer\n     * @param unsigned to indicator if the encoded buffer contains signature\n     */\n    static decode(raw, unsigned) {\n        let type;\n        if (raw.length > 0 && raw[0] > 0x7f) {\n            type = Transaction.Type.Legacy;\n        }\n        else {\n            if (raw.length === 0) {\n                throw new Error('typed transaction too short');\n            }\n            if (raw[0] === Transaction.Type.DynamicFee) {\n                type = Transaction.Type.DynamicFee;\n                // remove type identifier for subsequent decoding\n                raw = raw.slice(1);\n            }\n            else {\n                throw new Error('transaction type not supported: ' + raw[0]);\n            }\n        }\n        let body;\n        let signature;\n        if (unsigned) {\n            body = type === Transaction.Type.DynamicFee ?\n                unsignedDynamicFeeTxRLP.decode(raw) :\n                unsignedLegacyTxRLP.decode(raw);\n            body.type = type;\n        }\n        else {\n            const decoded = type === Transaction.Type.DynamicFee ?\n                dynamicFeeTxRLP.decode(raw) :\n                legacyTxRLP.decode(raw);\n            signature = decoded.signature;\n            delete decoded.signature;\n            body = decoded;\n            body.type = type;\n        }\n        const reserved = body.reserved;\n        if (reserved.length > 0) {\n            if (reserved[reserved.length - 1].length === 0) {\n                throw new Error('invalid reserved fields: not trimmed');\n            }\n            const features = featuresKind.buffer(reserved[0], 'reserved.features').decode();\n            body.reserved = {\n                features\n            };\n            if (reserved.length > 1) {\n                body.reserved.unused = reserved.slice(1);\n            }\n        }\n        else {\n            delete body.reserved;\n        }\n        const tx = new Transaction(body);\n        if (signature) {\n            tx.signature = signature;\n        }\n        return tx;\n    }\n    /**\n     * returns transaction ID\n     * null returned if something wrong (e.g. invalid signature)\n     */\n    get id() {\n        if (!this._signatureValid) {\n            return null;\n        }\n        try {\n            const signingHash = this.signingHash();\n            const pubKey = _secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.recover(signingHash, this.signature.slice(0, 65));\n            const origin = _address__WEBPACK_IMPORTED_MODULE_2__.address.fromPublicKey(pubKey);\n            return '0x' + (0,_blake2b__WEBPACK_IMPORTED_MODULE_3__.blake2b256)(signingHash, buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(origin.slice(2), 'hex')).toString('hex');\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /** returns transaction type, type legacy will return if type is not set */\n    get type() {\n        if (this.body.hasOwnProperty('type') && this.body.type !== undefined) {\n            return this.body.type;\n        }\n        return Transaction.Type.Legacy;\n    }\n    /**\n     * compute signing hashes.\n     * It returns tx hash for origin or delegator depends on param `delegateFor`.\n     * @param delegateFor address of intended tx origin. If set, the returned hash is for delegator to sign.\n     */\n    signingHash(delegateFor) {\n        this.checkType();\n        const reserved = this._encodeReserved();\n        let buf;\n        if (this.type === Transaction.Type.DynamicFee) {\n            const raw = unsignedDynamicFeeTxRLP.encode(Object.assign(Object.assign({}, this.body), { reserved }));\n            buf = buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([Transaction.Type.DynamicFee]), raw]);\n        }\n        else {\n            buf = unsignedLegacyTxRLP.encode(Object.assign(Object.assign({}, this.body), { reserved }));\n        }\n        const hash = (0,_blake2b__WEBPACK_IMPORTED_MODULE_3__.blake2b256)(buf);\n        if (delegateFor) {\n            if (!/^0x[0-9a-f]{40}$/i.test(delegateFor)) {\n                throw new Error('delegateFor expected address');\n            }\n            return (0,_blake2b__WEBPACK_IMPORTED_MODULE_3__.blake2b256)(hash, buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(delegateFor.slice(2), 'hex'));\n        }\n        return hash;\n    }\n    /** returns tx origin. null returned if no signature or not incorrectly signed */\n    get origin() {\n        if (!this._signatureValid) {\n            return null;\n        }\n        try {\n            const signingHash = this.signingHash();\n            const pubKey = _secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.recover(signingHash, this.signature.slice(0, 65));\n            return _address__WEBPACK_IMPORTED_MODULE_2__.address.fromPublicKey(pubKey);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /** returns tx delegator. null returned if no signature or not incorrectly signed */\n    get delegator() {\n        if (!this.delegated) {\n            return null;\n        }\n        if (!this._signatureValid) {\n            return null;\n        }\n        const origin = this.origin;\n        if (!origin) {\n            return null;\n        }\n        try {\n            const signingHash = this.signingHash(origin);\n            const pubKey = _secp256k1__WEBPACK_IMPORTED_MODULE_1__.secp256k1.recover(signingHash, this.signature.slice(65));\n            return _address__WEBPACK_IMPORTED_MODULE_2__.address.fromPublicKey(pubKey);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    /** returns whether delegated. see https://github.com/vechain/VIPs/blob/master/vips/VIP-191.md */\n    get delegated() {\n        var _a, _b;\n        // tslint:disable-next-line:no-bitwise\n        return (((_b = ((_a = this.body.reserved) !== null && _a !== void 0 ? _a : {}).features) !== null && _b !== void 0 ? _b : 0) & Transaction.DELEGATED_MASK) === Transaction.DELEGATED_MASK;\n    }\n    /** returns intrinsic gas it takes */\n    get intrinsicGas() {\n        return Transaction.intrinsicGas(this.body.clauses);\n    }\n    /** encode into Buffer */\n    encode() {\n        this.checkType();\n        const reserved = this._encodeReserved();\n        if (this.type === Transaction.Type.DynamicFee) {\n            const raw = this.signature ?\n                dynamicFeeTxRLP.encode(Object.assign(Object.assign({}, this.body), { reserved, signature: this.signature })) :\n                unsignedDynamicFeeTxRLP.encode(Object.assign(Object.assign({}, this.body), { reserved }));\n            return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([Transaction.Type.DynamicFee]), raw]);\n        }\n        return this.signature ?\n            legacyTxRLP.encode(Object.assign(Object.assign({}, this.body), { reserved, signature: this.signature })) :\n            unsignedLegacyTxRLP.encode(Object.assign(Object.assign({}, this.body), { reserved }));\n    }\n    _encodeReserved() {\n        var _a, _b, _c;\n        const reserved = (_a = this.body.reserved) !== null && _a !== void 0 ? _a : {};\n        const list = [featuresKind.data((_b = reserved.features) !== null && _b !== void 0 ? _b : 0, 'reserved.features').encode(),\n            ...((_c = reserved.unused) !== null && _c !== void 0 ? _c : [])];\n        // trim\n        while (list.length > 0) {\n            if (list[list.length - 1].length === 0) {\n                list.pop();\n            }\n            else {\n                break;\n            }\n        }\n        return list;\n    }\n    get _signatureValid() {\n        const expectedSigLen = this.delegated ? 65 * 2 : 65;\n        return this.signature ? this.signature.length === expectedSigLen : false;\n    }\n    checkType() {\n        // allow type to be undefined to be compatible with older spec\n        if (this.body.hasOwnProperty('type') && this.body.type !== undefined &&\n            this.body.type !== Transaction.Type.Legacy && this.body.type !== Transaction.Type.DynamicFee) {\n            throw new Error('unsupported transaction type: ' + this.body.type);\n        }\n    }\n}\nTransaction.DELEGATED_MASK = 1;\n(function (Transaction) {\n    let Type;\n    (function (Type) {\n        Type[Type[\"Legacy\"] = 0] = \"Legacy\";\n        Type[Type[\"DynamicFee\"] = 81] = \"DynamicFee\";\n    })(Type = Transaction.Type || (Transaction.Type = {}));\n    /**\n     * calculates intrinsic gas that a tx costs with the given clauses.\n     * @param clauses\n     */\n    function intrinsicGas(clauses) {\n        const txGas = 5000;\n        const clauseGas = 16000;\n        const clauseGasContractCreation = 48000;\n        if (clauses.length === 0) {\n            return txGas + clauseGas;\n        }\n        return clauses.reduce((sum, c) => {\n            if (c.to) {\n                sum += clauseGas;\n            }\n            else {\n                sum += clauseGasContractCreation;\n            }\n            sum += dataGas(c.data);\n            return sum;\n        }, txGas);\n    }\n    Transaction.intrinsicGas = intrinsicGas;\n    function dataGas(data) {\n        const zgas = 4;\n        const nzgas = 68;\n        let sum = 0;\n        for (let i = 2; i < data.length; i += 2) {\n            if (data.substring(i, i + 2) === '00') {\n                sum += zgas;\n            }\n            else {\n                sum += nzgas;\n            }\n        }\n        return sum;\n    }\n})(Transaction || (Transaction = {}));\nconst unsignedLegacyTxRLP = new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP({\n    name: 'unsigned legacy tx',\n    kind: [\n        { name: 'chainTag', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(1) },\n        { name: 'blockRef', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.CompactFixedBlobKind(8) },\n        { name: 'expiration', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(4) },\n        {\n            name: 'clauses', kind: {\n                item: [\n                    { name: 'to', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NullableFixedBlobKind(20) },\n                    { name: 'value', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(32) },\n                    { name: 'data', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.BlobKind() },\n                ],\n            },\n        },\n        { name: 'gasPriceCoef', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(1) },\n        { name: 'gas', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(8) },\n        { name: 'dependsOn', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NullableFixedBlobKind(32) },\n        { name: 'nonce', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(8) },\n        { name: 'reserved', kind: { item: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.BufferKind() } },\n    ],\n});\nconst legacyTxRLP = new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP({\n    name: 'legacy tx',\n    kind: [...unsignedLegacyTxRLP.profile.kind, { name: 'signature', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.BufferKind() }],\n});\nconst unsignedDynamicFeeTxRLP = new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP({\n    name: 'unsigned dynamic fee tx',\n    kind: [\n        { name: 'chainTag', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(1) },\n        { name: 'blockRef', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.CompactFixedBlobKind(8) },\n        { name: 'expiration', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(4) },\n        {\n            name: 'clauses', kind: {\n                item: [\n                    { name: 'to', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NullableFixedBlobKind(20) },\n                    { name: 'value', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(32) },\n                    { name: 'data', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.BlobKind() },\n                ],\n            },\n        },\n        { name: 'maxPriorityFeePerGas', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(32) },\n        { name: 'maxFeePerGas', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(32) },\n        { name: 'gas', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(8) },\n        { name: 'dependsOn', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NullableFixedBlobKind(32) },\n        { name: 'nonce', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(8) },\n        { name: 'reserved', kind: { item: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.BufferKind() } },\n    ],\n});\nconst dynamicFeeTxRLP = new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP({\n    name: 'dynamic fee tx',\n    // tslint:disable-next-line:max-line-length\n    kind: [...unsignedDynamicFeeTxRLP.profile.kind, { name: 'signature', kind: new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.BufferKind() }],\n});\nconst featuresKind = new _rlp__WEBPACK_IMPORTED_MODULE_4__.RLP.NumericKind(4);\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/thor-devkit/esm/transaction.js\n");

/***/ })

};
;