/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vechain";
exports.ids = ["vendor-chunks/@vechain"];
exports.modules = {

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/bloom.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/bloom.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newFilter: () => (/* binding */ newFilter)\n/* harmony export */ });\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/blake2b.js\");\n\nfunction newFilter(bits, k) {\n    const nBits = bits.length * 8;\n    return {\n        contains(key) {\n            let hash = (0,thor_devkit__WEBPACK_IMPORTED_MODULE_0__.blake2b256)(key).readUInt32BE(0);\n            const delta = (hash >>> 17) | (hash << 15 >>> 0);\n            for (let i = 0; i < k; i++) {\n                const bitPos = hash % nBits;\n                const index = bitPos >>> 3;\n                const bit = 1 << (bitPos % 8);\n                if (!(bits[index] & bit)) {\n                    return false;\n                }\n                hash = (hash + delta) >>> 0;\n            }\n            return true;\n        }\n    };\n}\n// // test vector\n// const bits = Buffer.from('63b2a4758c74e246c818e080b870437f5327a15cf81172512d98e61c54361a851ba8f108420e6b2b74a4196fb8e7bfe2b96c985e49abddb21c0600063997c93edb7c54921551600bcfc80fb62bfcd045c030b328eb8b5498e06dce610d22e901201226226441b8da094141526e0e58f5baf53064d63d598a4024bf68e0', 'hex')\n// const f = newFilter(bits, 6)\n// for (let i = 0; i < 100; i++) {\n//     if (!f.contains(Buffer.from(i + ''))) {\n//         throw new Error('should return true')\n//     }\n// }\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvb20uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmxvb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUV4QyxNQUFNLFVBQVUsU0FBUyxDQUFDLElBQVksRUFBRSxDQUFTO0lBQzdDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO0lBQzdCLE9BQU87UUFDSCxRQUFRLENBQUMsR0FBVztZQUNoQixJQUFJLElBQUksR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzFDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUNoRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QixNQUFNLE1BQU0sR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFBO2dCQUMzQixNQUFNLEtBQUssR0FBRyxNQUFNLEtBQUssQ0FBQyxDQUFBO2dCQUMxQixNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7Z0JBQzdCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRTtvQkFDdEIsT0FBTyxLQUFLLENBQUE7aUJBQ2Y7Z0JBQ0QsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUM5QjtZQUNELE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDO0FBQ0QsaUJBQWlCO0FBQ2pCLGdTQUFnUztBQUNoUywrQkFBK0I7QUFDL0Isa0NBQWtDO0FBQ2xDLDhDQUE4QztBQUM5QyxnREFBZ0Q7QUFDaEQsUUFBUTtBQUNSLElBQUkifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWRyaXZlci9lc20vYmxvb20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBeUM7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdURBQVU7QUFDakM7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmVhdmVtZW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B2ZWNoYWluL2Nvbm5leC1kcml2ZXIvZXNtL2Jsb29tLmpzPzZlZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmxha2UyYjI1NiB9IGZyb20gXCJ0aG9yLWRldmtpdFwiO1xuZXhwb3J0IGZ1bmN0aW9uIG5ld0ZpbHRlcihiaXRzLCBrKSB7XG4gICAgY29uc3QgbkJpdHMgPSBiaXRzLmxlbmd0aCAqIDg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY29udGFpbnMoa2V5KSB7XG4gICAgICAgICAgICBsZXQgaGFzaCA9IGJsYWtlMmIyNTYoa2V5KS5yZWFkVUludDMyQkUoMCk7XG4gICAgICAgICAgICBjb25zdCBkZWx0YSA9IChoYXNoID4+PiAxNykgfCAoaGFzaCA8PCAxNSA+Pj4gMCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpdFBvcyA9IGhhc2ggJSBuQml0cztcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGJpdFBvcyA+Pj4gMztcbiAgICAgICAgICAgICAgICBjb25zdCBiaXQgPSAxIDw8IChiaXRQb3MgJSA4KTtcbiAgICAgICAgICAgICAgICBpZiAoIShiaXRzW2luZGV4XSAmIGJpdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYXNoID0gKGhhc2ggKyBkZWx0YSkgPj4+IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vLyAvLyB0ZXN0IHZlY3RvclxuLy8gY29uc3QgYml0cyA9IEJ1ZmZlci5mcm9tKCc2M2IyYTQ3NThjNzRlMjQ2YzgxOGUwODBiODcwNDM3ZjUzMjdhMTVjZjgxMTcyNTEyZDk4ZTYxYzU0MzYxYTg1MWJhOGYxMDg0MjBlNmIyYjc0YTQxOTZmYjhlN2JmZTJiOTZjOTg1ZTQ5YWJkZGIyMWMwNjAwMDYzOTk3YzkzZWRiN2M1NDkyMTU1MTYwMGJjZmM4MGZiNjJiZmNkMDQ1YzAzMGIzMjhlYjhiNTQ5OGUwNmRjZTYxMGQyMmU5MDEyMDEyMjYyMjY0NDFiOGRhMDk0MTQxNTI2ZTBlNThmNWJhZjUzMDY0ZDYzZDU5OGE0MDI0YmY2OGUwJywgJ2hleCcpXG4vLyBjb25zdCBmID0gbmV3RmlsdGVyKGJpdHMsIDYpXG4vLyBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XG4vLyAgICAgaWYgKCFmLmNvbnRhaW5zKEJ1ZmZlci5mcm9tKGkgKyAnJykpKSB7XG4vLyAgICAgICAgIHRocm93IG5ldyBFcnJvcignc2hvdWxkIHJldHVybiB0cnVlJylcbi8vICAgICB9XG4vLyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZbXh2YjIwdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZZbXh2YjIwdWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVDBGQlR5eEZRVUZGTEZWQlFWVXNSVUZCUlN4TlFVRk5MR0ZCUVdFc1EwRkJRVHRCUVVWNFF5eE5RVUZOTEZWQlFWVXNVMEZCVXl4RFFVRkRMRWxCUVZrc1JVRkJSU3hEUVVGVE8wbEJRemRETEUxQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlF6ZENMRTlCUVU4N1VVRkRTQ3hSUVVGUkxFTkJRVU1zUjBGQlZ6dFpRVU5vUWl4SlFVRkpMRWxCUVVrc1IwRkJSeXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRekZETEUxQlFVMHNTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTU3hMUVVGTExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4SlFVRkpMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlFUdFpRVU5vUkN4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8yZENRVU40UWl4TlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZCTzJkQ1FVTXpRaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEV0QlFVc3NRMEZCUXl4RFFVRkJPMmRDUVVNeFFpeE5RVUZOTEVkQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVRTdaMEpCUXpkQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUlVGQlJUdHZRa0ZEZEVJc1QwRkJUeXhMUVVGTExFTkJRVUU3YVVKQlEyWTdaMEpCUTBRc1NVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRoUVVNNVFqdFpRVU5FTEU5QlFVOHNTVUZCU1N4RFFVRkJPMUZCUTJZc1EwRkJRenRMUVVOS0xFTkJRVUU3UVVGRFRDeERRVUZETzBGQlEwUXNhVUpCUVdsQ08wRkJRMnBDTEdkVFFVRm5VenRCUVVOb1V5d3JRa0ZCSzBJN1FVRkRMMElzYTBOQlFXdERPMEZCUTJ4RExEaERRVUU0UXp0QlFVTTVReXhuUkVGQlowUTdRVUZEYUVRc1VVRkJVVHRCUVVOU0xFbEJRVWtpZlE9PSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/bloom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/cache.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/cache.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cache: () => (/* binding */ Cache)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/lru-cache/index.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lru_cache__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _bloom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./bloom */ \"(ssr)/./node_modules/@vechain/connex-driver/esm/bloom.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\nconst WINDOW_LEN = 12;\nclass Cache {\n    constructor() {\n        this.irreversible = {\n            blocks: new lru_cache__WEBPACK_IMPORTED_MODULE_0__(256),\n            txs: new lru_cache__WEBPACK_IMPORTED_MODULE_0__(512),\n            receipts: new lru_cache__WEBPACK_IMPORTED_MODULE_0__(512)\n        };\n        this.window = [];\n    }\n    handleNewBlock(head, bloom, block) {\n        while (this.window.length > 0) {\n            const top = this.window[this.window.length - 1];\n            if (top.id === head.id) {\n                return;\n            }\n            if (top.id === head.parentID) {\n                break;\n            }\n            this.window.pop();\n        }\n        this.window.push(Object.assign(Object.assign({}, head), { bloom: bloom ? (0,_bloom__WEBPACK_IMPORTED_MODULE_2__.newFilter)(Buffer.from(bloom.bits.slice(2), 'hex'), bloom.k) : undefined, block, accounts: new Map(), txs: new Map(), receipts: new Map(), tied: new Map() }));\n        // shift out old slots and move cached items into frozen cache\n        while (this.window.length > WINDOW_LEN) {\n            const bottom = this.window.shift();\n            bottom.txs.forEach((v, k) => this.irreversible.txs.set(k, v));\n            bottom.receipts.forEach((v, k) => this.irreversible.receipts.set(k, v));\n            if (bottom.block) {\n                this.irreversible.blocks.set(bottom.block.id, bottom.block);\n                this.irreversible.blocks.set(bottom.block.number, bottom.block);\n            }\n        }\n    }\n    getBlock(revision, fetch) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let block = this.irreversible.blocks.get(revision) || null;\n            if (block) {\n                return block;\n            }\n            const { slot } = this.findSlot(revision);\n            if (slot && slot.block) {\n                return slot.block;\n            }\n            block = yield fetch();\n            if (block) {\n                if (slot && slot.id === block.id) {\n                    slot.block = block;\n                }\n                if (this.isIrreversible(block.number)) {\n                    this.irreversible.blocks.set(block.id, block);\n                    if (block.isTrunk) {\n                        this.irreversible.blocks.set(block.number, block);\n                    }\n                }\n            }\n            return block;\n        });\n    }\n    getTx(txid, fetch) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let tx = this.irreversible.txs.get(txid) || null;\n            if (tx) {\n                return tx;\n            }\n            for (const slot of this.window) {\n                tx = slot.txs.get(txid) || null;\n                if (tx) {\n                    return tx;\n                }\n            }\n            tx = yield fetch();\n            if (tx && tx.meta) { // only cache non-pending tx\n                const { slot } = this.findSlot(tx.meta.blockID);\n                if (slot) {\n                    slot.txs.set(txid, tx);\n                }\n                if (this.isIrreversible(tx.meta.blockNumber)) {\n                    this.irreversible.txs.set(txid, tx);\n                }\n            }\n            return tx;\n        });\n    }\n    getReceipt(txid, fetch) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let receipt = this.irreversible.receipts.get(txid) || null;\n            if (receipt) {\n                return receipt;\n            }\n            for (const slot of this.window) {\n                receipt = slot.receipts.get(txid) || null;\n                if (receipt) {\n                    return receipt;\n                }\n            }\n            receipt = yield fetch();\n            if (receipt) {\n                const { slot } = this.findSlot(receipt.meta.blockID);\n                if (slot) {\n                    slot.receipts.set(txid, receipt);\n                }\n                if (this.isIrreversible(receipt.meta.blockNumber)) {\n                    this.irreversible.receipts.set(txid, receipt);\n                }\n            }\n            return receipt;\n        });\n    }\n    getAccount(addr, revision, fetch) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const found = this.findSlot(revision);\n            for (let i = found.index; i >= 0; i--) {\n                const slot = this.window[i];\n                const acc = slot.accounts.get(addr);\n                if (acc) {\n                    if (i !== found.index) {\n                        found.slot.accounts.set(addr, acc);\n                    }\n                    return acc.snapshot(found.slot.timestamp);\n                }\n                if (!slot.bloom || testBytesHex(slot.bloom, addr)) {\n                    // account might be dirty\n                    break;\n                }\n            }\n            const accObj = yield fetch();\n            if (found.slot) {\n                found.slot.accounts.set(addr, new Account(accObj, found.slot.timestamp));\n            }\n            return accObj;\n        });\n    }\n    /**\n     * get cached entry which is tied to a batch of addresses\n     * @param key the cache key\n     * @param revision block id where cache bound to\n     * @param fetch to fetch value when cache missing\n     * @param hints array of tied addresses, as the gist to invalidate cache key. undefined means the key is always\n     * invalidated on different revision.\n     */\n    getTied(key, revision, fetch, hints) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const found = this.findSlot(revision);\n            for (let i = found.index; i >= 0; i--) {\n                const slot = this.window[i];\n                const v = slot.tied.get(key);\n                if (v) {\n                    if (i !== found.index) {\n                        found.slot.tied.set(key, v);\n                    }\n                    return v;\n                }\n                if (!slot.bloom || !hints) {\n                    break;\n                }\n                // if hints.length === 0, never invalidate cache\n                if (hints.some(t => testBytesHex(slot.bloom, t))) {\n                    // might be dirty\n                    break;\n                }\n            }\n            const value = yield fetch();\n            if (found.slot) {\n                found.slot.tied.set(key, value);\n            }\n            return value;\n        });\n    }\n    findSlot(revision) {\n        const index = this.window.findIndex(s => s.id === revision || s.number === revision);\n        if (index >= 0) {\n            return { slot: this.window[index], index };\n        }\n        return { index };\n    }\n    isIrreversible(n) {\n        if (this.window.length > 0) {\n            return n < this.window[this.window.length - 1].number - WINDOW_LEN;\n        }\n        return false;\n    }\n}\nfunction testBytesHex(filter, hex) {\n    let buf = Buffer.from(hex.slice(2), 'hex');\n    const nzIndex = buf.findIndex(v => v !== 0);\n    if (nzIndex < 0) {\n        buf = Buffer.alloc(0);\n    }\n    else {\n        buf = buf.slice(nzIndex);\n    }\n    return filter.contains(buf);\n}\nconst ENERGY_GROWTH_RATE = 5000000000;\nclass Account {\n    constructor(obj, initTimestamp) {\n        this.obj = obj;\n        this.initTimestamp = initTimestamp;\n    }\n    snapshot(timestamp) {\n        return Object.assign(Object.assign({}, this.obj), { energy: this.energyAt(timestamp) });\n    }\n    energyAt(timestamp) {\n        if (timestamp < this.initTimestamp) {\n            return this.obj.energy;\n        }\n        return '0x' + new (bignumber_js__WEBPACK_IMPORTED_MODULE_1___default())(this.obj.balance)\n            .times(timestamp - this.initTimestamp)\n            .times(ENERGY_GROWTH_RATE)\n            .dividedToIntegerBy(1e18)\n            .plus(this.obj.energy)\n            .toString(16);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/cache.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/common.js":
/*!***********************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/common.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxNQUFNLFVBQVUsS0FBSyxDQUFDLEVBQVU7SUFDNUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUMxRCxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWRyaXZlci9lc20vY29tbW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9jb25uZXgtZHJpdmVyL2VzbS9jb21tb24uanM/NWVmZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIG1zKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lZMjl0Ylc5dUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMk52YlcxdmJpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZEUVN4TlFVRk5MRlZCUVZVc1MwRkJTeXhEUVVGRExFVkJRVlU3U1VGRE5VSXNUMEZCVHl4SlFVRkpMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZETEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlFUdEJRVU14UkN4RFFVRkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/common.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/driver-no-vendor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/driver-no-vendor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DriverNoVendor: () => (/* binding */ DriverNoVendor)\n/* harmony export */ });\n/* harmony import */ var _promint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./promint */ \"(ssr)/./node_modules/@vechain/connex-driver/esm/promint.js\");\n/* harmony import */ var _cache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cache */ \"(ssr)/./node_modules/@vechain/connex-driver/esm/cache.js\");\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/blake2b.js\");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common */ \"(ssr)/./node_modules/@vechain/connex-driver/esm/common.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n/** class implements Connex.Driver leaves out Vendor related methods */\nclass DriverNoVendor {\n    constructor(net, genesis, initialHead) {\n        this.net = net;\n        this.genesis = genesis;\n        this.headResolvers = [];\n        this.int = new _promint__WEBPACK_IMPORTED_MODULE_0__.PromInt();\n        this.cache = new _cache__WEBPACK_IMPORTED_MODULE_1__.Cache();\n        // to merge concurrent identical remote requests\n        this.pendingRequests = {};\n        if (initialHead) {\n            this.head = initialHead;\n        }\n        else {\n            this.head = {\n                id: genesis.id,\n                number: genesis.number,\n                timestamp: genesis.timestamp,\n                parentID: genesis.parentID,\n                txsFeatures: genesis.txsFeatures,\n                gasLimit: genesis.gasLimit\n            };\n            if (genesis.baseFeePerGas) {\n                this.head.baseFeePerGas = genesis.baseFeePerGas;\n            }\n        }\n        void this.headTrackerLoop();\n    }\n    // close the driver to prevent mem leak\n    close() {\n        this.int.interrupt();\n    }\n    // implementations\n    pollHead() {\n        return this.int.wrap(new Promise(resolve => {\n            this.headResolvers.push(() => resolve(this.head));\n        }));\n    }\n    getBlock(revision) {\n        return this.cache.getBlock(revision, () => this.httpGet(`blocks/${revision}`));\n    }\n    getTransaction(id, allowPending) {\n        return this.cache.getTx(id, () => {\n            const query = { head: this.head.id };\n            if (allowPending) {\n                query.pending = 'true';\n            }\n            return this.httpGet(`transactions/${id}`, query);\n        });\n    }\n    getReceipt(id) {\n        return this.cache.getReceipt(id, () => this.httpGet(`transactions/${id}/receipt`, { head: this.head.id }));\n    }\n    getAccount(addr, revision) {\n        return this.cache.getAccount(addr, revision, () => this.httpGet(`accounts/${addr}`, { revision }));\n    }\n    getCode(addr, revision) {\n        return this.cache.getTied(`code-${addr}`, revision, () => this.httpGet(`accounts/${addr}/code`, { revision }));\n    }\n    getStorage(addr, key, revision) {\n        return this.cache.getTied(`storage-${addr}-${key}`, revision, () => this.httpGet(`accounts/${addr}/storage/${key}`, { revision }));\n    }\n    explain(arg, revision, cacheHints) {\n        const cacheKey = `explain-${(0,thor_devkit__WEBPACK_IMPORTED_MODULE_2__.blake2b256)(JSON.stringify(arg)).toString('hex')}`;\n        return this.cache.getTied(cacheKey, revision, () => this.httpPost('accounts/*', arg, { revision }), cacheHints);\n    }\n    filterEventLogs(arg, cacheHints) {\n        const cacheKey = `event-${(0,thor_devkit__WEBPACK_IMPORTED_MODULE_2__.blake2b256)(JSON.stringify(arg)).toString('hex')}`;\n        return this.cache.getTied(cacheKey, this.head.id, () => this.httpPost('logs/event', arg), cacheHints);\n    }\n    filterTransferLogs(arg, cacheHints) {\n        const cacheKey = `transfer-${(0,thor_devkit__WEBPACK_IMPORTED_MODULE_2__.blake2b256)(JSON.stringify(arg)).toString('hex')}`;\n        return this.cache.getTied(cacheKey, this.head.id, () => this.httpPost('logs/transfer', arg), cacheHints);\n    }\n    signTx(msg, options) {\n        throw new Error('signer not implemented');\n    }\n    signCert(msg, options) {\n        throw new Error('signer not implemented');\n    }\n    //////\n    mergeRequest(req, ...keyParts) {\n        const key = JSON.stringify(keyParts);\n        const pending = this.pendingRequests[key];\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        if (pending) {\n            return pending;\n        }\n        return this.pendingRequests[key] = (() => __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield req();\n            }\n            finally {\n                delete this.pendingRequests[key];\n            }\n        }))();\n    }\n    httpGet(path, query) {\n        return this.mergeRequest(() => {\n            return this.net.http('GET', path, {\n                query,\n                validateResponseHeader: this.headerValidator\n            });\n        }, path, query || '');\n    }\n    httpPost(path, body, query) {\n        return this.mergeRequest(() => {\n            return this.net.http('POST', path, {\n                query,\n                body,\n                validateResponseHeader: this.headerValidator\n            });\n        }, path, query || '', body || '');\n    }\n    get headerValidator() {\n        return (headers) => {\n            const xgid = headers['x-genesis-id'];\n            if (xgid && xgid !== this.genesis.id) {\n                throw new Error(`responded 'x-genesis-id' not matched`);\n            }\n        };\n    }\n    emitNewHead() {\n        const resolvers = this.headResolvers;\n        this.headResolvers = [];\n        resolvers.forEach(r => r());\n    }\n    headTrackerLoop() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (;;) {\n                let attemptWs = false;\n                try {\n                    const best = yield this.int.wrap(this.httpGet('blocks/best'));\n                    if (best.id !== this.head.id && best.number >= this.head.number) {\n                        this.head = {\n                            id: best.id,\n                            number: best.number,\n                            timestamp: best.timestamp,\n                            parentID: best.parentID,\n                            txsFeatures: best.txsFeatures,\n                            gasLimit: best.gasLimit\n                        };\n                        if (best.baseFeePerGas) {\n                            this.head.baseFeePerGas = best.baseFeePerGas;\n                        }\n                        this.cache.handleNewBlock(this.head, undefined, best);\n                        this.emitNewHead();\n                        if (Date.now() - this.head.timestamp * 1000 < 60 * 1000) {\n                            // nearly synced\n                            attemptWs = true;\n                        }\n                    }\n                }\n                catch (err) {\n                    if (err instanceof _promint__WEBPACK_IMPORTED_MODULE_0__.InterruptedError) {\n                        break;\n                    }\n                }\n                if (attemptWs) {\n                    try {\n                        yield this.trackWs();\n                    }\n                    catch (err) {\n                        if (err instanceof _promint__WEBPACK_IMPORTED_MODULE_0__.InterruptedError) {\n                            break;\n                        }\n                    }\n                }\n                try {\n                    yield this.int.wrap((0,_common__WEBPACK_IMPORTED_MODULE_3__.sleep)(8 * 1000));\n                }\n                catch (_a) {\n                    break;\n                }\n            }\n        });\n    }\n    trackWs() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wsPath = `subscriptions/beat2?pos=${this.head.parentID}`;\n            const wsr = this.net.openWebSocketReader(wsPath);\n            try {\n                for (;;) {\n                    const data = yield this.int.wrap(wsr.read());\n                    const beat = JSON.parse(data);\n                    if (!beat.obsolete && beat.id !== this.head.id && beat.number >= this.head.number) {\n                        this.head = {\n                            id: beat.id,\n                            number: beat.number,\n                            timestamp: beat.timestamp,\n                            parentID: beat.parentID,\n                            txsFeatures: beat.txsFeatures,\n                            gasLimit: beat.gasLimit\n                        };\n                        if (beat.baseFeePerGas) {\n                            this.head.baseFeePerGas = beat.baseFeePerGas;\n                        }\n                        this.cache.handleNewBlock(this.head, { k: beat.k, bits: beat.bloom });\n                        this.emitNewHead();\n                    }\n                }\n            }\n            finally {\n                wsr.close();\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/driver-no-vendor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/driver.js":
/*!***********************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/driver.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Driver: () => (/* binding */ Driver),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType)\n/* harmony export */ });\n/* harmony import */ var _driver_no_vendor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./driver-no-vendor */ \"(ssr)/./node_modules/@vechain/connex-driver/esm/driver-no-vendor.js\");\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/transaction.js\");\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/certificate.js\");\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/blake2b.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_1__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n/** class fully implements DriverInterface */\nclass Driver extends _driver_no_vendor__WEBPACK_IMPORTED_MODULE_2__.DriverNoVendor {\n    constructor(net, genesis, initialHead, wallet) {\n        super(net, genesis, initialHead);\n        this.wallet = wallet;\n        /** params for tx construction */\n        this.txParams = {\n            expiration: 18,\n            gasPriceCoef: 0,\n            maxPriorityFeePerGas: 0,\n            txType: TransactionType.DynamicFee\n        };\n    }\n    /**\n     * create driver instance\n     * it will fetch config(genesis, head) via net as construction params\n     * @param net\n     * @param wallet\n     */\n    static connect(net, wallet) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const genesis = yield net.http('GET', 'blocks/0');\n            const best = yield net.http('GET', 'blocks/best', {\n                validateResponseHeader: headers => {\n                    const xgid = headers['x-genesis-id'];\n                    if (xgid && xgid !== genesis.id) {\n                        throw new Error(`responded 'x-genesis-id' not matched`);\n                    }\n                }\n            });\n            const head = {\n                id: best.id,\n                number: best.number,\n                timestamp: best.timestamp,\n                parentID: best.parentID,\n                txsFeatures: best.txsFeatures,\n                gasLimit: best.gasLimit,\n            };\n            if (best.baseFeePerGas) {\n                head.baseFeePerGas = best.baseFeePerGas;\n            }\n            return new Driver(net, genesis, head, wallet);\n        });\n    }\n    signTx(msg, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            options.onAccepted && options.onAccepted();\n            const key = this.findKey(options.signer);\n            const clauses = msg.map(c => ({\n                to: c.to ? c.to.toLowerCase() : null,\n                value: c.value.toString().toLowerCase(),\n                data: (c.data || '0x').toLowerCase(),\n            }));\n            const gas = options.gas || (yield this.estimateGas(clauses, key.address));\n            // Base transaction body\n            const baseTxBody = {\n                chainTag: Number.parseInt(this.genesis.id.slice(-2), 16),\n                blockRef: this.head.id.slice(0, 18),\n                expiration: this.txParams.expiration,\n                clauses,\n                gas,\n                dependsOn: options.dependsOn || null,\n                nonce: '0x' + (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomBytes)(8).toString('hex')\n            };\n            // Determine transaction type and create appropriate body\n            let txType = this.txParams.txType;\n            if (txType === TransactionType.DynamicFee && !this.head.baseFeePerGas) {\n                // If baseFeePerGas is not available, means dynamic fee is not enabled\n                // in the current block, fallback to legacy transaction\n                txType = TransactionType.Legacy;\n            }\n            let txBody;\n            if (txType === TransactionType.DynamicFee) {\n                // Dynamic fee transaction\n                txBody = Object.assign(Object.assign({}, baseTxBody), { type: TransactionType.DynamicFee, maxPriorityFeePerGas: this.txParams.maxPriorityFeePerGas.toString(), maxFeePerGas: new (bignumber_js__WEBPACK_IMPORTED_MODULE_1___default())(this.txParams.maxPriorityFeePerGas).plus(this.head.baseFeePerGas).toString() });\n            }\n            else {\n                // Legacy transaction\n                txBody = Object.assign(Object.assign({}, baseTxBody), { type: TransactionType.Legacy, gasPriceCoef: this.txParams.gasPriceCoef });\n            }\n            let tx;\n            if (options.delegator) {\n                const delegatedTx = new thor_devkit__WEBPACK_IMPORTED_MODULE_3__.Transaction(Object.assign(Object.assign({}, txBody), { reserved: { features: 1 /* vip191 */ } }));\n                const originSig = yield key.sign(delegatedTx.signingHash());\n                const unsigned = {\n                    raw: '0x' + delegatedTx.encode().toString('hex'),\n                    origin: key.address\n                };\n                try {\n                    const result = yield this.net.http('POST', options.delegator.url, { body: unsigned });\n                    delegatedTx.signature = Buffer.concat([originSig, Buffer.from(result.signature.slice(2), 'hex')]);\n                    tx = delegatedTx;\n                }\n                catch (err) {\n                    // tslint:disable-next-line: no-console\n                    console.warn('tx delegation error: ', err);\n                    // fallback to non-vip191 tx\n                }\n            }\n            if (!tx) {\n                tx = new thor_devkit__WEBPACK_IMPORTED_MODULE_3__.Transaction(txBody);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n                tx.signature = yield key.sign(tx.signingHash());\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            const raw = `0x${tx.encode().toString('hex')}`;\n            if (this.onTxCommit) {\n                this.onTxCommit({\n                    id: tx.id,\n                    raw,\n                    resend: () => __awaiter(this, void 0, void 0, function* () {\n                        yield this.sendTx(raw);\n                    })\n                });\n            }\n            yield this.sendTx(raw);\n            return {\n                txid: tx.id,\n                signer: key.address\n            };\n        });\n    }\n    signCert(msg, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            options.onAccepted && options.onAccepted();\n            const key = this.findKey(options.signer);\n            const annex = {\n                domain: 'localhost',\n                timestamp: this.head.timestamp,\n                signer: key.address\n            };\n            const unsigned = thor_devkit__WEBPACK_IMPORTED_MODULE_4__.Certificate.encode(Object.assign(Object.assign({}, msg), annex));\n            const signature = yield key.sign((0,thor_devkit__WEBPACK_IMPORTED_MODULE_5__.blake2b256)(unsigned));\n            return {\n                annex,\n                signature: '0x' + signature.toString('hex')\n            };\n        });\n    }\n    findKey(addr) {\n        if (this.wallet) {\n            const keys = this.wallet.list;\n            const key = addr ? keys.find(k => k.address === addr) : keys[0];\n            if (key) {\n                return key;\n            }\n        }\n        throw new Error('empty wallet');\n    }\n    sendTx(raw) {\n        return this.httpPost('transactions', { raw });\n    }\n    estimateGas(clauses, caller) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const outputs = yield this.explain({\n                clauses,\n                caller,\n            }, this.head.id);\n            const execGas = outputs.reduce((sum, out) => sum + out.gasUsed, 0);\n            const intrinsicGas = thor_devkit__WEBPACK_IMPORTED_MODULE_3__.Transaction.intrinsicGas(clauses);\n            return intrinsicGas + (execGas ? (execGas + 15000) : 0);\n        });\n    }\n}\nconst TransactionType = thor_devkit__WEBPACK_IMPORTED_MODULE_3__.Transaction.Type;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RyaXZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFFbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ2xFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUE7QUFDcEMsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFBO0FBRXBDLDZDQUE2QztBQUM3QyxNQUFNLE9BQU8sTUFBTyxTQUFRLGNBQWM7SUFnRHRDLFlBQ0ksR0FBUSxFQUNSLE9BQTBCLEVBQzFCLFdBQXdDLEVBQ3ZCLE1BQWU7UUFFaEMsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7UUFGZixXQUFNLEdBQU4sTUFBTSxDQUFTO1FBWnBDLGlDQUFpQztRQUMxQixhQUFRLEdBQUc7WUFDZCxVQUFVLEVBQUUsRUFBRTtZQUNkLFlBQVksRUFBRSxDQUFDO1lBQ2Ysb0JBQW9CLEVBQUUsQ0FBa0I7WUFDeEMsTUFBTSxFQUFFLGVBQWUsQ0FBQyxVQUFVO1NBQ3JDLENBQUE7SUFTRCxDQUFDO0lBdEREOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFPLE9BQU8sQ0FBQyxHQUFRLEVBQUUsTUFBZTs7WUFDakQsTUFBTSxPQUFPLEdBQXNCLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUE7WUFDcEUsTUFBTSxJQUFJLEdBQXNCLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFO2dCQUNqRSxzQkFBc0IsRUFBRSxPQUFPLENBQUMsRUFBRTtvQkFDOUIsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO29CQUNwQyxJQUFJLElBQUksSUFBSSxJ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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/driver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/promint.js":
/*!************************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/promint.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InterruptedError: () => (/* binding */ InterruptedError),\n/* harmony export */   PromInt: () => (/* binding */ PromInt)\n/* harmony export */ });\n/** class to make promise interruptable */\nclass PromInt {\n    constructor() {\n        this.rejectors = new Set();\n    }\n    /**\n     * interrupt all wrapped promises\n     */\n    interrupt() {\n        const rejectors = this.rejectors;\n        this.rejectors = new Set();\n        rejectors.forEach(r => r(new InterruptedError()));\n    }\n    /**\n     * wrap the promise\n     * @param p the given promise\n     * @returns the wrapped promise which will raise InterruptedError on interruption\n     */\n    wrap(p) {\n        return new Promise((resolve, reject) => {\n            const rejectors = this.rejectors;\n            rejectors.add(reject);\n            void p.then(resolve)\n                .catch(reject)\n                .then(() => rejectors.delete(reject));\n        });\n    }\n}\nclass InterruptedError extends Error {\n    constructor() {\n        super('promise interrupted');\n    }\n}\nInterruptedError.prototype.name = 'InterruptedError';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvbWludC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9taW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDBDQUEwQztBQUMxQyxNQUFNLE9BQU8sT0FBTztJQUFwQjtRQUNZLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBd0IsQ0FBQTtJQTJCdkQsQ0FBQztJQXpCRzs7T0FFRztJQUNJLFNBQVM7UUFDWixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtRQUUxQixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDckQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxJQUFJLENBQUksQ0FBYTtRQUN4QixPQUFPLElBQUksT0FBTyxDQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3RDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7WUFDaEMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUVyQixLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO2lCQUNmLEtBQUssQ0FBQyxNQUFNLENBQUM7aUJBQ2IsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQTtRQUM3QyxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxLQUFLO0lBQ3ZDO1FBQ0ksS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUE7SUFDaEMsQ0FBQztDQUNKO0FBRUQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxrQkFBa0IsQ0FBQSJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWRyaXZlci9lc20vcHJvbWludC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9jb25uZXgtZHJpdmVyL2VzbS9wcm9taW50LmpzP2Q4NWQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIGNsYXNzIHRvIG1ha2UgcHJvbWlzZSBpbnRlcnJ1cHRhYmxlICovXG5leHBvcnQgY2xhc3MgUHJvbUludCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVqZWN0b3JzID0gbmV3IFNldCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBpbnRlcnJ1cHQgYWxsIHdyYXBwZWQgcHJvbWlzZXNcbiAgICAgKi9cbiAgICBpbnRlcnJ1cHQoKSB7XG4gICAgICAgIGNvbnN0IHJlamVjdG9ycyA9IHRoaXMucmVqZWN0b3JzO1xuICAgICAgICB0aGlzLnJlamVjdG9ycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgcmVqZWN0b3JzLmZvckVhY2gociA9PiByKG5ldyBJbnRlcnJ1cHRlZEVycm9yKCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogd3JhcCB0aGUgcHJvbWlzZVxuICAgICAqIEBwYXJhbSBwIHRoZSBnaXZlbiBwcm9taXNlXG4gICAgICogQHJldHVybnMgdGhlIHdyYXBwZWQgcHJvbWlzZSB3aGljaCB3aWxsIHJhaXNlIEludGVycnVwdGVkRXJyb3Igb24gaW50ZXJydXB0aW9uXG4gICAgICovXG4gICAgd3JhcChwKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWplY3RvcnMgPSB0aGlzLnJlamVjdG9ycztcbiAgICAgICAgICAgIHJlamVjdG9ycy5hZGQocmVqZWN0KTtcbiAgICAgICAgICAgIHZvaWQgcC50aGVuKHJlc29sdmUpXG4gICAgICAgICAgICAgICAgLmNhdGNoKHJlamVjdClcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiByZWplY3RvcnMuZGVsZXRlKHJlamVjdCkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgSW50ZXJydXB0ZWRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3Byb21pc2UgaW50ZXJydXB0ZWQnKTtcbiAgICB9XG59XG5JbnRlcnJ1cHRlZEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0ludGVycnVwdGVkRXJyb3InO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY0hKdmJXbHVkQzVxY3lJc0luTnZkWEpqWlZKdmIzUWlPaUlpTENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5d2NtOXRhVzUwTG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVTkJMREJEUVVFd1F6dEJRVU14UXl4TlFVRk5MRTlCUVU4c1QwRkJUenRKUVVGd1FqdFJRVU5aTEdOQlFWTXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJkMElzUTBGQlFUdEpRVEpDZGtRc1EwRkJRenRKUVhwQ1J6czdUMEZGUnp0SlFVTkpMRk5CUVZNN1VVRkRXaXhOUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkJPMUZCUTJoRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVVeFFpeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NaMEpCUVdkQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEY2tRc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTU3hKUVVGSkxFTkJRVWtzUTBGQllUdFJRVU40UWl4UFFVRlBMRWxCUVVrc1QwRkJUeXhEUVVGSkxFTkJRVU1zVDBGQlR5eEZRVUZGTEUxQlFVMHNSVUZCUlN4RlFVRkZPMWxCUTNSRExFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVFN1dVRkRhRU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHRaUVVWeVFpeExRVUZMTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRE8ybENRVU5tTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUVVNN2FVSkJRMklzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUVR0UlFVTTNReXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU5PTEVOQlFVTTdRMEZEU2p0QlFVVkVMRTFCUVUwc1QwRkJUeXhuUWtGQmFVSXNVMEZCVVN4TFFVRkxPMGxCUTNaRE8xRkJRMGtzUzBGQlN5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVUU3U1VGRGFFTXNRMEZCUXp0RFFVTktPMEZCUlVRc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1IwRkJSeXhyUWtGQmEwSXNRMEZCUVNKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/promint.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/simple-net.js":
/*!***************************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/simple-net.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleNet: () => (/* binding */ SimpleNet)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(ssr)/./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _simple_websocket_reader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simple-websocket-reader */ \"(ssr)/./node_modules/@vechain/connex-driver/esm/simple-websocket-reader.js\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! http */ \"http\");\n/* harmony import */ var http__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(http__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! https */ \"https\");\n/* harmony import */ var https__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(https__WEBPACK_IMPORTED_MODULE_3__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n/** class simply implements Net interface */\nclass SimpleNet {\n    constructor(baseURL, timeout = 30 * 1000, wsTimeout = 30 * 1000) {\n        this.baseURL = baseURL;\n        this.wsTimeout = wsTimeout;\n        this.axios = axios__WEBPACK_IMPORTED_MODULE_0___default().create({\n            httpAgent: new http__WEBPACK_IMPORTED_MODULE_2__.Agent({ keepAlive: true }),\n            httpsAgent: new https__WEBPACK_IMPORTED_MODULE_3__.Agent({ keepAlive: true }),\n            baseURL,\n            timeout\n        });\n    }\n    http(method, path, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            params = params || {};\n            try {\n                const resp = yield this.axios.request({\n                    method,\n                    url: path,\n                    data: params.body,\n                    headers: params.headers,\n                    params: params.query\n                });\n                if (params.validateResponseHeader) {\n                    params.validateResponseHeader(resp.headers);\n                }\n                return resp.data;\n            }\n            catch (err) {\n                if (err.isAxiosError) {\n                    throw convertError(err);\n                }\n                throw new Error(`${method} ${(0,url__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.baseURL, path)}: ${err.message}`);\n            }\n        });\n    }\n    openWebSocketReader(path) {\n        const url = (0,url__WEBPACK_IMPORTED_MODULE_1__.resolve)(this.baseURL, path)\n            .replace(/^http:/i, 'ws:')\n            .replace(/^https:/i, 'wss:');\n        return new _simple_websocket_reader__WEBPACK_IMPORTED_MODULE_4__.SimpleWebSocketReader(url, this.wsTimeout);\n    }\n}\nfunction convertError(err) {\n    if (err.response) {\n        const resp = err.response;\n        if (typeof resp.data === 'string') {\n            let text = resp.data.trim();\n            if (text.length > 50) {\n                text = text.slice(0, 50) + '...';\n            }\n            return new Error(`${resp.status} ${err.config.method} ${err.config.url}: ${text}`);\n        }\n        else {\n            return new Error(`${resp.status} ${err.config.method} ${err.config.url}`);\n        }\n    }\n    else {\n        return new Error(`${err.config.method} ${err.config.url}: ${err.message}`);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLW5ldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zaW1wbGUtbmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBLE9BQU8sS0FBb0MsTUFBTSxPQUFPLENBQUE7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDakUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLEtBQUssQ0FBQTtBQUM3QixPQUFPLEVBQUUsS0FBSyxJQUFJLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQTtBQUN6QyxPQUFPLEVBQUUsS0FBSyxJQUFJLFVBQVUsRUFBRSxNQUFNLE9BQU8sQ0FBQTtBQUUzQyw0Q0FBNEM7QUFDNUMsTUFBTSxPQUFPLFNBQVM7SUFHbEIsWUFDYSxPQUFlLEVBQ3hCLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUNGLFlBQVksRUFBRSxHQUFHLElBQUk7UUFGN0IsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUVQLGNBQVMsR0FBVCxTQUFTLENBQVk7UUFFdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ3RCLFNBQVMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUM3QyxVQUFVLEVBQUUsSUFBSSxVQUFVLENBQUMsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDL0MsT0FBTztZQUNQLE9BQU87U0FDVixDQUFDLENBQUE7SUFDTixDQUFDO0lBRVksSUFBSSxDQUNiLE1BQXNCLEVBQ3RCLElBQVksRUFDWixNQUFtQjs7WUFDbkIsTUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUE7WUFDckIsSUFBSTtnQkFDQSxNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO29CQUNsQyxNQUFNO29CQUNOLEdBQUcsRUFBRSxJQUFJO29CQUNULElBQUksRUFBRSxNQUFNLENBQUMsSUFBSTtvQkFDakIsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO29CQUN2QixNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUs7aUJBQ3ZCLENBQUMsQ0FBQTtnQkFDRixJQUFJLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRTtvQkFDL0IsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtpQkFDOUM7Z0JBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFBO2FBQ25CO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFO29CQUNsQixNQUFNLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQTtpQkFDMUI7Z0JBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLE1BQU0sSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTthQUM5RTtRQUNMLENBQUM7S0FBQTtJQUNNLG1CQUFtQixDQUFDLElBQVk7UUFDbkMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDO2FBQ2xDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO2FBQ3pCLE9BQU8sQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7UUFDaEMsT0FBTyxJQUFJLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDekQsQ0FBQztDQUNKO0FBRUQsU0FBUyxZQUFZLENBQUMsR0FBZTtJQUNqQyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUU7UUFDZCxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFBO1FBQ3pCLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1lBQzNCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7Z0JBQ2xCLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUE7YUFDbkM7WUFDRCxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQ3JGO2FBQU07WUFDSCxPQUFPLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUE7U0FDNUU7S0FDSjtTQUFNO1FBQ0gsT0FBTyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFBO0tBQzdFO0FBQ0wsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/simple-net.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-driver/esm/simple-websocket-reader.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@vechain/connex-driver/esm/simple-websocket-reader.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SimpleWebSocketReader: () => (/* binding */ SimpleWebSocketReader)\n/* harmony export */ });\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-ws */ \"(ssr)/./node_modules/isomorphic-ws/node.js\");\n/* harmony import */ var isomorphic_ws__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_ws__WEBPACK_IMPORTED_MODULE_0__);\n\nclass SimpleWebSocketReader {\n    constructor(url, timeout = 30 * 1000) {\n        this.timeout = timeout;\n        this.callbacks = [];\n        this.ws = new isomorphic_ws__WEBPACK_IMPORTED_MODULE_0__(url);\n        this.ws.onmessage = ev => {\n            try {\n                const cbs = this.callbacks;\n                this.callbacks = [];\n                cbs.forEach(cb => cb(ev.data));\n            }\n            catch (err) {\n                this.setError(err);\n                this.ws.close();\n            }\n        };\n        this.ws.onerror = ev => {\n            this.setError(ev.error);\n            this.ws.close();\n        };\n        this.ws.onclose = () => {\n            this.setError(new Error('closed'));\n        };\n    }\n    read() {\n        return new Promise((resolve, reject) => {\n            if (this.error) {\n                return reject(this.error);\n            }\n            const timer = setTimeout(() => {\n                reject(new Error('ws read timeout'));\n            }, this.timeout);\n            this.callbacks.push((data, err) => {\n                clearTimeout(timer);\n                if (err) {\n                    return reject(err);\n                }\n                resolve(data);\n            });\n        });\n    }\n    close() {\n        this.ws.close();\n    }\n    setError(err) {\n        if (!this.error) {\n            this.error = err;\n            const cbs = this.callbacks;\n            this.callbacks = [];\n            cbs.forEach(cb => cb(null, err));\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXdlYnNvY2tldC1yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2ltcGxlLXdlYnNvY2tldC1yZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLFNBQVMsTUFBTSxlQUFlLENBQUE7QUFHMUMsTUFBTSxPQUFPLHFCQUFxQjtJQUs5QixZQUFZLEdBQVcsRUFBbUIsVUFBVSxFQUFFLEdBQUcsSUFBSTtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBSHJELGNBQVMsR0FBRyxFQUErQyxDQUFBO1FBSS9ELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7UUFDNUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLEVBQUU7WUFDckIsSUFBSTtnQkFDQSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFBO2dCQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtnQkFDbkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTthQUNqQztZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ2xCLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUE7YUFDbEI7UUFDTCxDQUFDLENBQUE7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUN2QixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ25CLENBQUMsQ0FBQTtRQUNELElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDdEMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQztJQUVNLElBQUk7UUFDUCxPQUFPLElBQUksT0FBTyxDQUFNLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3hDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFDWixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDNUI7WUFFRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUMxQixNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFBO1lBQ3hDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7WUFFaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQzlCLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDbkIsSUFBSSxHQUFHLEVBQUU7b0JBQ0wsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7aUJBQ3JCO2dCQUNELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUNqQixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztJQUVNLEtBQUs7UUFDUixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ25CLENBQUM7SUFFTyxRQUFRLENBQUMsR0FBVTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNiLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFBO1lBRWhCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7WUFDMUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUE7WUFDbkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUNuQztJQUNMLENBQUM7Q0FDSiJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWRyaXZlci9lc20vc2ltcGxlLXdlYnNvY2tldC1yZWFkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBQ3BDO0FBQ1A7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDBDQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmVhdmVtZW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B2ZWNoYWluL2Nvbm5leC1kcml2ZXIvZXNtL3NpbXBsZS13ZWJzb2NrZXQtcmVhZGVyLmpzP2RiOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgV2ViU29ja2V0IGZyb20gJ2lzb21vcnBoaWMtd3MnO1xuZXhwb3J0IGNsYXNzIFNpbXBsZVdlYlNvY2tldFJlYWRlciB7XG4gICAgY29uc3RydWN0b3IodXJsLCB0aW1lb3V0ID0gMzAgKiAxMDAwKSB7XG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICAgIHRoaXMud3MgPSBuZXcgV2ViU29ja2V0KHVybCk7XG4gICAgICAgIHRoaXMud3Mub25tZXNzYWdlID0gZXYgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYnMgPSB0aGlzLmNhbGxiYWNrcztcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAgICAgIGNicy5mb3JFYWNoKGNiID0+IGNiKGV2LmRhdGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgdGhpcy53cy5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLndzLm9uZXJyb3IgPSBldiA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yKGV2LmVycm9yKTtcbiAgICAgICAgICAgIHRoaXMud3MuY2xvc2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53cy5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRFcnJvcihuZXcgRXJyb3IoJ2Nsb3NlZCcpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmVhZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdCh0aGlzLmVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignd3MgcmVhZCB0aW1lb3V0JykpO1xuICAgICAgICAgICAgfSwgdGhpcy50aW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLnB1c2goKGRhdGEsIGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgfVxuICAgIHNldEVycm9yKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuZXJyb3IpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnI7XG4gICAgICAgICAgICBjb25zdCBjYnMgPSB0aGlzLmNhbGxiYWNrcztcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzID0gW107XG4gICAgICAgICAgICBjYnMuZm9yRWFjaChjYiA9PiBjYihudWxsLCBlcnIpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWMybHRjR3hsTFhkbFluTnZZMnRsZEMxeVpXRmtaWEl1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmMybHRjR3hsTFhkbFluTnZZMnRsZEMxeVpXRmtaWEl1ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUMEZCVHl4TFFVRkxMRk5CUVZNc1RVRkJUU3hsUVVGbExFTkJRVUU3UVVGSE1VTXNUVUZCVFN4UFFVRlBMSEZDUVVGeFFqdEpRVXM1UWl4WlFVRlpMRWRCUVZjc1JVRkJiVUlzVlVGQlZTeEZRVUZGTEVkQlFVY3NTVUZCU1R0UlFVRnVRaXhaUVVGUExFZEJRVkFzVDBGQlR5eERRVUZaTzFGQlNISkVMR05CUVZNc1IwRkJSeXhGUVVFclF5eERRVUZCTzFGQlNTOUVMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzU1VGQlNTeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1VVRkROVUlzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4VFFVRlRMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGNrSXNTVUZCU1R0blFrRkRRU3hOUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkJPMmRDUVVNeFFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRVHRuUWtGRGJrSXNSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlFUdGhRVU5xUXp0WlFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRk8yZENRVU5XTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3WjBKQlEyeENMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVRTdZVUZEYkVJN1VVRkRUQ3hEUVVGRExFTkJRVUU3VVVGRFJDeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU51UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0WlFVTjJRaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkJPMUZCUTI1Q0xFTkJRVU1zUTBGQlFUdFJRVU5FTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU51UWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRkRU1zUTBGQlF5eERRVUZCTzBsQlEwd3NRMEZCUXp0SlFVVk5MRWxCUVVrN1VVRkRVQ3hQUVVGUExFbEJRVWtzVDBGQlR5eERRVUZOTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1JVRkJSU3hGUVVGRk8xbEJRM2hETEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRuUWtGRFdpeFBRVUZQTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3WVVGRE5VSTdXVUZGUkN4TlFVRk5MRXRCUVVzc1IwRkJSeXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzJkQ1FVTXhRaXhOUVVGTkxFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF5eERRVUZCTzFsQlEzaERMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdXVUZGYUVJc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVU3WjBKQlF6bENMRmxCUVZrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdG5Ra0ZEYmtJc1NVRkJTU3hIUVVGSExFVkJRVVU3YjBKQlEwd3NUMEZCVHl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3YVVKQlEzSkNPMmRDUVVORUxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0WlFVTnFRaXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUTA0c1EwRkJRenRKUVVWTkxFdEJRVXM3VVVGRFVpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGQk8wbEJRMjVDTEVOQlFVTTdTVUZGVHl4UlFVRlJMRU5CUVVNc1IwRkJWVHRSUVVOMlFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVOaUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NSMEZCUnl4RFFVRkJPMWxCUldoQ0xFMUJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVFN1dVRkRNVUlzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4RlFVRkZMRU5CUVVFN1dVRkRia0lzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRVHRUUVVOdVF6dEpRVU5NTEVOQlFVTTdRMEZEU2lKOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-driver/esm/simple-websocket-reader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/account-visitor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/account-visitor.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newAccountVisitor: () => (/* binding */ newAccountVisitor)\n/* harmony export */ });\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/abi.js\");\n/* harmony import */ var _revert_reason__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./revert-reason */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/revert-reason.js\");\n/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/filter.js\");\n/* harmony import */ var _vendor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vendor */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/vendor.js\");\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\");\n\n\n\n\n\nfunction newAccountVisitor(readyDriver, addr) {\n    return {\n        get address() { return addr; },\n        get: () => {\n            return readyDriver.then(d => d.getAccount(addr, d.head.id));\n        },\n        getCode: () => {\n            return readyDriver.then(d => d.getCode(addr, d.head.id));\n        },\n        getStorage: key => {\n            key = _rules__WEBPACK_IMPORTED_MODULE_0__.test(key, _rules__WEBPACK_IMPORTED_MODULE_0__.bytes32, 'arg0').toLowerCase();\n            return readyDriver.then(d => d.getStorage(addr, key, d.head.id));\n        },\n        method: jsonABI => {\n            let coder;\n            try {\n                coder = new thor_devkit__WEBPACK_IMPORTED_MODULE_1__.abi.Function(JSON.parse(JSON.stringify(jsonABI)));\n            }\n            catch (err) {\n                throw new _rules__WEBPACK_IMPORTED_MODULE_0__.BadParameter(`arg0: expected valid ABI (${err.message})`);\n            }\n            return newMethod(readyDriver, addr, coder);\n        },\n        event: jsonABI => {\n            let coder;\n            try {\n                coder = new thor_devkit__WEBPACK_IMPORTED_MODULE_1__.abi.Event(JSON.parse(JSON.stringify(jsonABI)));\n            }\n            catch (err) {\n                throw new _rules__WEBPACK_IMPORTED_MODULE_0__.BadParameter(`arg0: expected valid ABI (${err.message})`);\n            }\n            return newEvent(readyDriver, addr, coder);\n        }\n    };\n}\nfunction newMethod(readyDriver, addr, coder) {\n    let value = 0;\n    const opts = {};\n    let cacheHints;\n    return {\n        value(val) {\n            value = _rules__WEBPACK_IMPORTED_MODULE_0__.test(val, _rules__WEBPACK_IMPORTED_MODULE_0__.bigInt, 'arg0');\n            return this;\n        },\n        caller(addr) {\n            opts.caller = _rules__WEBPACK_IMPORTED_MODULE_0__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_0__.address, 'arg0').toLowerCase();\n            return this;\n        },\n        gas(gas) {\n            opts.gas = _rules__WEBPACK_IMPORTED_MODULE_0__.test(gas, _rules__WEBPACK_IMPORTED_MODULE_0__.uint64, 'arg0');\n            return this;\n        },\n        gasPrice(gp) {\n            opts.gasPrice = _rules__WEBPACK_IMPORTED_MODULE_0__.test(gp, _rules__WEBPACK_IMPORTED_MODULE_0__.bigInt, 'arg0').toString().toLowerCase();\n            return this;\n        },\n        gasPayer(addr) {\n            opts.gasPayer = _rules__WEBPACK_IMPORTED_MODULE_0__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_0__.address, 'arg0').toLowerCase();\n            return this;\n        },\n        cache(hints) {\n            cacheHints = _rules__WEBPACK_IMPORTED_MODULE_0__.test(hints, [_rules__WEBPACK_IMPORTED_MODULE_0__.address], 'arg0').map(t => t.toLowerCase());\n            return this;\n        },\n        asClause: (...args) => {\n            const inputsLen = (coder.definition.inputs || []).length;\n            _rules__WEBPACK_IMPORTED_MODULE_0__.ensure(inputsLen === args.length, `args count expected ${inputsLen}`);\n            try {\n                const data = coder.encode(...args);\n                return {\n                    to: addr,\n                    value: value.toString().toLowerCase(),\n                    data\n                };\n            }\n            catch (err) {\n                throw new _rules__WEBPACK_IMPORTED_MODULE_0__.BadParameter(`args can not be encoded (${err.message})`);\n            }\n        },\n        call(...args) {\n            const clause = this.asClause(...args);\n            return readyDriver.then(d => d.explain(Object.assign({ clauses: [clause] }, opts), d.head.id, cacheHints))\n                .then(outputs => outputs[0])\n                .then(output => {\n                if (output.reverted) {\n                    const revertReason = (0,_revert_reason__WEBPACK_IMPORTED_MODULE_2__.decodeRevertReason)(output.data);\n                    return Object.assign(Object.assign({}, output), { revertReason, decoded: {} });\n                }\n                else {\n                    const decoded = coder.decode(output.data);\n                    return Object.assign(Object.assign({}, output), { decoded });\n                }\n            });\n        },\n        transact(...args) {\n            const clause = this.asClause(...args);\n            return (0,_vendor__WEBPACK_IMPORTED_MODULE_3__.newTxSigningService)(readyDriver, [Object.assign(Object.assign({}, clause), { abi: coder.definition })]);\n        }\n    };\n}\nfunction newEvent(readyDriver, addr, coder) {\n    const encode = (indexed) => {\n        const topics = coder.encode(indexed);\n        return {\n            address: addr,\n            topic0: topics[0] || undefined,\n            topic1: topics[1] || undefined,\n            topic2: topics[2] || undefined,\n            topic3: topics[3] || undefined,\n            topic4: topics[4] || undefined\n        };\n    };\n    return {\n        asCriteria: indexed => {\n            try {\n                return encode(indexed);\n            }\n            catch (err) {\n                throw new _rules__WEBPACK_IMPORTED_MODULE_0__.BadParameter(`arg0: can not be encoded (${err.message})`);\n            }\n        },\n        filter: (indexed) => {\n            _rules__WEBPACK_IMPORTED_MODULE_0__.test(indexed, [{}], 'arg0');\n            if (indexed.length === 0) {\n                indexed = [{}];\n            }\n            const criteria = indexed.map((o, i) => {\n                try {\n                    return encode(o);\n                }\n                catch (err) {\n                    throw new _rules__WEBPACK_IMPORTED_MODULE_0__.BadParameter(`arg0.#${i}: can not be encoded (${err.message})`);\n                }\n            });\n            const filter = (0,_filter__WEBPACK_IMPORTED_MODULE_4__.newFilter)(readyDriver, 'event', criteria);\n            return {\n                range(range) {\n                    filter.range(range);\n                    return this;\n                },\n                order(order) {\n                    filter.order(order);\n                    return this;\n                },\n                cache(hints) {\n                    filter.cache(hints);\n                    return this;\n                },\n                apply(offset, limit) {\n                    return filter.apply(offset, limit)\n                        .then(events => events.map(event => {\n                        const decoded = coder.decode(event.data, event.topics);\n                        return Object.assign(Object.assign({}, event), { decoded });\n                    }));\n                }\n            };\n        }\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC12aXNpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FjY291bnQtdmlzaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ2pDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDcEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQzlDLE9BQU8sS0FBSyxDQUFDLE1BQU0sU0FBUyxDQUFBO0FBRTVCLE1BQU0sVUFBVSxpQkFBaUIsQ0FDN0IsV0FBbUMsRUFDbkMsSUFBWTtJQUVaLE9BQU87UUFDSCxJQUFJLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQSxDQUFDLENBQUM7UUFDN0IsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUNOLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUMvRCxDQUFDO1FBQ0QsT0FBTyxFQUFFLEdBQUcsRUFBRTtZQUNWLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM1RCxDQUFDO1FBQ0QsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ2QsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDbEQsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMs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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/account-visitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/block-visitor.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/block-visitor.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newBlockVisitor: () => (/* binding */ newBlockVisitor)\n/* harmony export */ });\nfunction newBlockVisitor(driver, revision) {\n    return {\n        get revision() { return revision; },\n        get: () => driver.getBlock(revision)\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stdmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ibG9jay12aXNpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxlQUFlLENBQzNCLE1BQXFCLEVBQ3JCLFFBQXlCO0lBR3pCLE9BQU87UUFDSCxJQUFJLFFBQVEsS0FBSyxPQUFPLFFBQVEsQ0FBQSxDQUFDLENBQUM7UUFDbEMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO0tBQ3ZDLENBQUE7QUFDTCxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vYmxvY2stdmlzaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVyZWF2ZW1lbnQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vYmxvY2stdmlzaXRvci5qcz9mNDI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBuZXdCbG9ja1Zpc2l0b3IoZHJpdmVyLCByZXZpc2lvbikge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldCByZXZpc2lvbigpIHsgcmV0dXJuIHJldmlzaW9uOyB9LFxuICAgICAgICBnZXQ6ICgpID0+IGRyaXZlci5nZXRCbG9jayhyZXZpc2lvbilcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWW14dlkyc3RkbWx6YVhSdmNpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTlpYkc5amF5MTJhWE5wZEc5eUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEUxQlFVMHNWVUZCVlN4bFFVRmxMRU5CUXpOQ0xFMUJRWEZDTEVWQlEzSkNMRkZCUVhsQ08wbEJSM3BDTEU5QlFVODdVVUZEU0N4SlFVRkpMRkZCUVZFc1MwRkJTeXhQUVVGUExGRkJRVkVzUTBGQlFTeERRVUZETEVOQlFVTTdVVUZEYkVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1VVRkJVU3hEUVVGRE8wdEJRM1pETEVOQlFVRTdRVUZEVEN4RFFVRkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/block-visitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/driver-guard.js":
/*!********************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/driver-guard.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newDriverGuard: () => (/* binding */ newDriverGuard)\n/* harmony export */ });\n/* harmony import */ var validator_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! validator-ts */ \"(ssr)/./node_modules/validator-ts/dist/index.js\");\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\");\n\n\nfunction newDriverGuard(driver, errHandler) {\n    const test = (obj, scheme, path) => {\n        try {\n            validator_ts__WEBPACK_IMPORTED_MODULE_0__.validate(obj, scheme, path);\n        }\n        catch (err) {\n            if (errHandler) {\n                errHandler(err);\n            }\n            else {\n                // tslint:disable-next-line:no-console\n                console.warn(`Connex-Driver[MALFORMED RESPONSE]: ${err.message}`);\n            }\n        }\n        return obj;\n    };\n    const genesis = test(driver.genesis, blockScheme, 'genesis');\n    return {\n        genesis,\n        get head() {\n            return test(driver.head, headScheme, 'head');\n        },\n        pollHead() {\n            return driver.pollHead()\n                .then(h => test(h, headScheme, 'getHead()'));\n        },\n        getBlock(revision) {\n            return driver.getBlock(revision)\n                .then(b => b ? test(b, blockScheme, 'getBlock()') : b);\n        },\n        getTransaction(id, allowPending) {\n            return driver.getTransaction(id, allowPending)\n                .then(tx => tx ? test(tx, txScheme, 'getTransaction()') : tx);\n        },\n        getReceipt(id) {\n            return driver.getReceipt(id)\n                .then(r => r ? test(r, receiptScheme, 'getReceipt()') : r);\n        },\n        getAccount(addr, revision) {\n            return driver.getAccount(addr, revision)\n                .then(a => test(a, {\n                balance: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n                energy: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n                hasCode: _rules__WEBPACK_IMPORTED_MODULE_1__.bool\n            }, 'getAccount()'));\n        },\n        getCode(addr, revision) {\n            return driver.getCode(addr, revision)\n                .then(c => test(c, {\n                code: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes\n            }, 'getCode()'));\n        },\n        getStorage(addr, key, revision) {\n            return driver.getStorage(addr, key, revision)\n                .then(s => test(s, {\n                value: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32\n            }, 'getStorage()'));\n        },\n        explain(arg, revision) {\n            return driver.explain(arg, revision)\n                .then(r => test(r, [vmOutputScheme], 'explain()'));\n        },\n        filterEventLogs(arg) {\n            return driver.filterEventLogs(arg)\n                .then(r => test(r, [eventWithMetaScheme], 'filterEventLogs()'));\n        },\n        filterTransferLogs(arg) {\n            return driver.filterTransferLogs(arg)\n                .then(r => test(r, [transferWithMetaScheme], 'filterTransferLogs()'));\n        },\n        signTx(msg, options) {\n            return driver.signTx(msg, options)\n                .then(r => test(r, {\n                txid: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n                signer: _rules__WEBPACK_IMPORTED_MODULE_1__.address\n            }, 'signTx()'));\n        },\n        signCert(msg, options) {\n            return driver.signCert(msg, options)\n                .then(r => test(r, {\n                annex: {\n                    domain: _rules__WEBPACK_IMPORTED_MODULE_1__.string,\n                    timestamp: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n                    signer: _rules__WEBPACK_IMPORTED_MODULE_1__.address\n                },\n                signature: v => _rules__WEBPACK_IMPORTED_MODULE_1__.isHexBytes(v, 65) ? '' : 'expected 65 bytes'\n            }, 'signCert()'));\n        }\n    };\n}\nconst headScheme = {\n    id: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    number: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n    timestamp: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    parentID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    txsFeatures: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.uint32),\n    gasLimit: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    baseFeePerGas: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.hexString)\n};\nconst blockScheme = {\n    id: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    number: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n    size: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n    parentID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    timestamp: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    gasLimit: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    beneficiary: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    gasUsed: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    totalScore: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    txsRoot: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    txsFeatures: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.uint32),\n    stateRoot: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    receiptsRoot: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    signer: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    com: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.bool),\n    isFinalized: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.bool),\n    isTrunk: _rules__WEBPACK_IMPORTED_MODULE_1__.bool,\n    baseFeePerGas: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.hexString),\n    transactions: [_rules__WEBPACK_IMPORTED_MODULE_1__.bytes32]\n};\nconst txScheme = {\n    id: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    type: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.uint8),\n    chainTag: _rules__WEBPACK_IMPORTED_MODULE_1__.uint8,\n    blockRef: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes8,\n    expiration: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n    gasPriceCoef: _rules__WEBPACK_IMPORTED_MODULE_1__.uint8,\n    maxPriorityFeePerGas: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.hexString),\n    maxFeePerGas: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.hexString),\n    gas: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    origin: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    delegator: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable(validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.address)),\n    nonce: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n    dependsOn: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable(_rules__WEBPACK_IMPORTED_MODULE_1__.bytes32),\n    size: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n    clauses: [{\n            to: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable(_rules__WEBPACK_IMPORTED_MODULE_1__.address),\n            value: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n            data: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes\n        }],\n    meta: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable({\n        blockID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n        blockNumber: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n        blockTimestamp: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64\n    })\n};\nconst logMetaScheme = {\n    blockID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    blockNumber: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n    blockTimestamp: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    txID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n    txOrigin: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    clauseIndex: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32\n};\nconst eventScheme = {\n    address: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    topics: [_rules__WEBPACK_IMPORTED_MODULE_1__.bytes32],\n    data: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes,\n};\nconst eventWithMetaScheme = Object.assign(Object.assign({}, eventScheme), { meta: logMetaScheme });\nconst transferScheme = {\n    sender: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    recipient: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    amount: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n};\nconst transferWithMetaScheme = Object.assign(Object.assign({}, transferScheme), { meta: logMetaScheme });\nconst receiptScheme = {\n    type: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_1__.uint8),\n    gasUsed: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    gasPayer: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n    paid: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n    reward: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n    reverted: _rules__WEBPACK_IMPORTED_MODULE_1__.bool,\n    outputs: [{\n            contractAddress: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable(_rules__WEBPACK_IMPORTED_MODULE_1__.address),\n            events: [eventScheme],\n            transfers: [transferScheme]\n        }],\n    meta: {\n        blockID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n        blockNumber: _rules__WEBPACK_IMPORTED_MODULE_1__.uint32,\n        blockTimestamp: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n        txID: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes32,\n        txOrigin: _rules__WEBPACK_IMPORTED_MODULE_1__.address\n    }\n};\nconst vmOutputScheme = {\n    data: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes,\n    vmError: _rules__WEBPACK_IMPORTED_MODULE_1__.string,\n    gasUsed: _rules__WEBPACK_IMPORTED_MODULE_1__.uint64,\n    reverted: _rules__WEBPACK_IMPORTED_MODULE_1__.bool,\n    revertReason: () => '',\n    events: [{\n            address: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n            topics: [_rules__WEBPACK_IMPORTED_MODULE_1__.bytes32],\n            data: _rules__WEBPACK_IMPORTED_MODULE_1__.bytes,\n        }],\n    transfers: [{\n            sender: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n            recipient: _rules__WEBPACK_IMPORTED_MODULE_1__.address,\n            amount: _rules__WEBPACK_IMPORTED_MODULE_1__.hexString,\n        }]\n};\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/driver-guard.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/explainer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/explainer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newExplainer: () => (/* binding */ newExplainer)\n/* harmony export */ });\n/* harmony import */ var _revert_reason__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./revert-reason */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/revert-reason.js\");\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\nfunction newExplainer(readyDriver, clauses) {\n    const opts = {};\n    let cacheHints;\n    return {\n        caller(addr) {\n            opts.caller = _rules__WEBPACK_IMPORTED_MODULE_1__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_1__.address, 'arg0').toLowerCase();\n            return this;\n        },\n        gas(gas) {\n            opts.gas = _rules__WEBPACK_IMPORTED_MODULE_1__.test(gas, _rules__WEBPACK_IMPORTED_MODULE_1__.uint64, 'arg0');\n            return this;\n        },\n        gasPrice(gp) {\n            opts.gasPrice = _rules__WEBPACK_IMPORTED_MODULE_1__.test(gp, _rules__WEBPACK_IMPORTED_MODULE_1__.bigInt, 'arg0').toString().toLowerCase();\n            return this;\n        },\n        gasPayer(addr) {\n            opts.gasPayer = _rules__WEBPACK_IMPORTED_MODULE_1__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_1__.address, 'arg0').toLowerCase();\n            return this;\n        },\n        cache(hints) {\n            cacheHints = _rules__WEBPACK_IMPORTED_MODULE_1__.test(hints, [_rules__WEBPACK_IMPORTED_MODULE_1__.address], 'arg0').map(t => t.toLowerCase());\n            return this;\n        },\n        execute() {\n            const transformedClauses = clauses.map(c => {\n                return {\n                    to: c.to ? c.to.toLowerCase() : null,\n                    value: new (bignumber_js__WEBPACK_IMPORTED_MODULE_0___default())(c.value).toString(10),\n                    data: (c.data || '0x').toLowerCase()\n                };\n            });\n            return readyDriver.then(d => d.explain(Object.assign({ clauses: transformedClauses }, opts), d.head.id, cacheHints))\n                .then(outputs => {\n                return outputs.map(o => {\n                    if (o.reverted) {\n                        const revertReason = (0,_revert_reason__WEBPACK_IMPORTED_MODULE_2__.decodeRevertReason)(o.data);\n                        return Object.assign(Object.assign({}, o), { revertReason });\n                    }\n                    return o;\n                });\n            });\n        }\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwbGFpbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4cGxhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNwRCxPQUFPLEtBQUssQ0FBQyxNQUFNLFNBQVMsQ0FBQTtBQUM1QixPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUE7QUFFcEMsTUFBTSxVQUFVLFlBQVksQ0FBQyxXQUFtQyxFQUFFLE9BQTJCO0lBQ3pGLE1BQU0sSUFBSSxHQUtOLEVBQUUsQ0FBQTtJQUNOLElBQUksVUFBZ0MsQ0FBQTtJQUVwQyxPQUFPO1FBQ0gsTUFBTSxDQUFDLElBQUk7WUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDM0QsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsR0FBRyxDQUFDLEdBQUc7WUFDSCxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUE7WUFDeEMsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsUUFBUSxDQUFDLEVBQUU7WUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDckUsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsUUFBUSxDQUFDLElBQUk7WUFDVCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDN0QsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsS0FBSyxDQUFDLEtBQUs7WUFDUCxVQUFVLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUE7WUFDekUsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsT0FBTztZQUNILE1BQU0sa0JBQWtCLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDdkMsT0FBTztvQkFDSCxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtvQkFDcEMsS0FBSyxFQUFFLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO29CQUMxQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRTtpQkFDdkMsQ0FBQTtZQUNMLENBQUMsQ0FBQyxDQUFBO1lBRUYsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8saUJBRTlCLE9BQU8sRUFBRSxrQkFBa0IsSUFDeEIsSUFBSSxHQUVYLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2lCQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1osT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNuQixJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUU7d0JBQ1osTUFBTSxZQUFZLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO3dCQUMvQyx1Q0FBWSxDQUFDLEtBQUUsWUFBWSxJQUFFO3FCQUNoQztvQkFDRCxPQUFPLENBQUMsQ0FBQTtnQkFDWixDQUFDLENBQUMsQ0FBQTtZQUNOLENBQUMsQ0FBQyxDQUFBO1FBQ1YsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vZXhwbGFpbmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFEO0FBQ3hCO0FBQ1E7QUFDOUI7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix3Q0FBTSxPQUFPLDJDQUFTO0FBQ2hEO0FBQ0EsU0FBUztBQUNUO0FBQ0EsdUJBQXVCLHdDQUFNLE1BQU0sMENBQVE7QUFDM0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw0QkFBNEIsd0NBQU0sS0FBSywwQ0FBUTtBQUMvQztBQUNBLFNBQVM7QUFDVDtBQUNBLDRCQUE0Qix3Q0FBTSxPQUFPLDJDQUFTO0FBQ2xEO0FBQ0EsU0FBUztBQUNUO0FBQ0EseUJBQXlCLHdDQUFNLFNBQVMsMkNBQVM7QUFDakQ7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscURBQVM7QUFDeEM7QUFDQTtBQUNBLGFBQWE7QUFDYixtRUFBbUUsNkJBQTZCO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxrRUFBa0I7QUFDL0QsNkRBQTZELFFBQVEsY0FBYztBQUNuRjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9jb25uZXgtZnJhbWV3b3JrL2VzbS9leHBsYWluZXIuanM/OTAzNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWNvZGVSZXZlcnRSZWFzb24gfSBmcm9tICcuL3JldmVydC1yZWFzb24nO1xuaW1wb3J0ICogYXMgUiBmcm9tICcuL3J1bGVzJztcbmltcG9ydCBCaWdOdW1iZXIgZnJvbSAnYmlnbnVtYmVyLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBuZXdFeHBsYWluZXIocmVhZHlEcml2ZXIsIGNsYXVzZXMpIHtcbiAgICBjb25zdCBvcHRzID0ge307XG4gICAgbGV0IGNhY2hlSGludHM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2FsbGVyKGFkZHIpIHtcbiAgICAgICAgICAgIG9wdHMuY2FsbGVyID0gUi50ZXN0KGFkZHIsIFIuYWRkcmVzcywgJ2FyZzAnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGdhcyhnYXMpIHtcbiAgICAgICAgICAgIG9wdHMuZ2FzID0gUi50ZXN0KGdhcywgUi51aW50NjQsICdhcmcwJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZ2FzUHJpY2UoZ3ApIHtcbiAgICAgICAgICAgIG9wdHMuZ2FzUHJpY2UgPSBSLnRlc3QoZ3AsIFIuYmlnSW50LCAnYXJnMCcpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBnYXNQYXllcihhZGRyKSB7XG4gICAgICAgICAgICBvcHRzLmdhc1BheWVyID0gUi50ZXN0KGFkZHIsIFIuYWRkcmVzcywgJ2FyZzAnKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGNhY2hlKGhpbnRzKSB7XG4gICAgICAgICAgICBjYWNoZUhpbnRzID0gUi50ZXN0KGhpbnRzLCBbUi5hZGRyZXNzXSwgJ2FyZzAnKS5tYXAodCA9PiB0LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGV4ZWN1dGUoKSB7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZENsYXVzZXMgPSBjbGF1c2VzLm1hcChjID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0bzogYy50byA/IGMudG8udG9Mb3dlckNhc2UoKSA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXcgQmlnTnVtYmVyKGMudmFsdWUpLnRvU3RyaW5nKDEwKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogKGMuZGF0YSB8fCAnMHgnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlYWR5RHJpdmVyLnRoZW4oZCA9PiBkLmV4cGxhaW4oT2JqZWN0LmFzc2lnbih7IGNsYXVzZXM6IHRyYW5zZm9ybWVkQ2xhdXNlcyB9LCBvcHRzKSwgZC5oZWFkLmlkLCBjYWNoZUhpbnRzKSlcbiAgICAgICAgICAgICAgICAudGhlbihvdXRwdXRzID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0cy5tYXAobyA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvLnJldmVydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXZlcnRSZWFzb24gPSBkZWNvZGVSZXZlcnRSZWFzb24oby5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG8pLCB7IHJldmVydFJlYXNvbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpYaHdiR0ZwYm1WeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMlY0Y0d4aGFXNWxjaTUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeFBRVUZQTEVWQlFVVXNhMEpCUVd0Q0xFVkJRVVVzVFVGQlRTeHBRa0ZCYVVJc1EwRkJRVHRCUVVOd1JDeFBRVUZQTEV0QlFVc3NRMEZCUXl4TlFVRk5MRk5CUVZNc1EwRkJRVHRCUVVNMVFpeFBRVUZQTEZOQlFWTXNUVUZCVFN4alFVRmpMRU5CUVVFN1FVRkZjRU1zVFVGQlRTeFZRVUZWTEZsQlFWa3NRMEZCUXl4WFFVRnRReXhGUVVGRkxFOUJRVEpDTzBsQlEzcEdMRTFCUVUwc1NVRkJTU3hIUVV0T0xFVkJRVVVzUTBGQlFUdEpRVU5PTEVsQlFVa3NWVUZCWjBNc1EwRkJRVHRKUVVWd1F5eFBRVUZQTzFGQlEwZ3NUVUZCVFN4RFFVRkRMRWxCUVVrN1dVRkRVQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVUU3V1VGRE0wUXNUMEZCVHl4SlFVRkpMRU5CUVVFN1VVRkRaaXhEUVVGRE8xRkJRMFFzUjBGQlJ5eERRVUZETEVkQlFVYzdXVUZEU0N4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVRTdXVUZEZUVNc1QwRkJUeXhKUVVGSkxFTkJRVUU3VVVGRFppeERRVUZETzFGQlEwUXNVVUZCVVN4RFFVRkRMRVZCUVVVN1dVRkRVQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVRTdXVUZEY2tVc1QwRkJUeXhKUVVGSkxFTkJRVUU3VVVGRFppeERRVUZETzFGQlEwUXNVVUZCVVN4RFFVRkRMRWxCUVVrN1dVRkRWQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVUU3V1VGRE4wUXNUMEZCVHl4SlFVRkpMRU5CUVVFN1VVRkRaaXhEUVVGRE8xRkJRMFFzUzBGQlN5eERRVUZETEV0QlFVczdXVUZEVUN4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVFN1dVRkRla1VzVDBGQlR5eEpRVUZKTEVOQlFVRTdVVUZEWml4RFFVRkRPMUZCUTBRc1QwRkJUenRaUVVOSUxFMUJRVTBzYTBKQlFXdENMRWRCUVVjc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0blFrRkRka01zVDBGQlR6dHZRa0ZEU0N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1R0dlFrRkRjRU1zUzBGQlN5eEZRVUZGTEVsQlFVa3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRPMjlDUVVNeFF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEZkQlFWY3NSVUZCUlR0cFFrRkRka01zUTBGQlFUdFpRVU5NTEVOQlFVTXNRMEZCUXl4RFFVRkJPMWxCUlVZc1QwRkJUeXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzYVVKQlJUbENMRTlCUVU4c1JVRkJSU3hyUWtGQmEwSXNTVUZEZUVJc1NVRkJTU3hIUVVWWUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGRE8ybENRVU4wUWl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3WjBKQlExb3NUMEZCVHl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzI5Q1FVTnVRaXhKUVVGSkxFTkJRVU1zUTBGQlF5eFJRVUZSTEVWQlFVVTdkMEpCUTFvc1RVRkJUU3haUVVGWkxFZEJRVWNzYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzNkQ1FVTXZReXgxUTBGQldTeERRVUZETEV0QlFVVXNXVUZCV1N4SlFVRkZPM0ZDUVVOb1F6dHZRa0ZEUkN4UFFVRlBMRU5CUVVNc1EwRkJRVHRuUWtGRFdpeERRVUZETEVOQlFVTXNRMEZCUVR0WlFVTk9MRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRMVlzUTBGQlF6dExRVU5LTEVOQlFVRTdRVUZEVEN4RFFVRkRJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/explainer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/filter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/filter.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newFilter: () => (/* binding */ newFilter)\n/* harmony export */ });\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\");\n\nconst MAX_LIMIT = 256;\nfunction newFilter(readyDriver, kind, criteria) {\n    const filterBody = {\n        range: {\n            unit: 'block',\n            from: 0,\n            to: Math.pow(2, 32) - 1\n        },\n        options: {\n            offset: 0,\n            limit: 10\n        },\n        criteriaSet: criteria,\n        order: 'asc'\n    };\n    let cacheHints;\n    return {\n        range(range) {\n            _rules__WEBPACK_IMPORTED_MODULE_0__.test(range, {\n                unit: v => (v === 'block' || v === 'time') ? '' : `expected 'block' or 'time'`,\n                from: _rules__WEBPACK_IMPORTED_MODULE_0__.uint64,\n                to: _rules__WEBPACK_IMPORTED_MODULE_0__.uint64\n            }, 'arg0');\n            _rules__WEBPACK_IMPORTED_MODULE_0__.ensure(range.from <= range.to, 'arg0.from: expected <= arg0.to');\n            filterBody.range = Object.assign({}, range);\n            return this;\n        },\n        order(order) {\n            _rules__WEBPACK_IMPORTED_MODULE_0__.ensure(order === 'asc' || order === 'desc', `arg0: expected 'asc' or 'desc'`);\n            filterBody.order = order;\n            return this;\n        },\n        cache(hints) {\n            cacheHints = _rules__WEBPACK_IMPORTED_MODULE_0__.test(hints, [_rules__WEBPACK_IMPORTED_MODULE_0__.address], 'arg0').map(t => t.toLowerCase());\n            return this;\n        },\n        apply(offset, limit) {\n            _rules__WEBPACK_IMPORTED_MODULE_0__.test(offset, _rules__WEBPACK_IMPORTED_MODULE_0__.uint64, 'arg0');\n            _rules__WEBPACK_IMPORTED_MODULE_0__.ensure(limit >= 0 && limit <= MAX_LIMIT && Number.isInteger(limit), `arg1: expected unsigned integer <= ${MAX_LIMIT}`);\n            filterBody.options.offset = offset;\n            filterBody.options.limit = limit;\n            if (kind === 'transfer') {\n                return readyDriver.then(d => d.filterTransferLogs(filterBody, cacheHints));\n            }\n            else {\n                return readyDriver.then(d => d.filterEventLogs(filterBody, cacheHints));\n            }\n        }\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssQ0FBQyxNQUFNLFNBQVMsQ0FBQTtBQUU1QixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUE7QUFFckIsTUFBTSxVQUFVLFNBQVMsQ0FDckIsV0FBbUMsRUFDbkMsSUFBTyxFQUNQLFFBQTBDO0lBRzFDLE1BQU0sVUFBVSxHQUFHO1FBQ2YsS0FBSyxFQUFFO1lBQ0gsSUFBSSxFQUFFLE9BQU87WUFDYixJQUFJLEVBQUUsQ0FBQztZQUNQLEVBQUUsRUFBRSxTQUFBLENBQUMsRUFBSSxFQUFFLENBQUEsR0FBRyxDQUFDO1NBQ2xCO1FBQ0QsT0FBTyxFQUFFO1lBQ0wsTUFBTSxFQUFFLENBQUM7WUFDVCxLQUFLLEVBQUUsRUFBRTtTQUNaO1FBQ0QsV0FBVyxFQUFFLFFBQVE7UUFDckIsS0FBSyxFQUFFLEtBQUs7S0FDZixDQUFBO0lBRUQsSUFBSSxVQUFnQyxDQUFBO0lBRXBDLE9BQU87UUFDSCxLQUFLLENBQUMsS0FBSztZQUNQLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsNEJBQTRCO2dCQUM5RSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU07Z0JBQ2QsRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNO2FBQ2YsRUFBRSxNQUFNLENBQUMsQ0FBQTtZQUNWLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLGdDQUFnQyxDQUFDLENBQUE7WUFFbEUsVUFBVSxDQUFDLEtBQUsscUJBQVEsS0FBSyxDQUFFLENBQUE7WUFDL0IsT0FBTyxJQUFJLENBQUE7UUFDZixDQUFDO1FBQ0QsS0FBSyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksS0FBSyxLQUFLLE1BQU0sRUFDeEMsZ0NBQWdDLENBQUMsQ0FBQTtZQUNyQyxVQUFVLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtZQUN4QixPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFDRCxLQUFLLENBQUMsS0FBSztZQUNQLFVBQVUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQTtZQUN6RSxPQUFPLElBQUksQ0FBQTtRQUNmLENBQUM7UUFDRCxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUs7WUFDZixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1lBQ2hDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ2hFLHNDQUFzQyxTQUFTLEVBQUUsQ0FBQyxDQUFBO1lBRXRELFVBQVUsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtZQUNsQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7WUFFaEMsSUFBSSxJQUFJLEtBQUssVUFBVSxFQUFFO2dCQUNyQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsVUFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO2FBQ3pGO2lCQUFNO2dCQUNILE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFBO2FBQ3RGO1FBQ0wsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vZmlsdGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTZCO0FBQzdCO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdDQUFNO0FBQ2xCO0FBQ0Esc0JBQXNCLDBDQUFRO0FBQzlCLG9CQUFvQiwwQ0FBUTtBQUM1QixhQUFhO0FBQ2IsWUFBWSwwQ0FBUTtBQUNwQiwrQ0FBK0M7QUFDL0M7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxZQUFZLDBDQUFRO0FBQ3BCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSx5QkFBeUIsd0NBQU0sU0FBUywyQ0FBUztBQUNqRDtBQUNBLFNBQVM7QUFDVDtBQUNBLFlBQVksd0NBQU0sU0FBUywwQ0FBUTtBQUNuQyxZQUFZLDBDQUFRLG9HQUFvRyxVQUFVO0FBQ2xJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9jb25uZXgtZnJhbWV3b3JrL2VzbS9maWx0ZXIuanM/ZTI5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSIGZyb20gJy4vcnVsZXMnO1xuY29uc3QgTUFYX0xJTUlUID0gMjU2O1xuZXhwb3J0IGZ1bmN0aW9uIG5ld0ZpbHRlcihyZWFkeURyaXZlciwga2luZCwgY3JpdGVyaWEpIHtcbiAgICBjb25zdCBmaWx0ZXJCb2R5ID0ge1xuICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgdW5pdDogJ2Jsb2NrJyxcbiAgICAgICAgICAgIGZyb206IDAsXG4gICAgICAgICAgICB0bzogTWF0aC5wb3coMiwgMzIpIC0gMVxuICAgICAgICB9LFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICBsaW1pdDogMTBcbiAgICAgICAgfSxcbiAgICAgICAgY3JpdGVyaWFTZXQ6IGNyaXRlcmlhLFxuICAgICAgICBvcmRlcjogJ2FzYydcbiAgICB9O1xuICAgIGxldCBjYWNoZUhpbnRzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlKHJhbmdlKSB7XG4gICAgICAgICAgICBSLnRlc3QocmFuZ2UsIHtcbiAgICAgICAgICAgICAgICB1bml0OiB2ID0+ICh2ID09PSAnYmxvY2snIHx8IHYgPT09ICd0aW1lJykgPyAnJyA6IGBleHBlY3RlZCAnYmxvY2snIG9yICd0aW1lJ2AsXG4gICAgICAgICAgICAgICAgZnJvbTogUi51aW50NjQsXG4gICAgICAgICAgICAgICAgdG86IFIudWludDY0XG4gICAgICAgICAgICB9LCAnYXJnMCcpO1xuICAgICAgICAgICAgUi5lbnN1cmUocmFuZ2UuZnJvbSA8PSByYW5nZS50bywgJ2FyZzAuZnJvbTogZXhwZWN0ZWQgPD0gYXJnMC50bycpO1xuICAgICAgICAgICAgZmlsdGVyQm9keS5yYW5nZSA9IE9iamVjdC5hc3NpZ24oe30sIHJhbmdlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBvcmRlcihvcmRlcikge1xuICAgICAgICAgICAgUi5lbnN1cmUob3JkZXIgPT09ICdhc2MnIHx8IG9yZGVyID09PSAnZGVzYycsIGBhcmcwOiBleHBlY3RlZCAnYXNjJyBvciAnZGVzYydgKTtcbiAgICAgICAgICAgIGZpbHRlckJvZHkub3JkZXIgPSBvcmRlcjtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBjYWNoZShoaW50cykge1xuICAgICAgICAgICAgY2FjaGVIaW50cyA9IFIudGVzdChoaW50cywgW1IuYWRkcmVzc10sICdhcmcwJykubWFwKHQgPT4gdC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseShvZmZzZXQsIGxpbWl0KSB7XG4gICAgICAgICAgICBSLnRlc3Qob2Zmc2V0LCBSLnVpbnQ2NCwgJ2FyZzAnKTtcbiAgICAgICAgICAgIFIuZW5zdXJlKGxpbWl0ID49IDAgJiYgbGltaXQgPD0gTUFYX0xJTUlUICYmIE51bWJlci5pc0ludGVnZXIobGltaXQpLCBgYXJnMTogZXhwZWN0ZWQgdW5zaWduZWQgaW50ZWdlciA8PSAke01BWF9MSU1JVH1gKTtcbiAgICAgICAgICAgIGZpbHRlckJvZHkub3B0aW9ucy5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICBmaWx0ZXJCb2R5Lm9wdGlvbnMubGltaXQgPSBsaW1pdDtcbiAgICAgICAgICAgIGlmIChraW5kID09PSAndHJhbnNmZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlYWR5RHJpdmVyLnRoZW4oZCA9PiBkLmZpbHRlclRyYW5zZmVyTG9ncyhmaWx0ZXJCb2R5LCBjYWNoZUhpbnRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVhZHlEcml2ZXIudGhlbihkID0+IGQuZmlsdGVyRXZlbnRMb2dzKGZpbHRlckJvZHksIGNhY2hlSGludHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2labWxzZEdWeUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpSXNJbk52ZFhKalpYTWlPbHNpTGk0dmMzSmpMMlpwYkhSbGNpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lRVUZCUVN4UFFVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxGTkJRVk1zUTBGQlFUdEJRVVUxUWl4TlFVRk5MRk5CUVZNc1IwRkJSeXhIUVVGSExFTkJRVUU3UVVGRmNrSXNUVUZCVFN4VlFVRlZMRk5CUVZNc1EwRkRja0lzVjBGQmJVTXNSVUZEYmtNc1NVRkJUeXhGUVVOUUxGRkJRVEJETzBsQlJ6RkRMRTFCUVUwc1ZVRkJWU3hIUVVGSE8xRkJRMllzUzBGQlN5eEZRVUZGTzFsQlEwZ3NTVUZCU1N4RlFVRkZMRTlCUVU4N1dVRkRZaXhKUVVGSkxFVkJRVVVzUTBGQlF6dFpRVU5RTEVWQlFVVXNSVUZCUlN4VFFVRkJMRU5CUVVNc1JVRkJTU3hGUVVGRkxFTkJRVUVzUjBGQlJ5eERRVUZETzFOQlEyeENPMUZCUTBRc1QwRkJUeXhGUVVGRk8xbEJRMHdzVFVGQlRTeEZRVUZGTEVOQlFVTTdXVUZEVkN4TFFVRkxMRVZCUVVVc1JVRkJSVHRUUVVOYU8xRkJRMFFzVjBGQlZ5eEZRVUZGTEZGQlFWRTdVVUZEY2tJc1MwRkJTeXhGUVVGRkxFdEJRVXM3UzBGRFppeERRVUZCTzBsQlJVUXNTVUZCU1N4VlFVRm5ReXhEUVVGQk8wbEJSWEJETEU5QlFVODdVVUZEU0N4TFFVRkxMRU5CUVVNc1MwRkJTenRaUVVOUUxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZPMmRDUVVOV0xFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNORUpCUVRSQ08yZENRVU01UlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTA3WjBKQlEyUXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTk8yRkJRMllzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0WlFVTldMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVNc1JVRkJSU3hGUVVGRkxHZERRVUZuUXl4RFFVRkRMRU5CUVVFN1dVRkZiRVVzVlVGQlZTeERRVUZETEV0QlFVc3NjVUpCUVZFc1MwRkJTeXhEUVVGRkxFTkJRVUU3V1VGREwwSXNUMEZCVHl4SlFVRkpMRU5CUVVFN1VVRkRaaXhEUVVGRE8xRkJRMFFzUzBGQlN5eERRVUZETEV0QlFVczdXVUZEVUN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUzBGQlN5eExRVUZMTEVsQlFVa3NTMEZCU3l4TFFVRkxMRTFCUVUwc1JVRkRlRU1zWjBOQlFXZERMRU5CUVVNc1EwRkJRVHRaUVVOeVF5eFZRVUZWTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRVHRaUVVONFFpeFBRVUZQTEVsQlFVa3NRMEZCUVR0UlFVTm1MRU5CUVVNN1VVRkRSQ3hMUVVGTExFTkJRVU1zUzBGQlN6dFpRVU5RTEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNRMEZCUVR0WlFVTjZSU3hQUVVGUExFbEJRVWtzUTBGQlFUdFJRVU5tTEVOQlFVTTdVVUZEUkN4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFdEJRVXM3V1VGRFppeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMWxCUTJoRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFbEJRVWtzVTBGQlV5eEpRVUZKTEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRMmhGTEhORFFVRnpReXhUUVVGVExFVkJRVVVzUTBGQlF5eERRVUZCTzFsQlJYUkVMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUVR0WlFVTnNReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVFN1dVRkZhRU1zU1VGQlNTeEpRVUZKTEV0QlFVc3NWVUZCVlN4RlFVRkZPMmRDUVVOeVFpeFBRVUZQTEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zVlVGQmFVSXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGQk8yRkJRM3BHTzJsQ1FVRk5PMmRDUVVOSUxFOUJRVThzVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eGxRVUZsTEVOQlFVTXNWVUZCYVVJc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZCTzJGQlEzUkdPMUZCUTB3c1EwRkJRenRMUVVOS0xFTkJRVUU3UVVGRFRDeERRVUZESW4wPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/head-tracker.js":
/*!********************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/head-tracker.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newHeadTracker: () => (/* binding */ newHeadTracker)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst checkpointInterval = 180;\nfunction newHeadTracker(driver) {\n    let head = Object.assign({}, driver.head);\n    let finalized = driver.genesis.id;\n    let resolvers = [];\n    void (() => __awaiter(this, void 0, void 0, function* () {\n        for (;;) {\n            try {\n                const newHead = yield driver.pollHead();\n                if (newHead.id !== head.id && newHead.number >= head.number) {\n                    if (head.number === 0 || (newHead.number + 1) % checkpointInterval === 0) {\n                        try {\n                            const finalizedBlk = yield driver.getBlock('finalized');\n                            if (finalizedBlk && finalizedBlk.id != finalized) {\n                                finalized = finalizedBlk.id;\n                            }\n                        }\n                        catch (_a) {\n                            void 0;\n                        }\n                    }\n                    head = Object.assign({}, newHead);\n                    const resolversCopy = resolvers;\n                    resolvers = [];\n                    resolversCopy.forEach(r => r(newHead));\n                }\n                else {\n                    yield new Promise(resolve => setTimeout(resolve, 1 * 1000));\n                }\n            }\n            catch (_b) {\n                // rejection from driver.getHead means driver closed\n                break;\n            }\n        }\n    }))();\n    const genesisTs = driver.genesis.timestamp;\n    return {\n        get head() { return head; },\n        get progress() {\n            const nowTsMs = Date.now();\n            const headTsMs = head.timestamp * 1000;\n            if (nowTsMs - headTsMs < 30 * 1000) {\n                return 1;\n            }\n            const genesisTsMs = genesisTs * 1000;\n            const p = (headTsMs - genesisTsMs) / (nowTsMs - genesisTsMs);\n            return p < 0 ? NaN : p;\n        },\n        get finalized() { return finalized; },\n        ticker: () => {\n            let lastHeadId = head.id;\n            return {\n                next: () => {\n                    return new Promise(resolve => {\n                        if (lastHeadId !== head.id) {\n                            return resolve(Object.assign({}, head));\n                        }\n                        resolvers.push(newHead => {\n                            resolve(Object.assign({}, newHead));\n                        });\n                    }).then(h => {\n                        lastHeadId = h.id;\n                        return h;\n                    });\n                }\n            };\n        }\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZC10cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2hlYWQtdHJhY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSw2RUFBNkU7QUFDN0UsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUE7QUFFOUIsTUFBTSxVQUFVLGNBQWMsQ0FBQyxNQUFxQjtJQUNoRCxJQUFJLElBQUkscUJBQVEsTUFBTSxDQUFDLElBQUksQ0FBRSxDQUFBO0lBQzdCLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFBO0lBQ2pDLElBQUksU0FBUyxHQUFzRCxFQUFFLENBQUM7SUFFdEUsS0FBSyxDQUFDLEdBQVMsRUFBRTtRQUNiLFNBQVU7WUFDTixJQUFJO2dCQUNBLE1BQU0sT0FBTyxHQUFHLE1BQU0sTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFBO2dCQUN2QyxJQUFJLE9BQU8sQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ3pELElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLGtCQUFrQixLQUFLLENBQUMsRUFBRTt3QkFDdEUsSUFBSTs0QkFDQSxNQUFNLFlBQVksR0FBRyxNQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7NEJBQ3ZELElBQUksWUFBWSxJQUFJLFlBQVksQ0FBQyxFQUFFLElBQUksU0FBUyxFQUFFO2dDQUM5QyxTQUFTLEdBQUcsWUFBWSxDQUFDLEVBQUUsQ0FBQTs2QkFDOUI7eUJBQ0o7d0JBQUMsV0FBTTs0QkFBRSxLQUFLLENBQUMsQ0FBQTt5QkFBRTtxQkFDckI7b0JBQ0QsSUFBSSxxQkFBUSxPQUFPLENBQUUsQ0FBQTtvQkFDckIsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFBO29CQUMvQixTQUFTLEdBQUcsRUFBRSxDQUFBO29CQUNkLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtpQkFDekM7cUJBQU07b0JBQ0gsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUE7aUJBQzlEO2FBQ0o7WUFBQyxXQUFNO2dCQUNKLG9EQUFvRDtnQkFDcEQsTUFBSzthQUNSO1NBQ0o7SUFDTCxDQUFDLENBQUEsQ0FBQyxFQUFFLENBQUE7SUFFSixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQTtJQUUxQyxPQUFPO1FBQ0gsSUFBSSxJQUFJLEtBQUssT0FBTyxJQUFJLENBQUEsQ0FBQyxDQUFDO1FBQzFCLElBQUksUUFBUTtZQUNSLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQTtZQUN0QyxJQUFJLE9BQU8sR0FBRyxRQUFRLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRTtnQkFDaEMsT0FBTyxDQUFDLENBQUE7YUFDWDtZQUNELE1BQU0sV0FBVyxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUE7WUFDcEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLENBQUE7WUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUMxQixDQUFDO1FBQ0QsSUFBSSxTQUFTLEtBQUssT0FBTyxTQUFTLENBQUEsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDVCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFBO1lBQ3hCLE9BQU87Z0JBQ0gsSUFBSSxFQUFFLEdBQUcsRUFBRTtvQkFDUCxPQUFPLElBQUksT0FBTyxDQUE2QixPQUFPLENBQUMsRUFBRTt3QkFDckQsSUFBSSxVQUFVLEtBQUssSUFBSSxDQUFDLEVBQUUsRUFBRTs0QkFDeEIsT0FBTyxPQUFPLG1CQUFNLElBQUksRUFBRyxDQUFBO3lCQUM5Qjt3QkFDRCxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFOzRCQUNyQixPQUFPLG1CQUFNLE9BQU8sRUFBRyxDQUFBO3dCQUMzQixDQUFDLENBQUMsQ0FBQTtvQkFDTixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ1IsVUFBVSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUE7d0JBQ2pCLE9BQU8sQ0FBQyxDQUFBO29CQUNaLENBQUMsQ0FBQyxDQUFBO2dCQUNOLENBQUM7YUFDSixDQUFBO1FBQ0wsQ0FBQztLQUNKLENBQUE7QUFDTCxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/head-tracker.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Framework: () => (/* binding */ Framework),\n/* harmony export */   newVendor: () => (/* reexport safe */ _vendor__WEBPACK_IMPORTED_MODULE_1__.newVendor)\n/* harmony export */ });\n/* harmony import */ var _thor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./thor */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/thor.js\");\n/* harmony import */ var _vendor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vendor */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/vendor.js\");\n/* harmony import */ var _driver_guard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./driver-guard */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/driver-guard.js\");\n\n\n\n/**\n * Class implements Connex interface\n */\nclass Framework {\n    /**\n     * constructor\n     * @param driver the driver instance\n     */\n    constructor(driver) {\n        this.thor = (0,_thor__WEBPACK_IMPORTED_MODULE_0__.newThor)(driver);\n        this.vendor = (0,_vendor__WEBPACK_IMPORTED_MODULE_1__.newVendor)(driver);\n    }\n    /**\n     * create a wrapper for driver, to validate responses. it should be helpful to make sure driver is properly\n     * implemented in development stage.\n     * @param driver the driver to be wrapped\n     * @param errorHandler optional error handler. If omitted, error message will be printed via console.warn.\n     */\n    static guardDriver(driver, errorHandler) {\n        return (0,_driver_guard__WEBPACK_IMPORTED_MODULE_2__.newDriverGuard)(driver, errorHandler);\n    }\n}\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUNoQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ3BDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUUvQzs7R0FFRztBQUNILE1BQU0sT0FBTyxTQUFTO0lBaUJsQjs7O09BR0c7SUFDSCxZQUFZLE1BQXFCO1FBQzdCLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUF2QkQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsV0FBVyxDQUNyQixNQUFxQixFQUNyQixZQUFtQztRQUVuQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDL0MsQ0FBQztDQWFKO0FBRUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFBIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUM7QUFDSTtBQUNXO0FBQ2hEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4Q0FBTztBQUMzQixzQkFBc0Isa0RBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkRBQWM7QUFDN0I7QUFDQTtBQUNxQjtBQUNyQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9jb25uZXgtZnJhbWV3b3JrL2VzbS9pbmRleC5qcz8yMGEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5ld1Rob3IgfSBmcm9tICcuL3Rob3InO1xuaW1wb3J0IHsgbmV3VmVuZG9yIH0gZnJvbSAnLi92ZW5kb3InO1xuaW1wb3J0IHsgbmV3RHJpdmVyR3VhcmQgfSBmcm9tICcuL2RyaXZlci1ndWFyZCc7XG4vKipcbiAqIENsYXNzIGltcGxlbWVudHMgQ29ubmV4IGludGVyZmFjZVxuICovXG5leHBvcnQgY2xhc3MgRnJhbWV3b3JrIHtcbiAgICAvKipcbiAgICAgKiBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBkcml2ZXIgdGhlIGRyaXZlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGRyaXZlcikge1xuICAgICAgICB0aGlzLnRob3IgPSBuZXdUaG9yKGRyaXZlcik7XG4gICAgICAgIHRoaXMudmVuZG9yID0gbmV3VmVuZG9yKGRyaXZlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBhIHdyYXBwZXIgZm9yIGRyaXZlciwgdG8gdmFsaWRhdGUgcmVzcG9uc2VzLiBpdCBzaG91bGQgYmUgaGVscGZ1bCB0byBtYWtlIHN1cmUgZHJpdmVyIGlzIHByb3Blcmx5XG4gICAgICogaW1wbGVtZW50ZWQgaW4gZGV2ZWxvcG1lbnQgc3RhZ2UuXG4gICAgICogQHBhcmFtIGRyaXZlciB0aGUgZHJpdmVyIHRvIGJlIHdyYXBwZWRcbiAgICAgKiBAcGFyYW0gZXJyb3JIYW5kbGVyIG9wdGlvbmFsIGVycm9yIGhhbmRsZXIuIElmIG9taXR0ZWQsIGVycm9yIG1lc3NhZ2Ugd2lsbCBiZSBwcmludGVkIHZpYSBjb25zb2xlLndhcm4uXG4gICAgICovXG4gICAgc3RhdGljIGd1YXJkRHJpdmVyKGRyaXZlciwgZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBuZXdEcml2ZXJHdWFyZChkcml2ZXIsIGVycm9ySGFuZGxlcik7XG4gICAgfVxufVxuZXhwb3J0IHsgbmV3VmVuZG9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZhVzVrWlhndWRITWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJRVUVzVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4TlFVRk5MRkZCUVZFc1EwRkJRVHRCUVVOb1F5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RlFVRkZMRTFCUVUwc1ZVRkJWU3hEUVVGQk8wRkJRM0JETEU5QlFVOHNSVUZCUlN4alFVRmpMRVZCUVVVc1RVRkJUU3huUWtGQlowSXNRMEZCUVR0QlFVVXZRenM3UjBGRlJ6dEJRVU5JTEUxQlFVMHNUMEZCVHl4VFFVRlRPMGxCYVVKc1FqczdPMDlCUjBjN1NVRkRTQ3haUVVGWkxFMUJRWEZDTzFGQlF6ZENMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wbEJRMjVETEVOQlFVTTdTVUYyUWtRN096czdPMDlCUzBjN1NVRkRTU3hOUVVGTkxFTkJRVU1zVjBGQlZ5eERRVU55UWl4TlFVRnhRaXhGUVVOeVFpeFpRVUZ0UXp0UlFVVnVReXhQUVVGUExHTkJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVFN1NVRkRMME1zUTBGQlF6dERRV0ZLTzBGQlJVUXNUMEZCVHl4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVGQkluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/revert-reason.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/revert-reason.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeRevertReason: () => (/* binding */ decodeRevertReason)\n/* harmony export */ });\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/keccak.js\");\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/abi.js\");\n\n// https://docs.soliditylang.org/en/v0.8.16/control-structures.html#error-handling-assert-require-revert-and-exceptions\n// builtin errors in solidity, Error(string) and Panic(uint256)\nconst errorSelector = '0x' + (0,thor_devkit__WEBPACK_IMPORTED_MODULE_0__.keccak256)('Error(string)').toString('hex').slice(0, 8);\nconst panicSelector = '0x' + (0,thor_devkit__WEBPACK_IMPORTED_MODULE_0__.keccak256)('Panic(uint256)').toString('hex').slice(0, 8);\nfunction decodeRevertReason(data) {\n    try {\n        if (data.startsWith(errorSelector)) {\n            return thor_devkit__WEBPACK_IMPORTED_MODULE_1__.abi.decodeParameter('string', '0x' + data.slice(errorSelector.length));\n        }\n        else if (data.startsWith(panicSelector)) {\n            const decoded = thor_devkit__WEBPACK_IMPORTED_MODULE_1__.abi.decodeParameter('uint256', '0x' + data.slice(panicSelector.length));\n            return `Panic(0x${parseInt(decoded).toString(16).padStart(2, '0')})`;\n        }\n        return '';\n    }\n    catch (_a) {\n        return '';\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJ0LXJlYXNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXZlcnQtcmVhc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRTVDLHVIQUF1SDtBQUN2SCwrREFBK0Q7QUFFL0QsTUFBTSxhQUFhLEdBQUcsSUFBSSxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUNuRixNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFFcEYsTUFBTSxVQUFVLGtCQUFrQixDQUFDLElBQVk7SUFDM0MsSUFBSTtRQUNBLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNoQyxPQUFPLEdBQUcsQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBVyxDQUFBO1NBQzFGO2FBQU0sSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3ZDLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBVyxDQUFBO1lBQ2pHLE9BQU8sV0FBVyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQTtTQUN2RTtRQUNELE9BQU8sRUFBRSxDQUFBO0tBQ1o7SUFBQyxXQUFNO1FBQ0osT0FBTyxFQUFFLENBQUE7S0FDWjtBQUNMLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vcmV2ZXJ0LXJlYXNvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFDN0M7QUFDQTtBQUNBLDZCQUE2QixzREFBUztBQUN0Qyw2QkFBNkIsc0RBQVM7QUFDL0I7QUFDUDtBQUNBO0FBQ0EsbUJBQW1CLDRDQUFHO0FBQ3RCO0FBQ0E7QUFDQSw0QkFBNEIsNENBQUc7QUFDL0IsOEJBQThCLGdEQUFnRDtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmVhdmVtZW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B2ZWNoYWluL2Nvbm5leC1mcmFtZXdvcmsvZXNtL3JldmVydC1yZWFzb24uanM/Yzg2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhYmksIGtlY2NhazI1NiB9IGZyb20gJ3Rob3ItZGV2a2l0Jztcbi8vIGh0dHBzOi8vZG9jcy5zb2xpZGl0eWxhbmcub3JnL2VuL3YwLjguMTYvY29udHJvbC1zdHJ1Y3R1cmVzLmh0bWwjZXJyb3ItaGFuZGxpbmctYXNzZXJ0LXJlcXVpcmUtcmV2ZXJ0LWFuZC1leGNlcHRpb25zXG4vLyBidWlsdGluIGVycm9ycyBpbiBzb2xpZGl0eSwgRXJyb3Ioc3RyaW5nKSBhbmQgUGFuaWModWludDI1NilcbmNvbnN0IGVycm9yU2VsZWN0b3IgPSAnMHgnICsga2VjY2FrMjU2KCdFcnJvcihzdHJpbmcpJykudG9TdHJpbmcoJ2hleCcpLnNsaWNlKDAsIDgpO1xuY29uc3QgcGFuaWNTZWxlY3RvciA9ICcweCcgKyBrZWNjYWsyNTYoJ1BhbmljKHVpbnQyNTYpJykudG9TdHJpbmcoJ2hleCcpLnNsaWNlKDAsIDgpO1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVJldmVydFJlYXNvbihkYXRhKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGRhdGEuc3RhcnRzV2l0aChlcnJvclNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFiaS5kZWNvZGVQYXJhbWV0ZXIoJ3N0cmluZycsICcweCcgKyBkYXRhLnNsaWNlKGVycm9yU2VsZWN0b3IubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YS5zdGFydHNXaXRoKHBhbmljU2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNvZGVkID0gYWJpLmRlY29kZVBhcmFtZXRlcigndWludDI1NicsICcweCcgKyBkYXRhLnNsaWNlKHBhbmljU2VsZWN0b3IubGVuZ3RoKSk7XG4gICAgICAgICAgICByZXR1cm4gYFBhbmljKDB4JHtwYXJzZUludChkZWNvZGVkKS50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKX0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGNhdGNoIChfYSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY21WMlpYSjBMWEpsWVhOdmJpNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUwzTnlZeTl5WlhabGNuUXRjbVZoYzI5dUxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVVVc1UwRkJVeXhGUVVGRkxFMUJRVTBzWVVGQllTeERRVUZCTzBGQlJUVkRMSFZJUVVGMVNEdEJRVU4yU0N3clJFRkJLMFE3UVVGRkwwUXNUVUZCVFN4aFFVRmhMRWRCUVVjc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRVHRCUVVOdVJpeE5RVUZOTEdGQlFXRXNSMEZCUnl4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRmNFWXNUVUZCVFN4VlFVRlZMR3RDUVVGclFpeERRVUZETEVsQlFWazdTVUZETTBNc1NVRkJTVHRSUVVOQkxFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSVHRaUVVOb1F5eFBRVUZQTEVkQlFVY3NRMEZCUXl4bFFVRmxMRU5CUVVNc1VVRkJVU3hGUVVGRkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlZ5eERRVUZCTzFOQlF6RkdPMkZCUVUwc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZPMWxCUTNaRExFMUJRVTBzVDBGQlR5eEhRVUZITEVkQlFVY3NRMEZCUXl4bFFVRmxMRU5CUVVNc1UwRkJVeXhGUVVGRkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR0ZCUVdFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlZ5eERRVUZCTzFsQlEycEhMRTlCUVU4c1YwRkJWeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJRVHRUUVVOMlJUdFJRVU5FTEU5QlFVOHNSVUZCUlN4RFFVRkJPMHRCUTFvN1NVRkJReXhYUVVGTk8xRkJRMG9zVDBGQlR5eEZRVUZGTEVOQlFVRTdTMEZEV2p0QlFVTk1MRU5CUVVNaWZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/revert-reason.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js":
/*!*************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/rules.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadParameter: () => (/* binding */ BadParameter),\n/* harmony export */   address: () => (/* binding */ address),\n/* harmony export */   bigInt: () => (/* binding */ bigInt),\n/* harmony export */   bool: () => (/* binding */ bool),\n/* harmony export */   bytes: () => (/* binding */ bytes),\n/* harmony export */   bytes32: () => (/* binding */ bytes32),\n/* harmony export */   bytes8: () => (/* binding */ bytes8),\n/* harmony export */   ensure: () => (/* binding */ ensure),\n/* harmony export */   hexString: () => (/* binding */ hexString),\n/* harmony export */   isBigInt: () => (/* binding */ isBigInt),\n/* harmony export */   isDecString: () => (/* binding */ isDecString),\n/* harmony export */   isHexBytes: () => (/* binding */ isHexBytes),\n/* harmony export */   isHexString: () => (/* binding */ isHexString),\n/* harmony export */   isUInt: () => (/* binding */ isUInt),\n/* harmony export */   string: () => (/* binding */ string),\n/* harmony export */   test: () => (/* binding */ test),\n/* harmony export */   uint32: () => (/* binding */ uint32),\n/* harmony export */   uint64: () => (/* binding */ uint64),\n/* harmony export */   uint8: () => (/* binding */ uint8)\n/* harmony export */ });\n/* harmony import */ var validator_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! validator-ts */ \"(ssr)/./node_modules/validator-ts/dist/index.js\");\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nfunction isDecString(val) {\n    return typeof val === 'string' && /^[0-9]+$/.test(val);\n}\nfunction isHexString(val) {\n    return typeof val === 'string' && /^0x[0-9a-f]+$/i.test(val);\n}\nfunction isHexBytes(val, n) {\n    if (typeof val !== 'string' || !/^0x[0-9a-f]*$/i.test(val)) {\n        return false;\n    }\n    return n ? val.length === n * 2 + 2 : val.length % 2 === 0;\n}\nfunction isUInt(val, bit) {\n    if (val < 0 || !Number.isInteger(val)) {\n        return false;\n    }\n    return bit ? val < Math.pow(2, bit) : true;\n}\nfunction isBigInt(v) {\n    return typeof v === 'string' ?\n        (isDecString(v) || isHexString(v)) :\n        isUInt(v, 0);\n}\nclass BadParameter extends Error {\n    constructor(msg) {\n        super(msg);\n    }\n}\nBadParameter.prototype.name = 'BadParameter';\nfunction ensure(b, msg) {\n    if (!b) {\n        throw new BadParameter(msg);\n    }\n}\n\nfunction test(value, scheme, context) {\n    try {\n        return validator_ts__WEBPACK_IMPORTED_MODULE_0__.validate(value, scheme, context);\n    }\n    catch (err) {\n        if (err instanceof validator_ts__WEBPACK_IMPORTED_MODULE_0__.ValidationError) {\n            throw new BadParameter(err.message);\n        }\n        throw err;\n    }\n}\n// rules\nfunction bytes(v) {\n    return isHexBytes(v) ? '' : 'expected bytes in hex string';\n}\nfunction bytes8(v) {\n    return isHexBytes(v, 8) ? '' : 'expected bytes8';\n}\nfunction bytes32(v) {\n    return isHexBytes(v, 32) ? '' : 'expected bytes32';\n}\nfunction uint8(v) {\n    return isUInt(v, 8) ? '' : 'expected 8-bit unsigned integer';\n}\nfunction uint32(v) {\n    return isUInt(v, 32) ? '' : 'expected 32-bit unsigned integer';\n}\nfunction uint64(v) {\n    return isUInt(v, 64) ? '' : 'expected 64-bit unsigned integer';\n}\nfunction bool(v) {\n    return typeof v === 'boolean' ? '' : 'expected boolean';\n}\nfunction bigInt(v) {\n    return isBigInt(v) ? '' : 'expected unsigned integer in number or string';\n}\nfunction hexString(v) {\n    return isHexString(v) ? '' : 'expected integer in hex string';\n}\nfunction address(v) {\n    return isHexBytes(v, 20) ? '' : 'expected address';\n}\nfunction string(v) {\n    return typeof v === 'string' ? '' : 'expected string';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcnVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0VBQXNFO0FBQ3RFLE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBVztJQUNuQyxPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQzFELENBQUM7QUFFRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEdBQVc7SUFDbkMsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ2hFLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLEdBQVcsRUFBRSxDQUFVO0lBQzlDLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3hELE9BQU8sS0FBSyxDQUFBO0tBQ2Y7SUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQzlELENBQUM7QUFFRCxNQUFNLFVBQVUsTUFBTSxDQUFDLEdBQVcsRUFBRSxHQUFXO0lBQzNDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDbkMsT0FBTyxLQUFLLENBQUE7S0FDZjtJQUNELE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBQSxDQUFDLEVBQUksR0FBRyxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtBQUN0QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxDQUFrQjtJQUN2QyxP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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/thor.js":
/*!************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/thor.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newThor: () => (/* binding */ newThor)\n/* harmony export */ });\n/* harmony import */ var _account_visitor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./account-visitor */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/account-visitor.js\");\n/* harmony import */ var _block_visitor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./block-visitor */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/block-visitor.js\");\n/* harmony import */ var _tx_visitor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tx-visitor */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/tx-visitor.js\");\n/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./filter */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/filter.js\");\n/* harmony import */ var _head_tracker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./head-tracker */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/head-tracker.js\");\n/* harmony import */ var _explainer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./explainer */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/explainer.js\");\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\");\n/* harmony import */ var validator_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! validator-ts */ \"(ssr)/./node_modules/validator-ts/dist/index.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n\n\nfunction newThor(driver) {\n    const headTracker = (0,_head_tracker__WEBPACK_IMPORTED_MODULE_1__.newHeadTracker)(driver);\n    const readyDriver = (() => __awaiter(this, void 0, void 0, function* () {\n        if (headTracker.head.number > 0) {\n            return driver;\n        }\n        yield headTracker.ticker().next();\n        return driver;\n    }))();\n    const genesis = JSON.parse(JSON.stringify(driver.genesis));\n    return {\n        get genesis() { return genesis; },\n        get status() {\n            return {\n                head: headTracker.head,\n                progress: headTracker.progress,\n                finalized: headTracker.finalized\n            };\n        },\n        ticker: () => headTracker.ticker(),\n        account: addr => {\n            addr = _rules__WEBPACK_IMPORTED_MODULE_2__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_2__.address, 'arg0').toLowerCase();\n            return (0,_account_visitor__WEBPACK_IMPORTED_MODULE_3__.newAccountVisitor)(readyDriver, addr);\n        },\n        block: revision => {\n            if (typeof revision === 'undefined') {\n                revision = driver.head.id;\n            }\n            else {\n                _rules__WEBPACK_IMPORTED_MODULE_2__.ensure(typeof revision === 'string' ? _rules__WEBPACK_IMPORTED_MODULE_2__.isHexBytes(revision, 32) : _rules__WEBPACK_IMPORTED_MODULE_2__.isUInt(revision, 32), 'arg0: expected bytes32 or unsigned 32-bit integer');\n            }\n            return (0,_block_visitor__WEBPACK_IMPORTED_MODULE_4__.newBlockVisitor)(driver, typeof revision === 'string' ? revision.toLowerCase() : revision);\n        },\n        transaction: id => {\n            id = _rules__WEBPACK_IMPORTED_MODULE_2__.test(id, _rules__WEBPACK_IMPORTED_MODULE_2__.bytes32, 'arg0').toLowerCase();\n            return (0,_tx_visitor__WEBPACK_IMPORTED_MODULE_5__.newTxVisitor)(readyDriver, id);\n        },\n        filter: (kind, criteria) => {\n            _rules__WEBPACK_IMPORTED_MODULE_2__.ensure(kind === 'event' || kind === 'transfer', `arg0: expected 'event' or 'transfer'`);\n            if (kind === 'event') {\n                _rules__WEBPACK_IMPORTED_MODULE_2__.test(criteria, [eventCriteriaScheme], 'arg1');\n                return (0,_filter__WEBPACK_IMPORTED_MODULE_6__.newFilter)(readyDriver, 'event', criteria\n                    .map(c => {\n                    return {\n                        address: c.address ? c.address.toLowerCase() : undefined,\n                        topic0: c.topic0 ? c.topic0.toLowerCase() : undefined,\n                        topic1: c.topic1 ? c.topic1.toLowerCase() : undefined,\n                        topic2: c.topic2 ? c.topic2.toLowerCase() : undefined,\n                        topic3: c.topic3 ? c.topic3.toLowerCase() : undefined,\n                        topic4: c.topic4 ? c.topic4.toLowerCase() : undefined\n                    };\n                }));\n            }\n            else {\n                _rules__WEBPACK_IMPORTED_MODULE_2__.test(criteria, [transferCriteriaScheme], 'arg1');\n                return (0,_filter__WEBPACK_IMPORTED_MODULE_6__.newFilter)(readyDriver, 'transfer', criteria\n                    .map(c => {\n                    return {\n                        txOrigin: c.txOrigin ? c.txOrigin.toLowerCase() : undefined,\n                        sender: c.sender ? c.sender.toLowerCase() : undefined,\n                        recipient: c.recipient ? c.recipient.toLowerCase() : undefined\n                    };\n                }));\n            }\n        },\n        explain: (clauses) => {\n            _rules__WEBPACK_IMPORTED_MODULE_2__.test(clauses, [clauseScheme], 'arg0');\n            return (0,_explainer__WEBPACK_IMPORTED_MODULE_7__.newExplainer)(readyDriver, clauses);\n        }\n    };\n}\nconst clauseScheme = {\n    to: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable(_rules__WEBPACK_IMPORTED_MODULE_2__.address),\n    value: _rules__WEBPACK_IMPORTED_MODULE_2__.bigInt,\n    data: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes)\n};\nconst eventCriteriaScheme = {\n    address: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.address),\n    topic0: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes32),\n    topic1: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes32),\n    topic2: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes32),\n    topic3: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes32),\n    topic4: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes32)\n};\nconst transferCriteriaScheme = {\n    sender: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.address),\n    recipient: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.address),\n    txOrigin: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.address)\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90aG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQzNDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUE7QUFDcEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFDMUMsT0FBTyxLQUFLLENBQUMsTUFBTSxTQUFTLENBQUE7QUFDNUIsT0FBTyxLQUFLLENBQUMsTUFBTSxjQUFjLENBQUE7QUFFakMsTUFBTSxVQUFVLE9BQU8sQ0FBQyxNQUFxQjtJQUN6QyxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUE7SUFFMUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxHQUFTLEVBQUU7UUFDNUIsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDN0IsT0FBTyxNQUFNLENBQUE7U0FDaEI7UUFDRCxNQUFNLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUNqQyxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDLENBQUEsQ0FBQyxFQUFFLENBQUE7SUFFSixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFzQixDQUFBO0lBQy9FLE9BQU87UUFDSCxJQUFJLE9BQU8sS0FBSyxPQUFPLE9BQU8sQ0FBQSxDQUFDLENBQUM7UUFDaEMsSUFBSSxNQUFNO1lBQ04sT0FBTztn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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/thor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/tx-visitor.js":
/*!******************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/tx-visitor.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newTxVisitor: () => (/* binding */ newTxVisitor)\n/* harmony export */ });\nfunction newTxVisitor(readyDriver, id) {\n    let allowPending = false;\n    return {\n        get id() {\n            return id;\n        },\n        allowPending() {\n            allowPending = true;\n            return this;\n        },\n        get: () => readyDriver.then(d => d.getTransaction(id, allowPending)),\n        getReceipt: () => readyDriver.then(d => d.getReceipt(id))\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHgtdmlzaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy90eC12aXNpdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxZQUFZLENBQ3hCLFdBQW1DLEVBQ25DLEVBQVU7SUFFVixJQUFJLFlBQVksR0FBRyxLQUFLLENBQUE7SUFDeEIsT0FBTztRQUNILElBQUksRUFBRTtZQUNGLE9BQU8sRUFBRSxDQUFBO1FBQ2IsQ0FBQztRQUNELFlBQVk7WUFDUixZQUFZLEdBQUcsSUFBSSxDQUFBO1lBQ25CLE9BQU8sSUFBSSxDQUFBO1FBQ2YsQ0FBQztRQUNELEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDcEUsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzVELENBQUE7QUFDTCxDQUFDIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vY29ubmV4LWZyYW1ld29yay9lc20vdHgtdmlzaXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9jb25uZXgtZnJhbWV3b3JrL2VzbS90eC12aXNpdG9yLmpzP2UzOGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG5ld1R4VmlzaXRvcihyZWFkeURyaXZlciwgaWQpIHtcbiAgICBsZXQgYWxsb3dQZW5kaW5nID0gZmFsc2U7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0IGlkKCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgICB9LFxuICAgICAgICBhbGxvd1BlbmRpbmcoKSB7XG4gICAgICAgICAgICBhbGxvd1BlbmRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGdldDogKCkgPT4gcmVhZHlEcml2ZXIudGhlbihkID0+IGQuZ2V0VHJhbnNhY3Rpb24oaWQsIGFsbG93UGVuZGluZykpLFxuICAgICAgICBnZXRSZWNlaXB0OiAoKSA9PiByZWFkeURyaXZlci50aGVuKGQgPT4gZC5nZXRSZWNlaXB0KGlkKSlcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pZEhndGRtbHphWFJ2Y2k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1TDNOeVl5OTBlQzEyYVhOcGRHOXlMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFMUJRVTBzVlVGQlZTeFpRVUZaTEVOQlEzaENMRmRCUVcxRExFVkJRMjVETEVWQlFWVTdTVUZGVml4SlFVRkpMRmxCUVZrc1IwRkJSeXhMUVVGTExFTkJRVUU3U1VGRGVFSXNUMEZCVHp0UlFVTklMRWxCUVVrc1JVRkJSVHRaUVVOR0xFOUJRVThzUlVGQlJTeERRVUZCTzFGQlEySXNRMEZCUXp0UlFVTkVMRmxCUVZrN1dVRkRVaXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZCTzFsQlEyNUNMRTlCUVU4c1NVRkJTU3hEUVVGQk8xRkJRMllzUTBGQlF6dFJRVU5FTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExHTkJRV01zUTBGQlF5eEZRVUZGTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkRjRVVzVlVGQlZTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzB0QlF6VkVMRU5CUVVFN1FVRkRUQ3hEUVVGREluMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/tx-visitor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/connex-framework/esm/vendor.js":
/*!**************************************************************!*\
  !*** ./node_modules/@vechain/connex-framework/esm/vendor.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newTxSigningService: () => (/* binding */ newTxSigningService),\n/* harmony export */   newVendor: () => (/* binding */ newVendor)\n/* harmony export */ });\n/* harmony import */ var _rules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rules */ \"(ssr)/./node_modules/@vechain/connex-framework/esm/rules.js\");\n/* harmony import */ var validator_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! validator-ts */ \"(ssr)/./node_modules/validator-ts/dist/index.js\");\n/* harmony import */ var thor_devkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! thor-devkit */ \"(ssr)/./node_modules/thor-devkit/esm/abi.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.js\");\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_1__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\nfunction newVendor(driver) {\n    return {\n        sign: (kind, msg) => {\n            if (kind === 'tx') {\n                _rules__WEBPACK_IMPORTED_MODULE_2__.test(msg, [clauseScheme], 'arg1');\n                return newTxSigningService(Promise.resolve(driver), msg);\n            }\n            else if (kind === 'cert') {\n                _rules__WEBPACK_IMPORTED_MODULE_2__.test(msg, {\n                    purpose: v => (v === 'agreement' || v === 'identification') ?\n                        '' : `expected 'agreement' or 'identification'`,\n                    payload: {\n                        type: v => v === 'text' ? '' : `expected 'text'`,\n                        content: _rules__WEBPACK_IMPORTED_MODULE_2__.string\n                    }\n                }, 'arg1');\n                return newCertSigningService(Promise.resolve(driver), msg);\n            }\n            else {\n                throw new _rules__WEBPACK_IMPORTED_MODULE_2__.BadParameter(`arg0: expected 'tx' or 'cert'`);\n            }\n        }\n    };\n}\nfunction newTxSigningService(readyDriver, msg) {\n    const opts = {};\n    return {\n        signer(addr) {\n            opts.signer = _rules__WEBPACK_IMPORTED_MODULE_2__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_2__.address, 'arg0').toLowerCase();\n            return this;\n        },\n        gas(gas) {\n            opts.gas = _rules__WEBPACK_IMPORTED_MODULE_2__.test(gas, _rules__WEBPACK_IMPORTED_MODULE_2__.uint64, 'arg0');\n            return this;\n        },\n        dependsOn(txid) {\n            opts.dependsOn = _rules__WEBPACK_IMPORTED_MODULE_2__.test(txid, _rules__WEBPACK_IMPORTED_MODULE_2__.bytes32, 'arg0').toLowerCase();\n            return this;\n        },\n        link(url) {\n            opts.link = _rules__WEBPACK_IMPORTED_MODULE_2__.test(url, _rules__WEBPACK_IMPORTED_MODULE_2__.string, 'arg0');\n            return this;\n        },\n        comment(text) {\n            opts.comment = _rules__WEBPACK_IMPORTED_MODULE_2__.test(text, _rules__WEBPACK_IMPORTED_MODULE_2__.string, 'arg0');\n            return this;\n        },\n        delegate(url, signer) {\n            _rules__WEBPACK_IMPORTED_MODULE_2__.ensure(typeof url === 'string', `arg0: expected url string`);\n            _rules__WEBPACK_IMPORTED_MODULE_2__.test(signer, validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.address), 'arg1');\n            opts.delegator = { url, signer: signer && signer.toLowerCase() };\n            return this;\n        },\n        accepted(cb) {\n            _rules__WEBPACK_IMPORTED_MODULE_2__.ensure(typeof cb === 'function', 'arg0: expected function');\n            opts.onAccepted = cb;\n            return this;\n        },\n        request() {\n            const transformedMsg = msg.map(c => (Object.assign(Object.assign({}, c), { value: new (bignumber_js__WEBPACK_IMPORTED_MODULE_1___default())(c.value).toString(10) })));\n            return (() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const driver = yield readyDriver;\n                    return yield driver.signTx(transformedMsg, opts);\n                }\n                catch (err) {\n                    throw new Rejected(err.message);\n                }\n            }))();\n        },\n    };\n}\nfunction newCertSigningService(readyDriver, msg) {\n    const opts = {};\n    return {\n        signer(addr) {\n            opts.signer = _rules__WEBPACK_IMPORTED_MODULE_2__.test(addr, _rules__WEBPACK_IMPORTED_MODULE_2__.address, 'arg0').toLowerCase();\n            return this;\n        },\n        link(url) {\n            opts.link = _rules__WEBPACK_IMPORTED_MODULE_2__.test(url, _rules__WEBPACK_IMPORTED_MODULE_2__.string, 'arg0');\n            return this;\n        },\n        accepted(cb) {\n            _rules__WEBPACK_IMPORTED_MODULE_2__.ensure(typeof cb === 'function', 'arg0: expected function');\n            opts.onAccepted = cb;\n            return this;\n        },\n        request() {\n            return (() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    const driver = yield readyDriver;\n                    return yield driver.signCert(msg, opts);\n                }\n                catch (err) {\n                    throw new Rejected(err.message);\n                }\n            }))();\n        }\n    };\n}\nclass Rejected extends Error {\n    constructor(msg) {\n        super(msg);\n    }\n}\nRejected.prototype.name = 'Rejected';\nconst clauseScheme = {\n    to: validator_ts__WEBPACK_IMPORTED_MODULE_0__.nullable(_rules__WEBPACK_IMPORTED_MODULE_2__.address),\n    value: _rules__WEBPACK_IMPORTED_MODULE_2__.bigInt,\n    data: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.bytes),\n    comment: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(_rules__WEBPACK_IMPORTED_MODULE_2__.string),\n    abi: validator_ts__WEBPACK_IMPORTED_MODULE_0__.optional(v => {\n        if (!(v instanceof Object)) {\n            return 'expected object';\n        }\n        try {\n            new thor_devkit__WEBPACK_IMPORTED_MODULE_3__.abi.Function(v).signature;\n            return '';\n        }\n        catch (err) {\n            return `expected valid ABI (${err.message})`;\n        }\n    })\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3ZlbmRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEtBQUssQ0FBQyxNQUFNLFNBQVMsQ0FBQTtBQUM1QixPQUFPLEtBQUssQ0FBQyxNQUFNLGNBQWMsQ0FBQTtBQUNqQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQ2pDLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQTtBQUVwQyxNQUFNLFVBQVUsU0FBUyxDQUFDLE1BQXFCO0lBQzNDLE9BQU87UUFDSCxJQUFJLEVBQUUsQ0FBMEIsSUFBTyxFQUFFLEdBQXlFLEVBQU8sRUFBRTtZQUN2SCxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ2YsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUE4QixFQUFFLENBQUMsWUFBWSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUE7Z0JBQzlELE9BQU8sbUJBQW1CLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUE4QixDQUFDLENBQUE7YUFDdEY7aUJBQU0sSUFBSSxJQUFJLEtBQUssTUFBTSxFQUFFO2dCQUN4QixDQUFDLENBQUMsSUFBSSxDQUFDLEdBQWdDLEVBQUU7b0JBQ3JDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLFdBQVcsSUFBSSxDQUFDLEtBQUssZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO3dCQUN6RCxFQUFFLENBQUMsQ0FBQyxDQUFDLDBDQUEwQztvQkFDbkQsT0FBTyxFQUFFO3dCQUNMLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsaUJBQWlCO3dCQUNoRCxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU07cUJBQ3BCO2lCQUNKLEVBQUUsTUFBTSxDQUFDLENBQUE7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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/connex-framework/esm/vendor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/_version.js":
/*!**************************************************!*\
  !*** ./node_modules/@vechain/ethers/_version.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.version = \"4.0.27-5\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL192ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9ldGhlcnMvX3ZlcnNpb24uanM/OTQ2ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmVyc2lvbiA9IFwiNC4wLjI3LTVcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/_version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/constants.js":
/*!***************************************************!*\
  !*** ./node_modules/@vechain/ethers/constants.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar bignumber_1 = __webpack_require__(/*! ./utils/bignumber */ \"(ssr)/./node_modules/@vechain/ethers/utils/bignumber.js\");\nvar AddressZero = '0x0000000000000000000000000000000000000000';\nexports.AddressZero = AddressZero;\nvar HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexports.HashZero = HashZero;\n// NFKD (decomposed)\n//const EtherSymbol = '\\uD835\\uDF63';\n// NFKC (composed)\nvar EtherSymbol = '\\u039e';\nexports.EtherSymbol = EtherSymbol;\nvar NegativeOne = bignumber_1.bigNumberify(-1);\nexports.NegativeOne = NegativeOne;\nvar Zero = bignumber_1.bigNumberify(0);\nexports.Zero = Zero;\nvar One = bignumber_1.bigNumberify(1);\nexports.One = One;\nvar Two = bignumber_1.bigNumberify(2);\nexports.Two = Two;\nvar WeiPerEther = bignumber_1.bigNumberify('1000000000000000000');\nexports.WeiPerEther = WeiPerEther;\nvar MaxUint256 = bignumber_1.bigNumberify('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nexports.MaxUint256 = MaxUint256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsbUJBQU8sQ0FBQyxrRkFBbUI7QUFDN0M7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxZQUFZO0FBQ1o7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxrQkFBa0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92ZXJlYXZlbWVudC1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AdmVjaGFpbi9ldGhlcnMvY29uc3RhbnRzLmpzP2Y4ODAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYmlnbnVtYmVyXzEgPSByZXF1aXJlKFwiLi91dGlscy9iaWdudW1iZXJcIik7XG52YXIgQWRkcmVzc1plcm8gPSAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJztcbmV4cG9ydHMuQWRkcmVzc1plcm8gPSBBZGRyZXNzWmVybztcbnZhciBIYXNoWmVybyA9ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnO1xuZXhwb3J0cy5IYXNoWmVybyA9IEhhc2haZXJvO1xuLy8gTkZLRCAoZGVjb21wb3NlZClcbi8vY29uc3QgRXRoZXJTeW1ib2wgPSAnXFx1RDgzNVxcdURGNjMnO1xuLy8gTkZLQyAoY29tcG9zZWQpXG52YXIgRXRoZXJTeW1ib2wgPSAnXFx1MDM5ZSc7XG5leHBvcnRzLkV0aGVyU3ltYm9sID0gRXRoZXJTeW1ib2w7XG52YXIgTmVnYXRpdmVPbmUgPSBiaWdudW1iZXJfMS5iaWdOdW1iZXJpZnkoLTEpO1xuZXhwb3J0cy5OZWdhdGl2ZU9uZSA9IE5lZ2F0aXZlT25lO1xudmFyIFplcm8gPSBiaWdudW1iZXJfMS5iaWdOdW1iZXJpZnkoMCk7XG5leHBvcnRzLlplcm8gPSBaZXJvO1xudmFyIE9uZSA9IGJpZ251bWJlcl8xLmJpZ051bWJlcmlmeSgxKTtcbmV4cG9ydHMuT25lID0gT25lO1xudmFyIFR3byA9IGJpZ251bWJlcl8xLmJpZ051bWJlcmlmeSgyKTtcbmV4cG9ydHMuVHdvID0gVHdvO1xudmFyIFdlaVBlckV0aGVyID0gYmlnbnVtYmVyXzEuYmlnTnVtYmVyaWZ5KCcxMDAwMDAwMDAwMDAwMDAwMDAwJyk7XG5leHBvcnRzLldlaVBlckV0aGVyID0gV2VpUGVyRXRoZXI7XG52YXIgTWF4VWludDI1NiA9IGJpZ251bWJlcl8xLmJpZ051bWJlcmlmeSgnMHhmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmJyk7XG5leHBvcnRzLk1heFVpbnQyNTYgPSBNYXhVaW50MjU2O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/errors.js":
/*!************************************************!*\
  !*** ./node_modules/@vechain/ethers/errors.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar _version_1 = __webpack_require__(/*! ./_version */ \"(ssr)/./node_modules/@vechain/ethers/_version.js\");\n// Unknown Error\nexports.UNKNOWN_ERROR = 'UNKNOWN_ERROR';\n// Not implemented\nexports.NOT_IMPLEMENTED = 'NOT_IMPLEMENTED';\n// Missing new operator to an object\n//  - name: The name of the class\nexports.MISSING_NEW = 'MISSING_NEW';\n// Call exception\n//  - transaction: the transaction\n//  - address?: the contract address\n//  - args?: The arguments passed into the function\n//  - method?: The Solidity method signature\n//  - errorSignature?: The EIP848 error signature\n//  - errorArgs?: The EIP848 error parameters\n//  - reason: The reason (only for EIP848 \"Error(string)\")\nexports.CALL_EXCEPTION = 'CALL_EXCEPTION';\n// Invalid argument (e.g. value is incompatible with type) to a function:\n//   - argument: The argument name that was invalid\n//   - value: The value of the argument\nexports.INVALID_ARGUMENT = 'INVALID_ARGUMENT';\n// Missing argument to a function:\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\nexports.MISSING_ARGUMENT = 'MISSING_ARGUMENT';\n// Too many arguments\n//   - count: The number of arguments received\n//   - expectedCount: The number of arguments expected\nexports.UNEXPECTED_ARGUMENT = 'UNEXPECTED_ARGUMENT';\n// Numeric Fault\n//   - operation: the operation being executed\n//   - fault: the reason this faulted\nexports.NUMERIC_FAULT = 'NUMERIC_FAULT';\n// Insufficien funds (< value + gasLimit * gasPrice)\n//   - transaction: the transaction attempted\nexports.INSUFFICIENT_FUNDS = 'INSUFFICIENT_FUNDS';\n// Nonce has already been used\n//   - transaction: the transaction attempted\nexports.NONCE_EXPIRED = 'NONCE_EXPIRED';\n// The replacement fee for the transaction is too low\n//   - transaction: the transaction attempted\nexports.REPLACEMENT_UNDERPRICED = 'REPLACEMENT_UNDERPRICED';\n// Unsupported operation\n//   - operation\nexports.UNSUPPORTED_OPERATION = 'UNSUPPORTED_OPERATION';\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\n// @TODO: Enum\nfunction throwError(message, code, params) {\n    if (_censorErrors) {\n        throw new Error('unknown error');\n    }\n    if (!code) {\n        code = exports.UNKNOWN_ERROR;\n    }\n    if (!params) {\n        params = {};\n    }\n    var messageDetails = [];\n    Object.keys(params).forEach(function (key) {\n        try {\n            messageDetails.push(key + '=' + JSON.stringify(params[key]));\n        }\n        catch (error) {\n            messageDetails.push(key + '=' + JSON.stringify(params[key].toString()));\n        }\n    });\n    messageDetails.push(\"version=\" + _version_1.version);\n    var reason = message;\n    if (messageDetails.length) {\n        message += ' (' + messageDetails.join(', ') + ')';\n    }\n    // @TODO: Any??\n    var error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n    });\n    throw error;\n}\nexports.throwError = throwError;\nfunction checkNew(self, kind) {\n    if (!(self instanceof kind)) {\n        throwError('missing new', exports.MISSING_NEW, { name: kind.name });\n    }\n}\nexports.checkNew = checkNew;\nfunction checkArgumentCount(count, expectedCount, suffix) {\n    if (!suffix) {\n        suffix = '';\n    }\n    if (count < expectedCount) {\n        throwError('missing argument' + suffix, exports.MISSING_ARGUMENT, { count: count, expectedCount: expectedCount });\n    }\n    if (count > expectedCount) {\n        throwError('too many arguments' + suffix, exports.UNEXPECTED_ARGUMENT, { count: count, expectedCount: expectedCount });\n    }\n}\nexports.checkArgumentCount = checkArgumentCount;\nfunction setCensorship(censorship, permanent) {\n    if (_permanentCensorErrors) {\n        throwError('error censorship permanent', exports.UNSUPPORTED_OPERATION, { operation: 'setCensorship' });\n    }\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n}\nexports.setCensorship = setCensorship;\nfunction checkNormalize() {\n    try {\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n            try {\n                \"test\".normalize(form);\n            }\n            catch (error) {\n                throw new Error('missing ' + form);\n            }\n        });\n        if (String.fromCharCode(0xe9).normalize('NFD') !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error('broken implementation');\n        }\n    }\n    catch (error) {\n        throwError('platform missing String.prototype.normalize', exports.UNSUPPORTED_OPERATION, { operation: 'String.prototype.normalize', form: error.message });\n    }\n}\nexports.checkNormalize = checkNormalize;\nvar LogLevels = { debug: 1, \"default\": 2, info: 2, warn: 3, error: 4, off: 5 };\nvar LogLevel = LogLevels[\"default\"];\nfunction setLogLevel(logLevel) {\n    var level = LogLevels[logLevel];\n    if (level == null) {\n        warn(\"invliad log level - \" + logLevel);\n        return;\n    }\n    LogLevel = level;\n}\nexports.setLogLevel = setLogLevel;\nfunction log(logLevel, args) {\n    if (LogLevel > LogLevels[logLevel]) {\n        return;\n    }\n    console.log.apply(console, args);\n}\nfunction warn() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    log(\"warn\", args);\n}\nexports.warn = warn;\nfunction info() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    log(\"info\", args);\n}\nexports.info = info;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/node_modules/bn.js/lib/bn.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@vechain/ethers/node_modules/bn.js/lib/bn.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    this.length = num === 0 ? 1 : this.length;\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/node_modules/bn.js/lib/bn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/abi-coder.js":
/*!*********************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/abi-coder.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nvar constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@vechain/ethers/constants.js\");\nvar errors = __importStar(__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@vechain/ethers/errors.js\"));\nvar address_1 = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@vechain/ethers/utils/address.js\");\nvar bignumber_1 = __webpack_require__(/*! ./bignumber */ \"(ssr)/./node_modules/@vechain/ethers/utils/bignumber.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\");\nvar utf8_1 = __webpack_require__(/*! ./utf8 */ \"(ssr)/./node_modules/@vechain/ethers/utils/utf8.js\");\nvar properties_1 = __webpack_require__(/*! ./properties */ \"(ssr)/./node_modules/@vechain/ethers/utils/properties.js\");\n///////////////////////////////\nvar paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nvar paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexports.defaultCoerceFunc = function (type, value) {\n    var match = type.match(paramTypeNumber);\n    if (match && parseInt(match[2]) <= 48) {\n        return value.toNumber();\n    }\n    return value;\n};\n///////////////////////////////////\n// Parsing for Solidity Signatures\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nvar regexIdentifier = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");\nfunction verifyType(type) {\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = 'uint256' + type.substring(4);\n    }\n    else if (type.match(/^int($|[^1-9])/)) {\n        type = 'int256' + type.substring(3);\n    }\n    return type;\n}\nfunction parseParam(param, allowIndexed) {\n    var originalParam = param;\n    function throwError(i) {\n        throw new Error('unexpected character \"' + originalParam[i] + '\" at position ' + i + ' in \"' + originalParam + '\"');\n    }\n    param = param.replace(/\\s/g, ' ');\n    var parent = { type: '', name: '', state: { allowType: true } };\n    var node = parent;\n    for (var i = 0; i < param.length; i++) {\n        var c = param[i];\n        switch (c) {\n            case '(':\n                if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [{ type: '', name: '', parent: node, state: { allowType: true } }];\n                node = node.components[0];\n                break;\n            case ')':\n                delete node.state;\n                if (allowIndexed && node.name === 'indexed') {\n                    node.indexed = true;\n                    node.name = '';\n                }\n                node.type = verifyType(node.type);\n                var child = node;\n                node = node.parent;\n                if (!node) {\n                    throwError(i);\n                }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n            case ',':\n                delete node.state;\n                if (allowIndexed && node.name === 'indexed') {\n                    node.indexed = true;\n                    node.name = '';\n                }\n                node.type = verifyType(node.type);\n                var sibling = { type: '', name: '', parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n            // Hit a space...\n            case ' ':\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== '') {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== '') {\n                        if (allowIndexed && node.name === 'indexed') {\n                            node.indexed = true;\n                            node.name = '';\n                        }\n                        else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n                break;\n            case '[':\n                if (!node.state.allowArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n            case ']':\n                if (!node.state.readArray) {\n                    throwError(i);\n                }\n                node.type += c;\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                }\n                else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                }\n                else if (node.state.readArray) {\n                    node.type += c;\n                }\n                else {\n                    throwError(i);\n                }\n        }\n    }\n    if (node.parent) {\n        throw new Error(\"unexpected eof\");\n    }\n    delete parent.state;\n    if (allowIndexed && node.name === 'indexed') {\n        node.indexed = true;\n        node.name = '';\n    }\n    parent.type = verifyType(parent.type);\n    return parent;\n}\n// @TODO: Better return type\nfunction parseSignatureEvent(fragment) {\n    var abi = {\n        anonymous: false,\n        inputs: [],\n        name: '',\n        type: 'event'\n    };\n    var match = fragment.match(regexParen);\n    if (!match) {\n        throw new Error('invalid event: ' + fragment);\n    }\n    abi.name = match[1].trim();\n    splitNesting(match[2]).forEach(function (param) {\n        param = parseParam(param, true);\n        param.indexed = !!param.indexed;\n        abi.inputs.push(param);\n    });\n    match[3].split(' ').forEach(function (modifier) {\n        switch (modifier) {\n            case 'anonymous':\n                abi.anonymous = true;\n                break;\n            case '':\n                break;\n            default:\n                errors.info('unknown modifier: ' + modifier);\n        }\n    });\n    if (abi.name && !abi.name.match(regexIdentifier)) {\n        throw new Error('invalid identifier: \"' + abi.name + '\"');\n    }\n    return abi;\n}\nfunction parseSignatureFunction(fragment) {\n    var abi = {\n        constant: false,\n        gas: null,\n        inputs: [],\n        name: '',\n        outputs: [],\n        payable: false,\n        stateMutability: null,\n        type: 'function'\n    };\n    var comps = fragment.split('@');\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            throw new Error('invalid signature');\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            throw new Error('invalid signature gas');\n        }\n        abi.gas = bignumber_1.bigNumberify(comps[1]);\n        fragment = comps[0];\n    }\n    comps = fragment.split(' returns ');\n    var left = comps[0].match(regexParen);\n    if (!left) {\n        throw new Error('invalid signature');\n    }\n    abi.name = left[1].trim();\n    if (!abi.name.match(regexIdentifier)) {\n        throw new Error('invalid identifier: \"' + left[1] + '\"');\n    }\n    splitNesting(left[2]).forEach(function (param) {\n        abi.inputs.push(parseParam(param));\n    });\n    left[3].split(' ').forEach(function (modifier) {\n        switch (modifier) {\n            case 'constant':\n                abi.constant = true;\n                break;\n            case 'payable':\n                abi.payable = true;\n                abi.stateMutability = 'payable';\n                break;\n            case 'pure':\n                abi.constant = true;\n                abi.stateMutability = 'pure';\n                break;\n            case 'view':\n                abi.constant = true;\n                abi.stateMutability = 'view';\n                break;\n            case 'external':\n            case 'public':\n            case '':\n                break;\n            default:\n                errors.info('unknown modifier: ' + modifier);\n        }\n    });\n    // We have outputs\n    if (comps.length > 1) {\n        var right = comps[1].match(regexParen);\n        if (right[1].trim() != '' || right[3].trim() != '') {\n            throw new Error('unexpected tokens');\n        }\n        splitNesting(right[2]).forEach(function (param) {\n            abi.outputs.push(parseParam(param));\n        });\n    }\n    if (abi.name === 'constructor') {\n        abi.type = \"constructor\";\n        if (abi.outputs.length) {\n            throw new Error('constructor may not have outputs');\n        }\n        delete abi.name;\n        delete abi.outputs;\n    }\n    return abi;\n}\nfunction parseParamType(type) {\n    return parseParam(type, true);\n}\nexports.parseParamType = parseParamType;\n// @TODO: Allow a second boolean to expose names\nfunction formatParamType(paramType) {\n    return getParamCoder(exports.defaultCoerceFunc, paramType).type;\n}\nexports.formatParamType = formatParamType;\n// @TODO: Allow a second boolean to expose names and modifiers\nfunction formatSignature(fragment) {\n    return fragment.name + '(' + fragment.inputs.map(function (i) { return formatParamType(i); }).join(',') + ')';\n}\nexports.formatSignature = formatSignature;\nfunction parseSignature(fragment) {\n    if (typeof (fragment) === 'string') {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        fragment = fragment.replace(/\\s/g, ' ');\n        fragment = fragment.replace(/\\(/g, ' (').replace(/\\)/g, ') ').replace(/\\s+/g, ' ');\n        fragment = fragment.trim();\n        if (fragment.substring(0, 6) === 'event ') {\n            return parseSignatureEvent(fragment.substring(6).trim());\n        }\n        else {\n            if (fragment.substring(0, 9) === 'function ') {\n                fragment = fragment.substring(9);\n            }\n            return parseSignatureFunction(fragment.trim());\n        }\n    }\n    throw new Error('unknown signature');\n}\nexports.parseSignature = parseSignature;\nvar Coder = /** @class */ (function () {\n    function Coder(coerceFunc, name, type, localName, dynamic) {\n        this.coerceFunc = coerceFunc;\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n    return Coder;\n}());\n// Clones the functionality of an existing Coder, but without a localName\nvar CoderAnonymous = /** @class */ (function (_super) {\n    __extends(CoderAnonymous, _super);\n    function CoderAnonymous(coder) {\n        var _this = _super.call(this, coder.coerceFunc, coder.name, coder.type, undefined, coder.dynamic) || this;\n        properties_1.defineReadOnly(_this, 'coder', coder);\n        return _this;\n    }\n    CoderAnonymous.prototype.encode = function (value) { return this.coder.encode(value); };\n    CoderAnonymous.prototype.decode = function (data, offset) { return this.coder.decode(data, offset); };\n    return CoderAnonymous;\n}(Coder));\nvar CoderNull = /** @class */ (function (_super) {\n    __extends(CoderNull, _super);\n    function CoderNull(coerceFunc, localName) {\n        return _super.call(this, coerceFunc, 'null', '', localName, false) || this;\n    }\n    CoderNull.prototype.encode = function (value) {\n        return bytes_1.arrayify([]);\n    };\n    CoderNull.prototype.decode = function (data, offset) {\n        if (offset > data.length) {\n            throw new Error('invalid null');\n        }\n        return {\n            consumed: 0,\n            value: this.coerceFunc('null', undefined)\n        };\n    };\n    return CoderNull;\n}(Coder));\nvar CoderNumber = /** @class */ (function (_super) {\n    __extends(CoderNumber, _super);\n    function CoderNumber(coerceFunc, size, signed, localName) {\n        var _this = this;\n        var name = ((signed ? 'int' : 'uint') + (size * 8));\n        _this = _super.call(this, coerceFunc, name, name, localName, false) || this;\n        _this.size = size;\n        _this.signed = signed;\n        return _this;\n    }\n    CoderNumber.prototype.encode = function (value) {\n        try {\n            var v = bignumber_1.bigNumberify(value);\n            if (this.signed) {\n                var bounds = constants_1.MaxUint256.maskn(this.size * 8 - 1);\n                if (v.gt(bounds)) {\n                    throw new Error('out-of-bounds');\n                }\n                bounds = bounds.add(constants_1.One).mul(constants_1.NegativeOne);\n                if (v.lt(bounds)) {\n                    throw new Error('out-of-bounds');\n                }\n            }\n            else if (v.lt(constants_1.Zero) || v.gt(constants_1.MaxUint256.maskn(this.size * 8))) {\n                throw new Error('out-of-bounds');\n            }\n            v = v.toTwos(this.size * 8).maskn(this.size * 8);\n            if (this.signed) {\n                v = v.fromTwos(this.size * 8).toTwos(256);\n            }\n            return bytes_1.padZeros(bytes_1.arrayify(v), 32);\n        }\n        catch (error) {\n            errors.throwError('invalid number value', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: this.name,\n                value: value\n            });\n        }\n        return null;\n    };\n    CoderNumber.prototype.decode = function (data, offset) {\n        if (data.length < offset + 32) {\n            errors.throwError('insufficient data for ' + this.name + ' type', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: this.name,\n                value: bytes_1.hexlify(data.slice(offset, offset + 32))\n            });\n        }\n        var junkLength = 32 - this.size;\n        var value = bignumber_1.bigNumberify(data.slice(offset + junkLength, offset + 32));\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n        else {\n            value = value.maskn(this.size * 8);\n        }\n        return {\n            consumed: 32,\n            value: this.coerceFunc(this.name, value),\n        };\n    };\n    return CoderNumber;\n}(Coder));\nvar uint256Coder = new CoderNumber(function (type, value) { return value; }, 32, false, 'none');\nvar CoderBoolean = /** @class */ (function (_super) {\n    __extends(CoderBoolean, _super);\n    function CoderBoolean(coerceFunc, localName) {\n        return _super.call(this, coerceFunc, 'bool', 'bool', localName, false) || this;\n    }\n    CoderBoolean.prototype.encode = function (value) {\n        return uint256Coder.encode(!!value ? 1 : 0);\n    };\n    CoderBoolean.prototype.decode = function (data, offset) {\n        try {\n            var result = uint256Coder.decode(data, offset);\n        }\n        catch (error) {\n            if (error.reason === 'insufficient data for uint256 type') {\n                errors.throwError('insufficient data for boolean type', errors.INVALID_ARGUMENT, {\n                    arg: this.localName,\n                    coderType: 'boolean',\n                    value: error.value\n                });\n            }\n            throw error;\n        }\n        return {\n            consumed: result.consumed,\n            value: this.coerceFunc('bool', !result.value.isZero())\n        };\n    };\n    return CoderBoolean;\n}(Coder));\nvar CoderFixedBytes = /** @class */ (function (_super) {\n    __extends(CoderFixedBytes, _super);\n    function CoderFixedBytes(coerceFunc, length, localName) {\n        var _this = this;\n        var name = ('bytes' + length);\n        _this = _super.call(this, coerceFunc, name, name, localName, false) || this;\n        _this.length = length;\n        return _this;\n    }\n    CoderFixedBytes.prototype.encode = function (value) {\n        var result = new Uint8Array(32);\n        try {\n            var data = bytes_1.arrayify(value);\n            if (data.length !== this.length) {\n                throw new Error('incorrect data length');\n            }\n            result.set(data);\n        }\n        catch (error) {\n            errors.throwError('invalid ' + this.name + ' value', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: this.name,\n                value: (error.value || value)\n            });\n        }\n        return result;\n    };\n    CoderFixedBytes.prototype.decode = function (data, offset) {\n        if (data.length < offset + 32) {\n            errors.throwError('insufficient data for ' + name + ' type', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: this.name,\n                value: bytes_1.hexlify(data.slice(offset, offset + 32))\n            });\n        }\n        return {\n            consumed: 32,\n            value: this.coerceFunc(this.name, bytes_1.hexlify(data.slice(offset, offset + this.length)))\n        };\n    };\n    return CoderFixedBytes;\n}(Coder));\nvar CoderAddress = /** @class */ (function (_super) {\n    __extends(CoderAddress, _super);\n    function CoderAddress(coerceFunc, localName) {\n        return _super.call(this, coerceFunc, 'address', 'address', localName, false) || this;\n    }\n    CoderAddress.prototype.encode = function (value) {\n        var result = new Uint8Array(32);\n        try {\n            result.set(bytes_1.arrayify(address_1.getAddress(value, false)), 12);\n        }\n        catch (error) {\n            errors.throwError('invalid address', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'address',\n                value: value\n            });\n        }\n        return result;\n    };\n    CoderAddress.prototype.decode = function (data, offset) {\n        if (data.length < offset + 32) {\n            errors.throwError('insufficuent data for address type', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'address',\n                value: bytes_1.hexlify(data.slice(offset, offset + 32))\n            });\n        }\n        return {\n            consumed: 32,\n            value: this.coerceFunc('address', address_1.getAddress(bytes_1.hexlify(data.slice(offset + 12, offset + 32)), false))\n        };\n    };\n    return CoderAddress;\n}(Coder));\nfunction _encodeDynamicBytes(value) {\n    var dataLength = 32 * Math.ceil(value.length / 32);\n    var padding = new Uint8Array(dataLength - value.length);\n    return bytes_1.concat([\n        uint256Coder.encode(value.length),\n        value,\n        padding\n    ]);\n}\nfunction _decodeDynamicBytes(data, offset, localName) {\n    if (data.length < offset + 32) {\n        errors.throwError('insufficient data for dynamicBytes length', errors.INVALID_ARGUMENT, {\n            arg: localName,\n            coderType: 'dynamicBytes',\n            value: bytes_1.hexlify(data.slice(offset, offset + 32))\n        });\n    }\n    var length = uint256Coder.decode(data, offset).value;\n    try {\n        length = length.toNumber();\n    }\n    catch (error) {\n        errors.throwError('dynamic bytes count too large', errors.INVALID_ARGUMENT, {\n            arg: localName,\n            coderType: 'dynamicBytes',\n            value: length.toString()\n        });\n    }\n    if (data.length < offset + 32 + length) {\n        errors.throwError('insufficient data for dynamicBytes type', errors.INVALID_ARGUMENT, {\n            arg: localName,\n            coderType: 'dynamicBytes',\n            value: bytes_1.hexlify(data.slice(offset, offset + 32 + length))\n        });\n    }\n    return {\n        consumed: 32 + 32 * Math.ceil(length / 32),\n        value: data.slice(offset + 32, offset + 32 + length),\n    };\n}\nvar CoderDynamicBytes = /** @class */ (function (_super) {\n    __extends(CoderDynamicBytes, _super);\n    function CoderDynamicBytes(coerceFunc, localName) {\n        return _super.call(this, coerceFunc, 'bytes', 'bytes', localName, true) || this;\n    }\n    CoderDynamicBytes.prototype.encode = function (value) {\n        try {\n            return _encodeDynamicBytes(bytes_1.arrayify(value));\n        }\n        catch (error) {\n            errors.throwError('invalid bytes value', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'bytes',\n                value: error.value\n            });\n        }\n        return null;\n    };\n    CoderDynamicBytes.prototype.decode = function (data, offset) {\n        var result = _decodeDynamicBytes(data, offset, this.localName);\n        result.value = this.coerceFunc('bytes', bytes_1.hexlify(result.value));\n        return result;\n    };\n    return CoderDynamicBytes;\n}(Coder));\nvar CoderString = /** @class */ (function (_super) {\n    __extends(CoderString, _super);\n    function CoderString(coerceFunc, localName) {\n        return _super.call(this, coerceFunc, 'string', 'string', localName, true) || this;\n    }\n    CoderString.prototype.encode = function (value) {\n        if (typeof (value) !== 'string') {\n            errors.throwError('invalid string value', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'string',\n                value: value\n            });\n        }\n        return _encodeDynamicBytes(utf8_1.toUtf8Bytes(value));\n    };\n    CoderString.prototype.decode = function (data, offset) {\n        var result = _decodeDynamicBytes(data, offset, this.localName);\n        result.value = this.coerceFunc('string', utf8_1.toUtf8String(result.value));\n        return result;\n    };\n    return CoderString;\n}(Coder));\nfunction alignSize(size) {\n    return 32 * Math.ceil(size / 32);\n}\nfunction pack(coders, values) {\n    if (Array.isArray(values)) {\n        // do nothing\n    }\n    else if (values && typeof (values) === 'object') {\n        var arrayValues = [];\n        coders.forEach(function (coder) {\n            arrayValues.push(values[coder.localName]);\n        });\n        values = arrayValues;\n    }\n    else {\n        errors.throwError('invalid tuple value', errors.INVALID_ARGUMENT, {\n            coderType: 'tuple',\n            value: values\n        });\n    }\n    if (coders.length !== values.length) {\n        errors.throwError('types/value length mismatch', errors.INVALID_ARGUMENT, {\n            coderType: 'tuple',\n            value: values\n        });\n    }\n    var parts = [];\n    coders.forEach(function (coder, index) {\n        parts.push({ dynamic: coder.dynamic, value: coder.encode(values[index]) });\n    });\n    var staticSize = 0, dynamicSize = 0;\n    parts.forEach(function (part) {\n        if (part.dynamic) {\n            staticSize += 32;\n            dynamicSize += alignSize(part.value.length);\n        }\n        else {\n            staticSize += alignSize(part.value.length);\n        }\n    });\n    var offset = 0, dynamicOffset = staticSize;\n    var data = new Uint8Array(staticSize + dynamicSize);\n    parts.forEach(function (part) {\n        if (part.dynamic) {\n            //uint256Coder.encode(dynamicOffset).copy(data, offset);\n            data.set(uint256Coder.encode(dynamicOffset), offset);\n            offset += 32;\n            //part.value.copy(data, dynamicOffset);  @TODO\n            data.set(part.value, dynamicOffset);\n            dynamicOffset += alignSize(part.value.length);\n        }\n        else {\n            //part.value.copy(data, offset);  @TODO\n            data.set(part.value, offset);\n            offset += alignSize(part.value.length);\n        }\n    });\n    return data;\n}\nfunction unpack(coders, data, offset) {\n    var baseOffset = offset;\n    var consumed = 0;\n    var value = [];\n    coders.forEach(function (coder) {\n        if (coder.dynamic) {\n            var dynamicOffset = uint256Coder.decode(data, offset);\n            var result = coder.decode(data, baseOffset + dynamicOffset.value.toNumber());\n            // The dynamic part is leap-frogged somewhere else; doesn't count towards size\n            result.consumed = dynamicOffset.consumed;\n        }\n        else {\n            var result = coder.decode(data, offset);\n        }\n        if (result.value != undefined) {\n            value.push(result.value);\n        }\n        offset += result.consumed;\n        consumed += result.consumed;\n    });\n    coders.forEach(function (coder, index) {\n        var name = coder.localName;\n        if (!name) {\n            return;\n        }\n        if (name === 'length') {\n            name = '_length';\n        }\n        if (value[name] != null) {\n            return;\n        }\n        value[name] = value[index];\n    });\n    return {\n        value: value,\n        consumed: consumed\n    };\n}\nvar CoderArray = /** @class */ (function (_super) {\n    __extends(CoderArray, _super);\n    function CoderArray(coerceFunc, coder, length, localName) {\n        var _this = this;\n        var type = (coder.type + '[' + (length >= 0 ? length : '') + ']');\n        var dynamic = (length === -1 || coder.dynamic);\n        _this = _super.call(this, coerceFunc, 'array', type, localName, dynamic) || this;\n        _this.coder = coder;\n        _this.length = length;\n        return _this;\n    }\n    CoderArray.prototype.encode = function (value) {\n        if (!Array.isArray(value)) {\n            errors.throwError('expected array value', errors.INVALID_ARGUMENT, {\n                arg: this.localName,\n                coderType: 'array',\n                value: value\n            });\n        }\n        var count = this.length;\n        var result = new Uint8Array(0);\n        if (count === -1) {\n            count = value.length;\n            result = uint256Coder.encode(count);\n        }\n        errors.checkArgumentCount(count, value.length, ' in coder array' + (this.localName ? (\" \" + this.localName) : \"\"));\n        var coders = [];\n        for (var i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return bytes_1.concat([result, pack(coders, value)]);\n    };\n    CoderArray.prototype.decode = function (data, offset) {\n        // @TODO:\n        //if (data.length < offset + length * 32) { throw new Error('invalid array'); }\n        var consumed = 0;\n        var count = this.length;\n        if (count === -1) {\n            try {\n                var decodedLength = uint256Coder.decode(data, offset);\n            }\n            catch (error) {\n                errors.throwError('insufficient data for dynamic array length', errors.INVALID_ARGUMENT, {\n                    arg: this.localName,\n                    coderType: 'array',\n                    value: error.value\n                });\n            }\n            try {\n                count = decodedLength.value.toNumber();\n            }\n            catch (error) {\n                errors.throwError('array count too large', errors.INVALID_ARGUMENT, {\n                    arg: this.localName,\n                    coderType: 'array',\n                    value: decodedLength.value.toString()\n                });\n            }\n            consumed += decodedLength.consumed;\n            offset += decodedLength.consumed;\n        }\n        var coders = [];\n        for (var i = 0; i < count; i++) {\n            coders.push(new CoderAnonymous(this.coder));\n        }\n        var result = unpack(coders, data, offset);\n        result.consumed += consumed;\n        result.value = this.coerceFunc(this.type, result.value);\n        return result;\n    };\n    return CoderArray;\n}(Coder));\nvar CoderTuple = /** @class */ (function (_super) {\n    __extends(CoderTuple, _super);\n    function CoderTuple(coerceFunc, coders, localName) {\n        var _this = this;\n        var dynamic = false;\n        var types = [];\n        coders.forEach(function (coder) {\n            if (coder.dynamic) {\n                dynamic = true;\n            }\n            types.push(coder.type);\n        });\n        var type = ('tuple(' + types.join(',') + ')');\n        _this = _super.call(this, coerceFunc, 'tuple', type, localName, dynamic) || this;\n        _this.coders = coders;\n        return _this;\n    }\n    CoderTuple.prototype.encode = function (value) {\n        return pack(this.coders, value);\n    };\n    CoderTuple.prototype.decode = function (data, offset) {\n        var result = unpack(this.coders, data, offset);\n        result.value = this.coerceFunc(this.type, result.value);\n        return result;\n    };\n    return CoderTuple;\n}(Coder));\n/*\nfunction getTypes(coders) {\n    var type = coderTuple(coders).type;\n    return type.substring(6, type.length - 1);\n}\n*/\nfunction splitNesting(value) {\n    value = value.trim();\n    var result = [];\n    var accum = '';\n    var depth = 0;\n    for (var offset = 0; offset < value.length; offset++) {\n        var c = value[offset];\n        if (c === ',' && depth === 0) {\n            result.push(accum);\n            accum = '';\n        }\n        else {\n            accum += c;\n            if (c === '(') {\n                depth++;\n            }\n            else if (c === ')') {\n                depth--;\n                if (depth === -1) {\n                    throw new Error('unbalanced parenthsis');\n                }\n            }\n        }\n    }\n    if (accum) {\n        result.push(accum);\n    }\n    return result;\n}\n// @TODO: Is there a way to return \"class\"?\nvar paramTypeSimple = {\n    address: CoderAddress,\n    bool: CoderBoolean,\n    string: CoderString,\n    bytes: CoderDynamicBytes,\n};\nfunction getTupleParamCoder(coerceFunc, components, localName) {\n    if (!components) {\n        components = [];\n    }\n    var coders = [];\n    components.forEach(function (component) {\n        coders.push(getParamCoder(coerceFunc, component));\n    });\n    return new CoderTuple(coerceFunc, coders, localName);\n}\nfunction getParamCoder(coerceFunc, param) {\n    var coder = paramTypeSimple[param.type];\n    if (coder) {\n        return new coder(coerceFunc, param.name);\n    }\n    var match = param.type.match(paramTypeNumber);\n    if (match) {\n        var size = parseInt(match[2] || \"256\");\n        if (size === 0 || size > 256 || (size % 8) !== 0) {\n            errors.throwError('invalid ' + match[1] + ' bit length', errors.INVALID_ARGUMENT, {\n                arg: 'param',\n                value: param\n            });\n        }\n        return new CoderNumber(coerceFunc, size / 8, (match[1] === 'int'), param.name);\n    }\n    var match = param.type.match(paramTypeBytes);\n    if (match) {\n        var size = parseInt(match[1]);\n        if (size === 0 || size > 32) {\n            errors.throwError('invalid bytes length', errors.INVALID_ARGUMENT, {\n                arg: 'param',\n                value: param\n            });\n        }\n        return new CoderFixedBytes(coerceFunc, size, param.name);\n    }\n    var match = param.type.match(paramTypeArray);\n    if (match) {\n        var size = parseInt(match[2] || \"-1\");\n        param = properties_1.shallowCopy(param);\n        param.type = match[1];\n        param = properties_1.deepCopy(param);\n        return new CoderArray(coerceFunc, getParamCoder(coerceFunc, param), size, param.name);\n    }\n    if (param.type.substring(0, 5) === 'tuple') {\n        return getTupleParamCoder(coerceFunc, param.components, param.name);\n    }\n    if (param.type === '') {\n        return new CoderNull(coerceFunc, param.name);\n    }\n    errors.throwError('invalid type', errors.INVALID_ARGUMENT, {\n        arg: 'type',\n        value: param.type\n    });\n    return null;\n}\nvar AbiCoder = /** @class */ (function () {\n    function AbiCoder(coerceFunc) {\n        errors.checkNew(this, AbiCoder);\n        if (!coerceFunc) {\n            coerceFunc = exports.defaultCoerceFunc;\n        }\n        properties_1.defineReadOnly(this, 'coerceFunc', coerceFunc);\n    }\n    AbiCoder.prototype.encode = function (types, values) {\n        if (types.length !== values.length) {\n            errors.throwError('types/values length mismatch', errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n        var coders = [];\n        types.forEach(function (type) {\n            // Convert types to type objects\n            //   - \"uint foo\" => { type: \"uint\", name: \"foo\" }\n            //   - \"tuple(uint, uint)\" => { type: \"tuple\", components: [ { type: \"uint\" }, { type: \"uint\" }, ] }\n            var typeObject = null;\n            if (typeof (type) === 'string') {\n                typeObject = parseParam(type);\n            }\n            else {\n                typeObject = type;\n            }\n            coders.push(getParamCoder(this.coerceFunc, typeObject));\n        }, this);\n        return bytes_1.hexlify(new CoderTuple(this.coerceFunc, coders, '_').encode(values));\n    };\n    AbiCoder.prototype.decode = function (types, data) {\n        var coders = [];\n        types.forEach(function (type) {\n            // See encode for details\n            var typeObject = null;\n            if (typeof (type) === 'string') {\n                typeObject = parseParam(type);\n            }\n            else {\n                typeObject = properties_1.deepCopy(type);\n            }\n            coders.push(getParamCoder(this.coerceFunc, typeObject));\n        }, this);\n        return new CoderTuple(this.coerceFunc, coders, '_').decode(bytes_1.arrayify(data), 0).value;\n    };\n    return AbiCoder;\n}());\nexports.AbiCoder = AbiCoder;\nexports.defaultAbiCoder = new AbiCoder();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/abi-coder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/address.js":
/*!*******************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/address.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// We use this for base 36 maths\nvar bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/@vechain/ethers/node_modules/bn.js/lib/bn.js\"));\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\");\nvar keccak256_1 = __webpack_require__(/*! ./keccak256 */ \"(ssr)/./node_modules/@vechain/ethers/utils/keccak256.js\");\nvar rlp_1 = __webpack_require__(/*! ./rlp */ \"(ssr)/./node_modules/@vechain/ethers/utils/rlp.js\");\nvar errors = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@vechain/ethers/errors.js\");\n///////////////////////////////\nfunction getChecksumAddress(address) {\n    if (typeof (address) !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {\n        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });\n    }\n    address = address.toLowerCase();\n    var chars = address.substring(2).split('');\n    var hashed = new Uint8Array(40);\n    for (var i_1 = 0; i_1 < 40; i_1++) {\n        hashed[i_1] = chars[i_1].charCodeAt(0);\n    }\n    hashed = bytes_1.arrayify(keccak256_1.keccak256(hashed));\n    for (var i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n    return '0x' + chars.join('');\n}\n// Shims for environments that are missing some required constants and functions\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n    if (Math.log10) {\n        return Math.log10(x);\n    }\n    return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nvar ibanLookup = {};\nfor (var i = 0; i < 10; i++) {\n    ibanLookup[String(i)] = String(i);\n}\nfor (var i = 0; i < 26; i++) {\n    ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nvar safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + '00';\n    var expanded = '';\n    address.split('').forEach(function (c) {\n        expanded += ibanLookup[c];\n    });\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits) {\n        var block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n    var checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) {\n        checksum = '0' + checksum;\n    }\n    return checksum;\n}\n;\nfunction getAddress(address, checksum) {\n    if (checksum === void 0) { checksum = true; }\n    var result = null;\n    if (typeof (address) !== 'string') {\n        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });\n    }\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== '0x') {\n            address = '0x' + address;\n        }\n        if (checksum) {\n            result = getChecksumAddress(address);\n            // It is a checksummed address with a bad checksum\n            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n                errors.throwError('bad address checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });\n            }\n        }\n        else {\n            result = address;\n        }\n        // Maybe ICAP? (we only support direct mode)\n    }\n    else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            errors.throwError('bad icap checksum', errors.INVALID_ARGUMENT, { arg: 'address', value: address });\n        }\n        result = (new bn_js_1.default.BN(address.substring(4), 36)).toString(16);\n        while (result.length < 40) {\n            result = '0' + result;\n        }\n        result = checksum ? getChecksumAddress('0x' + result) : '0x' + result;\n    }\n    else {\n        errors.throwError('invalid address', errors.INVALID_ARGUMENT, { arg: 'address', value: address });\n    }\n    return result;\n}\nexports.getAddress = getAddress;\nfunction getIcapAddress(address) {\n    var base36 = (new bn_js_1.default.BN(getAddress(address).substring(2), 16)).toString(36).toUpperCase();\n    while (base36.length < 30) {\n        base36 = '0' + base36;\n    }\n    return 'XE' + ibanChecksum('XE00' + base36) + base36;\n}\nexports.getIcapAddress = getIcapAddress;\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nfunction getContractAddress(transaction) {\n    if (!transaction.from) {\n        throw new Error('missing from address');\n    }\n    var nonce = transaction.nonce;\n    return getAddress('0x' + keccak256_1.keccak256(rlp_1.encode([\n        getAddress(transaction.from),\n        bytes_1.stripZeros(bytes_1.hexlify(nonce))\n    ])).substring(26));\n}\nexports.getContractAddress = getContractAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL2FkZHJlc3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBLDhCQUE4QixtQkFBTyxDQUFDLGdGQUFPO0FBQzdDLGNBQWMsbUJBQU8sQ0FBQyxvRUFBUztBQUMvQixrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBYTtBQUN2QyxZQUFZLG1CQUFPLENBQUMsZ0VBQU87QUFDM0IsYUFBYSxtQkFBTyxDQUFDLGlFQUFXO0FBQ2hDO0FBQ0E7QUFDQSx3RUFBd0UsR0FBRztBQUMzRSx3RUFBd0UsZ0NBQWdDO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLFVBQVU7QUFDaEM7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0Esd0VBQXdFLGdDQUFnQztBQUN4RztBQUNBLHlDQUF5QyxHQUFHO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsZ0NBQWdDO0FBQ3JIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLEVBQUUsWUFBWSxNQUFNO0FBQ3pEO0FBQ0E7QUFDQSw4RUFBOEUsZ0NBQWdDO0FBQzlHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsZ0NBQWdDO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVyZWF2ZW1lbnQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL2FkZHJlc3MuanM/ZmFkZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBXZSB1c2UgdGhpcyBmb3IgYmFzZSAzNiBtYXRoc1xudmFyIGJuX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImJuLmpzXCIpKTtcbnZhciBieXRlc18xID0gcmVxdWlyZShcIi4vYnl0ZXNcIik7XG52YXIga2VjY2FrMjU2XzEgPSByZXF1aXJlKFwiLi9rZWNjYWsyNTZcIik7XG52YXIgcmxwXzEgPSByZXF1aXJlKFwiLi9ybHBcIik7XG52YXIgZXJyb3JzID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZ1bmN0aW9uIGdldENoZWNrc3VtQWRkcmVzcyhhZGRyZXNzKSB7XG4gICAgaWYgKHR5cGVvZiAoYWRkcmVzcykgIT09ICdzdHJpbmcnIHx8ICFhZGRyZXNzLm1hdGNoKC9eMHhbMC05QS1GYS1mXXs0MH0kLykpIHtcbiAgICAgICAgZXJyb3JzLnRocm93RXJyb3IoJ2ludmFsaWQgYWRkcmVzcycsIGVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7IGFyZzogJ2FkZHJlc3MnLCB2YWx1ZTogYWRkcmVzcyB9KTtcbiAgICB9XG4gICAgYWRkcmVzcyA9IGFkZHJlc3MudG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgY2hhcnMgPSBhZGRyZXNzLnN1YnN0cmluZygyKS5zcGxpdCgnJyk7XG4gICAgdmFyIGhhc2hlZCA9IG5ldyBVaW50OEFycmF5KDQwKTtcbiAgICBmb3IgKHZhciBpXzEgPSAwOyBpXzEgPCA0MDsgaV8xKyspIHtcbiAgICAgICAgaGFzaGVkW2lfMV0gPSBjaGFyc1tpXzFdLmNoYXJDb2RlQXQoMCk7XG4gICAgfVxuICAgIGhhc2hlZCA9IGJ5dGVzXzEuYXJyYXlpZnkoa2VjY2FrMjU2XzEua2VjY2FrMjU2KGhhc2hlZCkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDA7IGkgKz0gMikge1xuICAgICAgICBpZiAoKGhhc2hlZFtpID4+IDFdID4+IDQpID49IDgpIHtcbiAgICAgICAgICAgIGNoYXJzW2ldID0gY2hhcnNbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhhc2hlZFtpID4+IDFdICYgMHgwZikgPj0gOCkge1xuICAgICAgICAgICAgY2hhcnNbaSArIDFdID0gY2hhcnNbaSArIDFdLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcweCcgKyBjaGFycy5qb2luKCcnKTtcbn1cbi8vIFNoaW1zIGZvciBlbnZpcm9ubWVudHMgdGhhdCBhcmUgbWlzc2luZyBzb21lIHJlcXVpcmVkIGNvbnN0YW50cyBhbmQgZnVuY3Rpb25zXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MWZmZmZmZmZmZmZmZmY7XG5mdW5jdGlvbiBsb2cxMCh4KSB7XG4gICAgaWYgKE1hdGgubG9nMTApIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubG9nMTAoeCk7XG4gICAgfVxuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4xMDtcbn1cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9CYW5rX0FjY291bnRfTnVtYmVyXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlXG52YXIgaWJhbkxvb2t1cCA9IHt9O1xuZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG4gICAgaWJhbkxvb2t1cFtTdHJpbmcoaSldID0gU3RyaW5nKGkpO1xufVxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNjsgaSsrKSB7XG4gICAgaWJhbkxvb2t1cFtTdHJpbmcuZnJvbUNoYXJDb2RlKDY1ICsgaSldID0gU3RyaW5nKDEwICsgaSk7XG59XG4vLyBIb3cgbWFueSBkZWNpbWFsIGRpZ2l0cyBjYW4gd2UgcHJvY2Vzcz8gKGZvciA2NC1iaXQgZmxvYXQsIHRoaXMgaXMgMTUpXG52YXIgc2FmZURpZ2l0cyA9IE1hdGguZmxvb3IobG9nMTAoTUFYX1NBRkVfSU5URUdFUikpO1xuZnVuY3Rpb24gaWJhbkNoZWNrc3VtKGFkZHJlc3MpIHtcbiAgICBhZGRyZXNzID0gYWRkcmVzcy50b1VwcGVyQ2FzZSgpO1xuICAgIGFkZHJlc3MgPSBhZGRyZXNzLnN1YnN0cmluZyg0KSArIGFkZHJlc3Muc3Vic3RyaW5nKDAsIDIpICsgJzAwJztcbiAgICB2YXIgZXhwYW5kZWQgPSAnJztcbiAgICBhZGRyZXNzLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGV4cGFuZGVkICs9IGliYW5Mb29rdXBbY107XG4gICAgfSk7XG4gICAgLy8gSmF2YXNjcmlwdCBjYW4gaGFuZGxlIGludGVnZXJzIHNhZmVseSB1cCB0byAxNSAoZGVjaW1hbCkgZGlnaXRzXG4gICAgd2hpbGUgKGV4cGFuZGVkLmxlbmd0aCA+PSBzYWZlRGlnaXRzKSB7XG4gICAgICAgIHZhciBibG9jayA9IGV4cGFuZGVkLnN1YnN0cmluZygwLCBzYWZlRGlnaXRzKTtcbiAgICAgICAgZXhwYW5kZWQgPSBwYXJzZUludChibG9jaywgMTApICUgOTcgKyBleHBhbmRlZC5zdWJzdHJpbmcoYmxvY2subGVuZ3RoKTtcbiAgICB9XG4gICAgdmFyIGNoZWNrc3VtID0gU3RyaW5nKDk4IC0gKHBhcnNlSW50KGV4cGFuZGVkLCAxMCkgJSA5NykpO1xuICAgIHdoaWxlIChjaGVja3N1bS5sZW5ndGggPCAyKSB7XG4gICAgICAgIGNoZWNrc3VtID0gJzAnICsgY2hlY2tzdW07XG4gICAgfVxuICAgIHJldHVybiBjaGVja3N1bTtcbn1cbjtcbmZ1bmN0aW9uIGdldEFkZHJlc3MoYWRkcmVzcywgY2hlY2tzdW0pIHtcbiAgICBpZiAoY2hlY2tzdW0gPT09IHZvaWQgMCkgeyBjaGVja3N1bSA9IHRydWU7IH1cbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIChhZGRyZXNzKSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXJyb3JzLnRocm93RXJyb3IoJ2ludmFsaWQgYWRkcmVzcycsIGVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7IGFyZzogJ2FkZHJlc3MnLCB2YWx1ZTogYWRkcmVzcyB9KTtcbiAgICB9XG4gICAgaWYgKGFkZHJlc3MubWF0Y2goL14oMHgpP1swLTlhLWZBLUZdezQwfSQvKSkge1xuICAgICAgICAvLyBNaXNzaW5nIHRoZSAweCBwcmVmaXhcbiAgICAgICAgaWYgKGFkZHJlc3Muc3Vic3RyaW5nKDAsIDIpICE9PSAnMHgnKSB7XG4gICAgICAgICAgICBhZGRyZXNzID0gJzB4JyArIGFkZHJlc3M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoZWNrc3VtKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBnZXRDaGVja3N1bUFkZHJlc3MoYWRkcmVzcyk7XG4gICAgICAgICAgICAvLyBJdCBpcyBhIGNoZWNrc3VtbWVkIGFkZHJlc3Mgd2l0aCBhIGJhZCBjaGVja3N1bVxuICAgICAgICAgICAgaWYgKGFkZHJlc3MubWF0Y2goLyhbQS1GXS4qW2EtZl0pfChbYS1mXS4qW0EtRl0pLykgJiYgcmVzdWx0ICE9PSBhZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JzLnRocm93RXJyb3IoJ2JhZCBhZGRyZXNzIGNoZWNrc3VtJywgZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHsgYXJnOiAnYWRkcmVzcycsIHZhbHVlOiBhZGRyZXNzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gYWRkcmVzcztcbiAgICAgICAgfVxuICAgICAgICAvLyBNYXliZSBJQ0FQPyAod2Ugb25seSBzdXBwb3J0IGRpcmVjdCBtb2RlKVxuICAgIH1cbiAgICBlbHNlIGlmIChhZGRyZXNzLm1hdGNoKC9eWEVbMC05XXsyfVswLTlBLVphLXpdezMwLDMxfSQvKSkge1xuICAgICAgICAvLyBJdCBpcyBhbiBJQ0FQIGFkZHJlc3Mgd2l0aCBhIGJhZCBjaGVja3N1bVxuICAgICAgICBpZiAoYWRkcmVzcy5zdWJzdHJpbmcoMiwgNCkgIT09IGliYW5DaGVja3N1bShhZGRyZXNzKSkge1xuICAgICAgICAgICAgZXJyb3JzLnRocm93RXJyb3IoJ2JhZCBpY2FwIGNoZWNrc3VtJywgZXJyb3JzLklOVkFMSURfQVJHVU1FTlQsIHsgYXJnOiAnYWRkcmVzcycsIHZhbHVlOiBhZGRyZXNzIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IChuZXcgYm5fanNfMS5kZWZhdWx0LkJOKGFkZHJlc3Muc3Vic3RyaW5nKDQpLCAzNikpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgd2hpbGUgKHJlc3VsdC5sZW5ndGggPCA0MCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gJzAnICsgcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IGNoZWNrc3VtID8gZ2V0Q2hlY2tzdW1BZGRyZXNzKCcweCcgKyByZXN1bHQpIDogJzB4JyArIHJlc3VsdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGVycm9ycy50aHJvd0Vycm9yKCdpbnZhbGlkIGFkZHJlc3MnLCBlcnJvcnMuSU5WQUxJRF9BUkdVTUVOVCwgeyBhcmc6ICdhZGRyZXNzJywgdmFsdWU6IGFkZHJlc3MgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdldEFkZHJlc3MgPSBnZXRBZGRyZXNzO1xuZnVuY3Rpb24gZ2V0SWNhcEFkZHJlc3MoYWRkcmVzcykge1xuICAgIHZhciBiYXNlMzYgPSAobmV3IGJuX2pzXzEuZGVmYXVsdC5CTihnZXRBZGRyZXNzKGFkZHJlc3MpLnN1YnN0cmluZygyKSwgMTYpKS50b1N0cmluZygzNikudG9VcHBlckNhc2UoKTtcbiAgICB3aGlsZSAoYmFzZTM2Lmxlbmd0aCA8IDMwKSB7XG4gICAgICAgIGJhc2UzNiA9ICcwJyArIGJhc2UzNjtcbiAgICB9XG4gICAgcmV0dXJuICdYRScgKyBpYmFuQ2hlY2tzdW0oJ1hFMDAnICsgYmFzZTM2KSArIGJhc2UzNjtcbn1cbmV4cG9ydHMuZ2V0SWNhcEFkZHJlc3MgPSBnZXRJY2FwQWRkcmVzcztcbi8vIGh0dHA6Ly9ldGhlcmV1bS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvNzYwL2hvdy1pcy10aGUtYWRkcmVzcy1vZi1hbi1ldGhlcmV1bS1jb250cmFjdC1jb21wdXRlZFxuZnVuY3Rpb24gZ2V0Q29udHJhY3RBZGRyZXNzKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKCF0cmFuc2FjdGlvbi5mcm9tKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWlzc2luZyBmcm9tIGFkZHJlc3MnKTtcbiAgICB9XG4gICAgdmFyIG5vbmNlID0gdHJhbnNhY3Rpb24ubm9uY2U7XG4gICAgcmV0dXJuIGdldEFkZHJlc3MoJzB4JyArIGtlY2NhazI1Nl8xLmtlY2NhazI1NihybHBfMS5lbmNvZGUoW1xuICAgICAgICBnZXRBZGRyZXNzKHRyYW5zYWN0aW9uLmZyb20pLFxuICAgICAgICBieXRlc18xLnN0cmlwWmVyb3MoYnl0ZXNfMS5oZXhsaWZ5KG5vbmNlKSlcbiAgICBdKSkuc3Vic3RyaW5nKDI2KSk7XG59XG5leHBvcnRzLmdldENvbnRyYWN0QWRkcmVzcyA9IGdldENvbnRyYWN0QWRkcmVzcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/bignumber.js":
/*!*********************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/bignumber.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\nvar bn_js_1 = __importDefault(__webpack_require__(/*! bn.js */ \"(ssr)/./node_modules/@vechain/ethers/node_modules/bn.js/lib/bn.js\"));\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\");\nvar properties_1 = __webpack_require__(/*! ./properties */ \"(ssr)/./node_modules/@vechain/ethers/utils/properties.js\");\nvar errors = __importStar(__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@vechain/ethers/errors.js\"));\nvar BN_1 = new bn_js_1.default.BN(-1);\nfunction toHex(bn) {\n    var value = bn.toString(16);\n    if (value[0] === '-') {\n        if ((value.length % 2) === 0) {\n            return '-0x0' + value.substring(1);\n        }\n        return \"-0x\" + value.substring(1);\n    }\n    if ((value.length % 2) === 1) {\n        return '0x0' + value;\n    }\n    return '0x' + value;\n}\nfunction toBN(value) {\n    return _bnify(bigNumberify(value));\n}\nfunction toBigNumber(bn) {\n    return new BigNumber(toHex(bn));\n}\nfunction _bnify(value) {\n    var hex = value._hex;\n    if (hex[0] === '-') {\n        return (new bn_js_1.default.BN(hex.substring(3), 16)).mul(BN_1);\n    }\n    return new bn_js_1.default.BN(hex.substring(2), 16);\n}\nvar BigNumber = /** @class */ (function () {\n    function BigNumber(value) {\n        errors.checkNew(this, BigNumber);\n        properties_1.setType(this, 'BigNumber');\n        if (typeof (value) === 'string') {\n            if (bytes_1.isHexString(value)) {\n                if (value == '0x') {\n                    value = '0x0';\n                }\n                properties_1.defineReadOnly(this, '_hex', value);\n            }\n            else if (value[0] === '-' && bytes_1.isHexString(value.substring(1))) {\n                properties_1.defineReadOnly(this, '_hex', value);\n            }\n            else if (value.match(/^-?[0-9]*$/)) {\n                if (value == '') {\n                    value = '0';\n                }\n                properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));\n            }\n            else {\n                errors.throwError('invalid BigNumber string value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n            }\n        }\n        else if (typeof (value) === 'number') {\n            if (parseInt(String(value)) !== value) {\n                errors.throwError('underflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'underflow', value: value, outputValue: parseInt(String(value)) });\n            }\n            try {\n                properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(value)));\n            }\n            catch (error) {\n                errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });\n            }\n        }\n        else if (value instanceof BigNumber) {\n            properties_1.defineReadOnly(this, '_hex', value._hex);\n        }\n        else if (value.toHexString) {\n            properties_1.defineReadOnly(this, '_hex', toHex(toBN(value.toHexString())));\n        }\n        else if (value._hex && bytes_1.isHexString(value._hex)) {\n            properties_1.defineReadOnly(this, '_hex', value._hex);\n        }\n        else if (bytes_1.isArrayish(value)) {\n            properties_1.defineReadOnly(this, '_hex', toHex(new bn_js_1.default.BN(bytes_1.hexlify(value).substring(2), 16)));\n        }\n        else {\n            errors.throwError('invalid BigNumber value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n    }\n    BigNumber.prototype.fromTwos = function (value) {\n        return toBigNumber(_bnify(this).fromTwos(value));\n    };\n    BigNumber.prototype.toTwos = function (value) {\n        return toBigNumber(_bnify(this).toTwos(value));\n    };\n    BigNumber.prototype.abs = function () {\n        if (this._hex[0] === '-') {\n            return toBigNumber(_bnify(this).mul(BN_1));\n        }\n        return this;\n    };\n    BigNumber.prototype.add = function (other) {\n        return toBigNumber(_bnify(this).add(toBN(other)));\n    };\n    BigNumber.prototype.sub = function (other) {\n        return toBigNumber(_bnify(this).sub(toBN(other)));\n    };\n    BigNumber.prototype.div = function (other) {\n        var o = bigNumberify(other);\n        if (o.isZero()) {\n            errors.throwError('division by zero', errors.NUMERIC_FAULT, { operation: 'divide', fault: 'division by zero' });\n        }\n        return toBigNumber(_bnify(this).div(toBN(other)));\n    };\n    BigNumber.prototype.mul = function (other) {\n        return toBigNumber(_bnify(this).mul(toBN(other)));\n    };\n    BigNumber.prototype.mod = function (other) {\n        return toBigNumber(_bnify(this).mod(toBN(other)));\n    };\n    BigNumber.prototype.pow = function (other) {\n        return toBigNumber(_bnify(this).pow(toBN(other)));\n    };\n    BigNumber.prototype.maskn = function (value) {\n        return toBigNumber(_bnify(this).maskn(value));\n    };\n    BigNumber.prototype.eq = function (other) {\n        return _bnify(this).eq(toBN(other));\n    };\n    BigNumber.prototype.lt = function (other) {\n        return _bnify(this).lt(toBN(other));\n    };\n    BigNumber.prototype.lte = function (other) {\n        return _bnify(this).lte(toBN(other));\n    };\n    BigNumber.prototype.gt = function (other) {\n        return _bnify(this).gt(toBN(other));\n    };\n    BigNumber.prototype.gte = function (other) {\n        return _bnify(this).gte(toBN(other));\n    };\n    BigNumber.prototype.isZero = function () {\n        return _bnify(this).isZero();\n    };\n    BigNumber.prototype.toNumber = function () {\n        try {\n            return _bnify(this).toNumber();\n        }\n        catch (error) {\n            errors.throwError('overflow', errors.NUMERIC_FAULT, { operation: 'setValue', fault: 'overflow', details: error.message });\n        }\n        return null;\n    };\n    BigNumber.prototype.toString = function () {\n        return _bnify(this).toString(10);\n    };\n    BigNumber.prototype.toHexString = function () {\n        return this._hex;\n    };\n    BigNumber.isBigNumber = function (value) {\n        return properties_1.isType(value, 'BigNumber');\n    };\n    return BigNumber;\n}());\nexports.BigNumber = BigNumber;\nfunction bigNumberify(value) {\n    if (BigNumber.isBigNumber(value)) {\n        return value;\n    }\n    return new BigNumber(value);\n}\nexports.bigNumberify = bigNumberify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/bignumber.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/bytes.js":
/*!*****************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/bytes.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n *  Conversion Utilities\n *\n */\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar errors = __importStar(__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@vechain/ethers/errors.js\"));\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nexports.isHexable = isHexable;\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        var args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nfunction isArrayish(value) {\n    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {\n        return false;\n    }\n    for (var i = 0; i < value.length; i++) {\n        var v = value[i];\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayish = isArrayish;\nfunction arrayify(value) {\n    if (value == null) {\n        errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        value = value.substring(2);\n        if (value.length % 2) {\n            value = '0' + value;\n        }\n        var result = [];\n        for (var i = 0; i < value.length; i += 2) {\n            result.push(parseInt(value.substr(i, 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isArrayish(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });\n    return null;\n}\nexports.arrayify = arrayify;\nfunction concat(objects) {\n    var arrays = [];\n    var length = 0;\n    for (var i = 0; i < objects.length; i++) {\n        var object = arrayify(objects[i]);\n        arrays.push(object);\n        length += object.length;\n    }\n    var result = new Uint8Array(length);\n    var offset = 0;\n    for (var i = 0; i < arrays.length; i++) {\n        result.set(arrays[i], offset);\n        offset += arrays[i].length;\n    }\n    return addSlice(result);\n}\nexports.concat = concat;\nfunction stripZeros(value) {\n    var result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    var start = 0;\n    while (result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexports.stripZeros = stripZeros;\nfunction padZeros(value, length) {\n    value = arrayify(value);\n    if (length < value.length) {\n        throw new Error('cannot pad');\n    }\n    var result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexports.padZeros = padZeros;\nfunction isHexString(value, length) {\n    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nexports.isHexString = isHexString;\nvar HexCharacters = '0123456789abcdef';\nfunction hexlify(value) {\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (typeof (value) === 'number') {\n        if (value < 0) {\n            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        // @TODO: Roll this into the above error as a numeric fault (overflow); next version, not backward compatible\n        // We can about (value == MAX_INT) to as well, since that may indicate we underflowed already\n        if (value >= 9007199254740991) {\n            errors.throwError(\"out-of-range\", errors.NUMERIC_FAULT, {\n                operartion: \"hexlify\",\n                fault: \"out-of-safe-range\"\n            });\n        }\n        var hex = '';\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = '0' + hex;\n            }\n            return '0x' + hex;\n        }\n        return '0x00';\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (value.length % 2) {\n            value = '0x0' + value.substring(2);\n        }\n        return value;\n    }\n    if (isArrayish(value)) {\n        var result = [];\n        for (var i = 0; i < value.length; i++) {\n            var v = value[i];\n            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n        }\n        return '0x' + result.join('');\n    }\n    errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });\n    return 'never';\n}\nexports.hexlify = hexlify;\nfunction hexDataLength(data) {\n    if (!isHexString(data) || (data.length % 2) !== 0) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexports.hexDataLength = hexDataLength;\nfunction hexDataSlice(data, offset, endOffset) {\n    if (!isHexString(data)) {\n        errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    if ((data.length % 2) !== 0) {\n        errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return '0x' + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return '0x' + data.substring(offset);\n}\nexports.hexDataSlice = hexDataSlice;\nfunction hexStripZeros(value) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length > 3 && value.substring(0, 3) === '0x0') {\n        value = '0x' + value.substring(3);\n    }\n    return value;\n}\nexports.hexStripZeros = hexStripZeros;\nfunction hexZeroPad(value, length) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length < 2 * length + 2) {\n        value = '0x0' + value.substring(2);\n    }\n    return value;\n}\nexports.hexZeroPad = hexZeroPad;\nfunction isSignature(value) {\n    return (value && value.r != null && value.s != null);\n}\nfunction splitSignature(signature) {\n    var v = 0;\n    var r = '0x', s = '0x';\n    if (isSignature(signature)) {\n        if (signature.v == null && signature.recoveryParam == null) {\n            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });\n        }\n        r = hexZeroPad(signature.r, 32);\n        s = hexZeroPad(signature.s, 32);\n        v = signature.v;\n        if (typeof (v) === 'string') {\n            v = parseInt(v, 16);\n        }\n        var recoveryParam = signature.recoveryParam;\n        if (recoveryParam == null && signature.v != null) {\n            recoveryParam = 1 - (v % 2);\n        }\n        v = 27 + recoveryParam;\n    }\n    else {\n        var bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            throw new Error('invalid signature');\n        }\n        r = hexlify(bytes.slice(0, 32));\n        s = hexlify(bytes.slice(32, 64));\n        v = bytes[64];\n        if (v !== 27 && v !== 28) {\n            v = 27 + (v % 2);\n        }\n    }\n    return {\n        r: r,\n        s: s,\n        recoveryParam: (v - 27),\n        v: v\n    };\n}\nexports.splitSignature = splitSignature;\nfunction joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? '0x1c' : '0x1b')\n    ]));\n}\nexports.joinSignature = joinSignature;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/keccak256.js":
/*!*********************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/keccak256.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar sha3 = __webpack_require__(/*! js-sha3 */ \"(ssr)/./node_modules/js-sha3/src/sha3.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\");\nfunction keccak256(data) {\n    return '0x' + sha3.keccak_256(bytes_1.arrayify(data));\n}\nexports.keccak256 = keccak256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL2tlY2NhazI1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxXQUFXLG1CQUFPLENBQUMseURBQVM7QUFDNUIsY0FBYyxtQkFBTyxDQUFDLG9FQUFTO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZlcmVhdmVtZW50LWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0B2ZWNoYWluL2V0aGVycy91dGlscy9rZWNjYWsyNTYuanM/NzkzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgc2hhMyA9IHJlcXVpcmUoXCJqcy1zaGEzXCIpO1xudmFyIGJ5dGVzXzEgPSByZXF1aXJlKFwiLi9ieXRlc1wiKTtcbmZ1bmN0aW9uIGtlY2NhazI1NihkYXRhKSB7XG4gICAgcmV0dXJuICcweCcgKyBzaGEzLmtlY2Nha18yNTYoYnl0ZXNfMS5hcnJheWlmeShkYXRhKSk7XG59XG5leHBvcnRzLmtlY2NhazI1NiA9IGtlY2NhazI1NjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/keccak256.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/properties.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/properties.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar errors = __importStar(__webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@vechain/ethers/errors.js\"));\nfunction defineReadOnly(object, name, value) {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\nexports.defineReadOnly = defineReadOnly;\n// There are some issues with instanceof with npm link, so we use this\n// to ensure types are what we expect.\nfunction setType(object, type) {\n    Object.defineProperty(object, '_ethersType', { configurable: false, value: type, writable: false });\n}\nexports.setType = setType;\nfunction isType(object, type) {\n    return (object && object._ethersType === type);\n}\nexports.isType = isType;\nfunction resolveProperties(object) {\n    var result = {};\n    var promises = [];\n    Object.keys(object).forEach(function (key) {\n        var value = object[key];\n        if (value instanceof Promise) {\n            promises.push(value.then(function (value) {\n                result[key] = value;\n                return null;\n            }));\n        }\n        else {\n            result[key] = value;\n        }\n    });\n    return Promise.all(promises).then(function () {\n        return result;\n    });\n}\nexports.resolveProperties = resolveProperties;\nfunction checkProperties(object, properties) {\n    if (!object || typeof (object) !== 'object') {\n        errors.throwError('invalid object', errors.INVALID_ARGUMENT, {\n            argument: 'object',\n            value: object\n        });\n    }\n    Object.keys(object).forEach(function (key) {\n        if (!properties[key]) {\n            errors.throwError('invalid object key - ' + key, errors.INVALID_ARGUMENT, {\n                argument: 'transaction',\n                value: object,\n                key: key\n            });\n        }\n    });\n}\nexports.checkProperties = checkProperties;\nfunction shallowCopy(object) {\n    var result = {};\n    for (var key in object) {\n        result[key] = object[key];\n    }\n    return result;\n}\nexports.shallowCopy = shallowCopy;\nvar opaque = { boolean: true, number: true, string: true };\nfunction deepCopy(object, frozen) {\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof (object)]) {\n        return object;\n    }\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        var result = object.map(function (item) { return deepCopy(item, frozen); });\n        if (frozen) {\n            Object.freeze(result);\n        }\n        return result;\n    }\n    if (typeof (object) === 'object') {\n        // Some internal objects, which are already immutable\n        if (isType(object, 'BigNumber')) {\n            return object;\n        }\n        if (isType(object, 'Description')) {\n            return object;\n        }\n        if (isType(object, 'Indexed')) {\n            return object;\n        }\n        var result = {};\n        for (var key in object) {\n            var value = object[key];\n            if (value === undefined) {\n                continue;\n            }\n            defineReadOnly(result, key, deepCopy(value, frozen));\n        }\n        if (frozen) {\n            Object.freeze(result);\n        }\n        return result;\n    }\n    // The function type is also immutable, so safe to copy by assignment\n    if (typeof (object) === 'function') {\n        return object;\n    }\n    throw new Error('Cannot deepCopy ' + typeof (object));\n}\nexports.deepCopy = deepCopy;\n// See: https://github.com/isaacs/inherits/blob/master/inherits_browser.js\nfunction inherits(ctor, superCtor) {\n    ctor.super_ = superCtor;\n    ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n            value: ctor,\n            enumerable: false,\n            writable: true,\n            configurable: true\n        }\n    });\n}\nfunction inheritable(parent) {\n    return function (child) {\n        inherits(child, parent);\n        defineReadOnly(child, 'inherits', inheritable(child));\n    };\n}\nexports.inheritable = inheritable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL3Byb3BlcnRpZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsbUJBQU8sQ0FBQyxpRUFBVztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxtREFBbUQ7QUFDdEc7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdDQUFnQztBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVyZWF2ZW1lbnQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL3Byb3BlcnRpZXMuanM/ZTBhZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdO1xuICAgIHJlc3VsdFtcImRlZmF1bHRcIl0gPSBtb2Q7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXJyb3JzID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuLi9lcnJvcnNcIikpO1xuZnVuY3Rpb24gZGVmaW5lUmVhZE9ubHkob2JqZWN0LCBuYW1lLCB2YWx1ZSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgfSk7XG59XG5leHBvcnRzLmRlZmluZVJlYWRPbmx5ID0gZGVmaW5lUmVhZE9ubHk7XG4vLyBUaGVyZSBhcmUgc29tZSBpc3N1ZXMgd2l0aCBpbnN0YW5jZW9mIHdpdGggbnBtIGxpbmssIHNvIHdlIHVzZSB0aGlzXG4vLyB0byBlbnN1cmUgdHlwZXMgYXJlIHdoYXQgd2UgZXhwZWN0LlxuZnVuY3Rpb24gc2V0VHlwZShvYmplY3QsIHR5cGUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCAnX2V0aGVyc1R5cGUnLCB7IGNvbmZpZ3VyYWJsZTogZmFsc2UsIHZhbHVlOiB0eXBlLCB3cml0YWJsZTogZmFsc2UgfSk7XG59XG5leHBvcnRzLnNldFR5cGUgPSBzZXRUeXBlO1xuZnVuY3Rpb24gaXNUeXBlKG9iamVjdCwgdHlwZSkge1xuICAgIHJldHVybiAob2JqZWN0ICYmIG9iamVjdC5fZXRoZXJzVHlwZSA9PT0gdHlwZSk7XG59XG5leHBvcnRzLmlzVHlwZSA9IGlzVHlwZTtcbmZ1bmN0aW9uIHJlc29sdmVQcm9wZXJ0aWVzKG9iamVjdCkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgcHJvbWlzZXMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh2YWx1ZS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVzb2x2ZVByb3BlcnRpZXMgPSByZXNvbHZlUHJvcGVydGllcztcbmZ1bmN0aW9uIGNoZWNrUHJvcGVydGllcyhvYmplY3QsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoIW9iamVjdCB8fCB0eXBlb2YgKG9iamVjdCkgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIGVycm9ycy50aHJvd0Vycm9yKCdpbnZhbGlkIG9iamVjdCcsIGVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICBhcmd1bWVudDogJ29iamVjdCcsXG4gICAgICAgICAgICB2YWx1ZTogb2JqZWN0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIXByb3BlcnRpZXNba2V5XSkge1xuICAgICAgICAgICAgZXJyb3JzLnRocm93RXJyb3IoJ2ludmFsaWQgb2JqZWN0IGtleSAtICcgKyBrZXksIGVycm9ycy5JTlZBTElEX0FSR1VNRU5ULCB7XG4gICAgICAgICAgICAgICAgYXJndW1lbnQ6ICd0cmFuc2FjdGlvbicsXG4gICAgICAgICAgICAgICAgdmFsdWU6IG9iamVjdCxcbiAgICAgICAgICAgICAgICBrZXk6IGtleVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuY2hlY2tQcm9wZXJ0aWVzID0gY2hlY2tQcm9wZXJ0aWVzO1xuZnVuY3Rpb24gc2hhbGxvd0NvcHkob2JqZWN0KSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBvYmplY3Rba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuc2hhbGxvd0NvcHkgPSBzaGFsbG93Q29weTtcbnZhciBvcGFxdWUgPSB7IGJvb2xlYW46IHRydWUsIG51bWJlcjogdHJ1ZSwgc3RyaW5nOiB0cnVlIH07XG5mdW5jdGlvbiBkZWVwQ29weShvYmplY3QsIGZyb3plbikge1xuICAgIC8vIE9wYXF1ZSBvYmplY3RzIGFyZSBub3QgbXV0YWJsZSwgc28gc2FmZSB0byBjb3B5IGJ5IGFzc2lnbm1lbnRcbiAgICBpZiAob2JqZWN0ID09PSB1bmRlZmluZWQgfHwgb2JqZWN0ID09PSBudWxsIHx8IG9wYXF1ZVt0eXBlb2YgKG9iamVjdCldKSB7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuICAgIC8vIEFycmF5cyBhcmUgbXV0YWJsZSwgc28gd2UgbmVlZCB0byBjcmVhdGUgYSBjb3B5XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0KSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0Lm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gZGVlcENvcHkoaXRlbSwgZnJvemVuKTsgfSk7XG4gICAgICAgIGlmIChmcm96ZW4pIHtcbiAgICAgICAgICAgIE9iamVjdC5mcmVlemUocmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIChvYmplY3QpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBTb21lIGludGVybmFsIG9iamVjdHMsIHdoaWNoIGFyZSBhbHJlYWR5IGltbXV0YWJsZVxuICAgICAgICBpZiAoaXNUeXBlKG9iamVjdCwgJ0JpZ051bWJlcicpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1R5cGUob2JqZWN0LCAnRGVzY3JpcHRpb24nKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUeXBlKG9iamVjdCwgJ0luZGV4ZWQnKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmluZVJlYWRPbmx5KHJlc3VsdCwga2V5LCBkZWVwQ29weSh2YWx1ZSwgZnJvemVuKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZyb3plbikge1xuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZShyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFRoZSBmdW5jdGlvbiB0eXBlIGlzIGFsc28gaW1tdXRhYmxlLCBzbyBzYWZlIHRvIGNvcHkgYnkgYXNzaWdubWVudFxuICAgIGlmICh0eXBlb2YgKG9iamVjdCkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGVlcENvcHkgJyArIHR5cGVvZiAob2JqZWN0KSk7XG59XG5leHBvcnRzLmRlZXBDb3B5ID0gZGVlcENvcHk7XG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY3MvaW5oZXJpdHMvYmxvYi9tYXN0ZXIvaW5oZXJpdHNfYnJvd3Nlci5qc1xuZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBpbmhlcml0YWJsZShwYXJlbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGluaGVyaXRzKGNoaWxkLCBwYXJlbnQpO1xuICAgICAgICBkZWZpbmVSZWFkT25seShjaGlsZCwgJ2luaGVyaXRzJywgaW5oZXJpdGFibGUoY2hpbGQpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5pbmhlcml0YWJsZSA9IGluaGVyaXRhYmxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/properties.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/rlp.js":
/*!***************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/rlp.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n//See: https://github.com/ethereum/wiki/wiki/RLP\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\");\nfunction arrayifyInteger(value) {\n    var result = [];\n    while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n    }\n    return result;\n}\nfunction unarrayifyInteger(data, offset, length) {\n    var result = 0;\n    for (var i = 0; i < length; i++) {\n        result = (result * 256) + data[offset + i];\n    }\n    return result;\n}\nfunction _encode(object) {\n    if (Array.isArray(object)) {\n        var payload = [];\n        object.forEach(function (child) {\n            payload = payload.concat(_encode(child));\n        });\n        if (payload.length <= 55) {\n            payload.unshift(0xc0 + payload.length);\n            return payload;\n        }\n        var length = arrayifyInteger(payload.length);\n        length.unshift(0xf7 + length.length);\n        return length.concat(payload);\n    }\n    var data = Array.prototype.slice.call(bytes_1.arrayify(object));\n    if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n    }\n    else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n    }\n    var length = arrayifyInteger(data.length);\n    length.unshift(0xb7 + length.length);\n    return length.concat(data);\n}\nfunction encode(object) {\n    return bytes_1.hexlify(_encode(object));\n}\nexports.encode = encode;\nfunction _decodeChildren(data, offset, childOffset, length) {\n    var result = [];\n    while (childOffset < offset + 1 + length) {\n        var decoded = _decode(data, childOffset);\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n        if (childOffset > offset + 1 + length) {\n            throw new Error('invalid rlp');\n        }\n    }\n    return { consumed: (1 + length), result: result };\n}\n// returns { consumed: number, result: Object }\nfunction _decode(data, offset) {\n    if (data.length === 0) {\n        throw new Error('invalid rlp data');\n    }\n    // Array with extra length prefix\n    if (data[offset] >= 0xf8) {\n        var lengthLength = data[offset] - 0xf7;\n        if (offset + 1 + lengthLength > data.length) {\n            throw new Error('too short');\n        }\n        var length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            throw new Error('to short');\n        }\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);\n    }\n    else if (data[offset] >= 0xc0) {\n        var length = data[offset] - 0xc0;\n        if (offset + 1 + length > data.length) {\n            throw new Error('invalid rlp data');\n        }\n        return _decodeChildren(data, offset, offset + 1, length);\n    }\n    else if (data[offset] >= 0xb8) {\n        var lengthLength = data[offset] - 0xb7;\n        if (offset + 1 + lengthLength > data.length) {\n            throw new Error('invalid rlp data');\n        }\n        var length = unarrayifyInteger(data, offset + 1, lengthLength);\n        if (offset + 1 + lengthLength + length > data.length) {\n            throw new Error('invalid rlp data');\n        }\n        var result = bytes_1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));\n        return { consumed: (1 + lengthLength + length), result: result };\n    }\n    else if (data[offset] >= 0x80) {\n        var length = data[offset] - 0x80;\n        if (offset + 1 + length > data.length) {\n            throw new Error('invlaid rlp data');\n        }\n        var result = bytes_1.hexlify(data.slice(offset + 1, offset + 1 + length));\n        return { consumed: (1 + length), result: result };\n    }\n    return { consumed: 1, result: bytes_1.hexlify(data[offset]) };\n}\nfunction decode(data) {\n    var bytes = bytes_1.arrayify(data);\n    var decoded = _decode(bytes, 0);\n    if (decoded.consumed !== bytes.length) {\n        throw new Error('invalid rlp data');\n    }\n    return decoded.result;\n}\nexports.decode = decode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL3JscC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsbUJBQU8sQ0FBQyxvRUFBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmVyZWF2ZW1lbnQtZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHZlY2hhaW4vZXRoZXJzL3V0aWxzL3JscC5qcz8zZWUyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy9TZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS93aWtpL3dpa2kvUkxQXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuZnVuY3Rpb24gYXJyYXlpZnlJbnRlZ2VyKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlICh2YWx1ZSkge1xuICAgICAgICByZXN1bHQudW5zaGlmdCh2YWx1ZSAmIDB4ZmYpO1xuICAgICAgICB2YWx1ZSA+Pj0gODtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHVuYXJyYXlpZnlJbnRlZ2VyKGRhdGEsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgdmFyIHJlc3VsdCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSAocmVzdWx0ICogMjU2KSArIGRhdGFbb2Zmc2V0ICsgaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBfZW5jb2RlKG9iamVjdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICAgICAgdmFyIHBheWxvYWQgPSBbXTtcbiAgICAgICAgb2JqZWN0LmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgICAgICBwYXlsb2FkID0gcGF5bG9hZC5jb25jYXQoX2VuY29kZShjaGlsZCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHBheWxvYWQubGVuZ3RoIDw9IDU1KSB7XG4gICAgICAgICAgICBwYXlsb2FkLnVuc2hpZnQoMHhjMCArIHBheWxvYWQubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSBhcnJheWlmeUludGVnZXIocGF5bG9hZC5sZW5ndGgpO1xuICAgICAgICBsZW5ndGgudW5zaGlmdCgweGY3ICsgbGVuZ3RoLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBsZW5ndGguY29uY2F0KHBheWxvYWQpO1xuICAgIH1cbiAgICB2YXIgZGF0YSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ5dGVzXzEuYXJyYXlpZnkob2JqZWN0KSk7XG4gICAgaWYgKGRhdGEubGVuZ3RoID09PSAxICYmIGRhdGFbMF0gPD0gMHg3Zikge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YS5sZW5ndGggPD0gNTUpIHtcbiAgICAgICAgZGF0YS51bnNoaWZ0KDB4ODAgKyBkYXRhLmxlbmd0aCk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gYXJyYXlpZnlJbnRlZ2VyKGRhdGEubGVuZ3RoKTtcbiAgICBsZW5ndGgudW5zaGlmdCgweGI3ICsgbGVuZ3RoLmxlbmd0aCk7XG4gICAgcmV0dXJuIGxlbmd0aC5jb25jYXQoZGF0YSk7XG59XG5mdW5jdGlvbiBlbmNvZGUob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJ5dGVzXzEuaGV4bGlmeShfZW5jb2RlKG9iamVjdCkpO1xufVxuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG5mdW5jdGlvbiBfZGVjb2RlQ2hpbGRyZW4oZGF0YSwgb2Zmc2V0LCBjaGlsZE9mZnNldCwgbGVuZ3RoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHdoaWxlIChjaGlsZE9mZnNldCA8IG9mZnNldCArIDEgKyBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGRlY29kZWQgPSBfZGVjb2RlKGRhdGEsIGNoaWxkT2Zmc2V0KTtcbiAgICAgICAgcmVzdWx0LnB1c2goZGVjb2RlZC5yZXN1bHQpO1xuICAgICAgICBjaGlsZE9mZnNldCArPSBkZWNvZGVkLmNvbnN1bWVkO1xuICAgICAgICBpZiAoY2hpbGRPZmZzZXQgPiBvZmZzZXQgKyAxICsgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcmxwJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgY29uc3VtZWQ6ICgxICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHQgfTtcbn1cbi8vIHJldHVybnMgeyBjb25zdW1lZDogbnVtYmVyLCByZXN1bHQ6IE9iamVjdCB9XG5mdW5jdGlvbiBfZGVjb2RlKGRhdGEsIG9mZnNldCkge1xuICAgIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcmxwIGRhdGEnKTtcbiAgICB9XG4gICAgLy8gQXJyYXkgd2l0aCBleHRyYSBsZW5ndGggcHJlZml4XG4gICAgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGY4KSB7XG4gICAgICAgIHZhciBsZW5ndGhMZW5ndGggPSBkYXRhW29mZnNldF0gLSAweGY3O1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvbyBzaG9ydCcpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvIHNob3J0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9kZWNvZGVDaGlsZHJlbihkYXRhLCBvZmZzZXQsIG9mZnNldCArIDEgKyBsZW5ndGhMZW5ndGgsIGxlbmd0aExlbmd0aCArIGxlbmd0aCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRhdGFbb2Zmc2V0XSA+PSAweGMwKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBkYXRhW29mZnNldF0gLSAweGMwO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcmxwIGRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX2RlY29kZUNoaWxkcmVuKGRhdGEsIG9mZnNldCwgb2Zmc2V0ICsgMSwgbGVuZ3RoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGF0YVtvZmZzZXRdID49IDB4YjgpIHtcbiAgICAgICAgdmFyIGxlbmd0aExlbmd0aCA9IGRhdGFbb2Zmc2V0XSAtIDB4Yjc7XG4gICAgICAgIGlmIChvZmZzZXQgKyAxICsgbGVuZ3RoTGVuZ3RoID4gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBybHAgZGF0YScpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBsZW5ndGggPSB1bmFycmF5aWZ5SW50ZWdlcihkYXRhLCBvZmZzZXQgKyAxLCBsZW5ndGhMZW5ndGgpO1xuICAgICAgICBpZiAob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCA+IGRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcmxwIGRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gYnl0ZXNfMS5oZXhsaWZ5KGRhdGEuc2xpY2Uob2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCwgb2Zmc2V0ICsgMSArIGxlbmd0aExlbmd0aCArIGxlbmd0aCkpO1xuICAgICAgICByZXR1cm4geyBjb25zdW1lZDogKDEgKyBsZW5ndGhMZW5ndGggKyBsZW5ndGgpLCByZXN1bHQ6IHJlc3VsdCB9O1xuICAgIH1cbiAgICBlbHNlIGlmIChkYXRhW29mZnNldF0gPj0gMHg4MCkge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YVtvZmZzZXRdIC0gMHg4MDtcbiAgICAgICAgaWYgKG9mZnNldCArIDEgKyBsZW5ndGggPiBkYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZsYWlkIHJscCBkYXRhJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc3VsdCA9IGJ5dGVzXzEuaGV4bGlmeShkYXRhLnNsaWNlKG9mZnNldCArIDEsIG9mZnNldCArIDEgKyBsZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIHsgY29uc3VtZWQ6ICgxICsgbGVuZ3RoKSwgcmVzdWx0OiByZXN1bHQgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgY29uc3VtZWQ6IDEsIHJlc3VsdDogYnl0ZXNfMS5oZXhsaWZ5KGRhdGFbb2Zmc2V0XSkgfTtcbn1cbmZ1bmN0aW9uIGRlY29kZShkYXRhKSB7XG4gICAgdmFyIGJ5dGVzID0gYnl0ZXNfMS5hcnJheWlmeShkYXRhKTtcbiAgICB2YXIgZGVjb2RlZCA9IF9kZWNvZGUoYnl0ZXMsIDApO1xuICAgIGlmIChkZWNvZGVkLmNvbnN1bWVkICE9PSBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHJscCBkYXRhJyk7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVkLnJlc3VsdDtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/rlp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@vechain/ethers/utils/utf8.js":
/*!****************************************************!*\
  !*** ./node_modules/@vechain/ethers/utils/utf8.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar constants_1 = __webpack_require__(/*! ../constants */ \"(ssr)/./node_modules/@vechain/ethers/constants.js\");\nvar errors_1 = __webpack_require__(/*! ../errors */ \"(ssr)/./node_modules/@vechain/ethers/errors.js\");\nvar bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@vechain/ethers/utils/bytes.js\");\n///////////////////////////////\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n    if (form != UnicodeNormalizationForm.current) {\n        errors_1.checkNormalize();\n        str = str.normalize(form);\n    }\n    var result = [];\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 0x80) {\n            result.push(c);\n        }\n        else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            var c2 = str.charCodeAt(i);\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error('invalid utf-8 string');\n            }\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((c >> 18) | 0xf0);\n            result.push(((c >> 12) & 0x3f) | 0x80);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n        else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n    return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes, ignoreErrors) {\n    bytes = bytes_1.arrayify(bytes);\n    var result = '';\n    var i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        var c = bytes[i++];\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result += String.fromCharCode(c);\n            continue;\n        }\n        // Multibyte; how many bytes left for this character?\n        var extraLength = null;\n        var overlongMask = null;\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n            // 1110 xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n            // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        }\n        else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n        }\n        else {\n            if (!ignoreErrors) {\n                if ((c & 0xc0) === 0x80) {\n                    throw new Error('invalid utf8 byte sequence; unexpected continuation byte');\n                }\n                throw new Error('invalid utf8 byte sequence; invalid prefix');\n            }\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i + extraLength > bytes.length) {\n            if (!ignoreErrors) {\n                throw new Error('invalid utf8 byte sequence; too short');\n            }\n            // If there is an invalid unprocessed byte, skip continuation bytes\n            for (; i < bytes.length; i++) {\n                if (bytes[i] >> 6 !== 0x02) {\n                    break;\n                }\n            }\n            continue;\n        }\n        // Remove the length prefix from the char\n        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n        for (var j = 0; j < extraLength; j++) {\n            var nextChar = bytes[i];\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                res = null;\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n        if (res === null) {\n            if (!ignoreErrors) {\n                throw new Error('invalid utf8 byte sequence; invalid continuation byte');\n            }\n            continue;\n        }\n        // Check for overlong seuences (more bytes than needed)\n        if (res <= overlongMask) {\n            if (!ignoreErrors) {\n                throw new Error('invalid utf8 byte sequence; overlong');\n            }\n            continue;\n        }\n        // Maximum code point\n        if (res > 0x10ffff) {\n            if (!ignoreErrors) {\n                throw new Error('invalid utf8 byte sequence; out-of-range');\n            }\n            continue;\n        }\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            if (!ignoreErrors) {\n                throw new Error('invalid utf8 byte sequence; utf-16 surrogate');\n            }\n            continue;\n        }\n        if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n        }\n        res -= 0x10000;\n        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n    }\n    return result;\n}\nexports.toUtf8String = toUtf8String;\nfunction formatBytes32String(text) {\n    // Get the bytes\n    var bytes = toUtf8Bytes(text);\n    // Check we have room for null-termination\n    if (bytes.length > 31) {\n        throw new Error('bytes32 string must be less than 32 bytes');\n    }\n    // Zero-pad (implicitly null-terminates)\n    return bytes_1.hexlify(bytes_1.concat([bytes, constants_1.HashZero]).slice(0, 32));\n}\nexports.formatBytes32String = formatBytes32String;\nfunction parseBytes32String(bytes) {\n    var data = bytes_1.arrayify(bytes);\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) {\n        throw new Error('invalid bytes32 - not 32 bytes long');\n    }\n    if (data[31] !== 0) {\n        throw new Error('invalid bytes32 sdtring - no null terminator');\n    }\n    // Find the null termination\n    var length = 31;\n    while (data[length - 1] === 0) {\n        length--;\n    }\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\nexports.parseBytes32String = parseBytes32String;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@vechain/ethers/utils/utf8.js\n");

/***/ })

};
;